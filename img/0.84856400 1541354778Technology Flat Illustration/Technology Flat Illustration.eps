%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Technology Flat Illustration.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Sasa
%%CreationDate: 10/27/2018
%%BoundingBox: 0 0 1200 900
%%HiResBoundingBox: 0 0 1199.9996 900
%%CropBox: 0 0 1199.9996 900
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 13680 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFD86FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FDBBFFA8FD7DFF7E59CBFD45FFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFCBFFFFFF2828287EA8FFA8
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FD3BFF53282F2853A8FD75FF8A3B8AAFFF292F2929062953A8A8FD72
%FF66413B66845AA97E29292829297EA87EA8FD3EFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFCB8A3B413B413B85A9A953290629062F282F53AFFD
%04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD34FF6642
%416641663B6685FF845A282F2F532F532F84FD6CFF8A3B413B663B413B42
%60AFA984292F2F54282F28A8FD6BFF60423B663B6641663B423CAFAFAF5A
%2F2954292F59FD38FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%663B6684663B663B413B3C60AFA9AF845929542F29287EA8FFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD36FF60423B8A60AF66663B663B8BA9
%AFA9AFAFA9532F292F2853A8FD67FF6619423B8A3B8A60413B3C60AFA9AF
%A9AFA9AF5A2F0629062953A9CBFD64FFAE423B423B4260663B423B85A9AF
%A9AFA9AFA9FFA97E282928292884CBFD32FFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFA88A3B3C3B3B3B423B3C84FF84A985AFA9AF85AFA9A9
%2F29062906A8A8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD38FF60423B66
%3B663BAFFFFF84AFA9AFA9AFA9AFAFFF8453282959FD68FF353C3B3C3B3C
%84FFA8A9604360A9A8AFA9AFA9AFA97E0659A8FD66FFCB7E603C3B423C8B
%FFFFA9431AFB3D85A8AFA9AFA9AFAF7E53FD30FFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF53AF3B3C3B6084FFA8A93CFB1AFB
%1A3D84A9A9AF85AF7E59A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD3BFF5AA9
%8B1A84A8FFFFFFA9671B43FB431A4361AFA9AFAF8553FD68FF53AF7D3C35
%777DFFA8A93DFB35361AFB1AFB1A8584AF7E5353FD67FF5AA9A9597D5959
%84FFA8613577523D1B431BFB1B3D85852F53FD31FFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFCFFF53AFA87D537DA8FFA8A9535352532F
%FB1A5F1AFB1A857E2F2FFD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD39FF5AA9A8
%597D53FFFFFFA97E5253527D1BACFECC3C1B61A92F53FD67FF53AF7D7D53
%7D52A8A9A953535253525A81C6C6AC1B617E532FFD66FFA95AA97E537D53
%7DA8FFA98452FD04535952FEC63D61842953FD2FFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF2FAF7D53597E52A8A8A9858553
%53525352537BAB14857E2F2FFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD3BFF5A
%A9FFA8A8FFAFA8FFA9AFAFAF7E59527D5353361B61842953FD63FF7E7DFF
%FF53AFAFFFA9FFFFFFA8A9A9AFA9AF857E2E53525314857E2F53FD62FF7E
%2805FFFF5A85AFAFFFAFFFFFFF84AFA9AFA9AFAF8559535236618453FD32
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA82E0552CAFF53A9A1A9A9
%FFA8FFA8A984AFA9AF85AFA9AF5A532F857E59A8FFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FD34FF5328A0CFFF5AA2C2BCA8A9FFFFFFA9AFA9AFA9AFA9
%AFA9FFA985AF8553FD62FFAEAE7CC8CAFF53A2BCC2BCBD7EAFA9AF85AFA9
%AF85AFA9AF85AFA9AF7E5353FFA8FFAFFD5CFFAE8888ADA7FFCB5AA2C2BC
%C3BCBC9BA9A9AFA9AFA9AFA9AFA9AFA9AFAF852953A8FFA8FFA9FD2AFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFCBAD5E885E885E832FA2FD06BC9AA9A9AF
%85AFA8AF84A984AF85AF7E2F53FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD1AFF
%A8FD19FF8888828982645E5FA2BCBCC3BCBDBCBDA9AFA9AFAFFFFFFFA9AF
%85AFAF8553FFFFFFA8FFAFFFA8FD3EFFA152052E7DFD15FFA78982885E88
%5E5E5EA8BCBCBCBDB6BC94A9A9AF85AFA9FFA8FFA8A984AF5A59A8FFA8FF
%A8FFA8FFA8FFA8FFA8FD38FFCA52702E057DFD15FFAE82AD5E885E898288
%83AFA1BDBCC3BCBDA9AFA9AFA9FFA9FD05FFA98453FFA8FFA9FFA8FFA9FF
%A8FFA8FFA8FD24FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA80528
%2752A7FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8CFA7645E5E
%5EAE5E88A7CAA1C9C2BC94A985AF85AFA9A853A8A8FFA8AF5959A8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FD16FF7D28055276CAFD0AFF88ADADFD0A
%FFAE5E895E89A87E83CAA8AFA9CAB6BDA9AFA9AFA9FFA97E52AFFFFFA984
%53FFA8FFAFFFA8FFAFFFA8FFAFFFA8FFA9FD35FF7D055276A17D3C59A8CA
%FD05FF89888288AEFD09FF83FD045EAE53A985AF846660A9A8AF85AFA9AF
%A8FFFFA8A8FFA8AF5A7EA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD
%32FF532EA7CEFF601BFB1A84FD05FFAD888982CFFD09FF895E655E5E837E
%A9AFA98B41413B8BA9AFA9AFA9FF7D84FFFFAFFFA97E53FFA9FFA8FFA9FF
%A8FFA9FFA8FFA9FFA8FFA9FFA8FD1CFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFAF352E413B65141B1A1B59FFA8FFFFFF83888288A7FFFFFF
%A8FFFFFFCAFF5F5E395E398353A9A9AF60413B413B6084A985AFA87D5259
%7EFFA8AF5A59A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD18FF352E3B664142
%1B4314FD06FFAD88AD88CFFD09FF6113603B3C847EA9AFA98B41663B6641
%4260AFAFA8537E7D537DFFA98453FFFFFFA8FFAFFFA8FFAFFFA8FFAFFFA8
%FFAFFFA8FFAFFFA8FD2CFFAE60273B3B661A1B1459CFFD05FF83888288A7
%FD09FF3DFD04158553AFA9AF60423B423B423B6084AFFFA8537D7DA8A8AF
%5A59A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD2BFF
%AF3B3B35423B6036147DFD06FFAD828982AEFD09FF3D151B151B857E85AF
%A98B3B663B423B4260AFA9FF7E7D53A9FFFFA88453FFA8FFA9FFA8FFA9FF
%A8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FD18FFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFA8FD043B3C3BAF7CC9AFFFFFFFA8FF82885E5E83FFA8
%FFFFFFA8FFFFAF141B3615148553A9A9AF85603B3C3B3C3B6085AF7E5353
%5953A8A8AF5959A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD16FFC9663C
%423B4283C9CFFD05FFA9AE838983FFA9FD07FFAF1B3DFF151B855353AFAF
%AFA9AF60423B4260AFAFAF4B4B767E7DFFA98453FFA8FFAFFFA8FFAFFFA8
%FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FD2BFFAF3B3C3B3C60C9CAFD05FF
%AFA9A8A9A8AFA8AFFD07FFAF1461FF3D148B53282884A9AFA9AF843C1960
%85AF84524A4A4C84A9AF5A7EA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FD2AFF843C3B423B8AFD08FFA8A9A8A9A8A9A8FD07
%FF851B85FF611B84532829285A84AFA9FFA98B60AFAFFFA0754A517EFFA9
%7E53FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFCBFFA8FFA9FFA8FD18FFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FF8A193C3B3C60FFA8FFFFFF
%A8FFA8A884A884A884FFFFFFA8FFFFFFCF8B14AFCF8B148B7D2806290629
%53A9A9AFA9AF85AFA8C9754A7DFFA8AF5A59A8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8AEA7FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FD18FFAE3C3C423C8BFD08FFAFFFA8A9A8FD09FF851BAFFF851B85
%FF7E2F062F2929297EA9FFA9AFA9FFC9C8A1FFFFFFA98453FFFFFFA8FFAF
%FFA8FFAFFFA8FFAFFFA8AD88ACADFD32FF3B3C3B3C60FD09FFCFFFA9FD0A
%FF8B1AFFFF8B148BFFFFA8590629282906537EAFA9AF85A8C9FFA9FFA8AF
%5A59A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF82898288A8FD30FFAF603C3C
%198BFD16FF8561FFFF851B8BFD04FFA82F29282F29535385A9FFFFFFA9FF
%A9FFA98553FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFAEAD88AD88FD1EFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF3B3C3B3C60FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFF853CFFFFAF14AFFFFFA8FFFFFF7D2F
%062F30302FFFA8FFA8FFA8FFA8AF5A59A8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FF828882ADCFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FD16FFAF603C3C1A8BFD16FF6167FFFF853DAFFD07FFA97E285430
%7FAFFFAFFFA9FFA9AFAF8553FFA8FFAFFFA8FFAFFFA8FFAFFFA8FFFF8988
%AD88FD31FFAF133C3C1A60FD07FFA9FFA9FFA8FD09FFCA6136CACAAF1AFD
%0AFFA8532953FFA8FFA8FFA8FFA9AF5A7EA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFFFFF82888289FD32FF843B3C3BAFFD08FFAFFFA8FFAFFD07FFA8FF5952
%7DFFA93DAFFD0BFF7E59A8FFA8FFA9FFA8AFAF8453FFA9FFA8FFA9FFA8FF
%A8FFA8FFFFFFA889888882FD1CFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFC9C9A7C8CAFFA8FFFFFFA8FFA9FFA8A859A8A8FFA8FFA8FF
%FFFFA8A8A8FFA8AF1AAFA8FFFFFFA8FFFFFFA8FFFFFFA8AFA8AFA8FFA859
%2FAF7E59A8FFA8FFA8FFA8FFA8FFA8FFA8FFA9AF5E645E5EA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD19FFCFC8CFC8FD05FFAF
%FFA8A8FFFFA8A8A8FFFFFFA9FD07FFA8FFA859527EFD0CFFA8FFA9FFA9FF
%53292F5353FFFFFFA8FFAFFFA8FD07FFA8AF83AEA8FD32FFFD04C9FD04FF
%A8FFA8FF7D7E7DAFFFFFA8AFA8A9A8FD07FFA8A87DA8A8FFA8FD09FFCAC9
%A7AFA8FFA87E28290659A8FFA8FFA8FFA8FD07FFA8A8A8A9A8A884FD31FF
%FD04C9FD05FFA8FFA9FFA8FFFFFFA8AFA8FFA9FD09FFAFFFFFFFA8FD0BFF
%C2CFA9FFA8FF8B67532953FFA8FFA8FFAFFD09FFA8A8A8A9A8A8A8FD1CFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA0C9C2C9FD04FFA8A9A8
%A8A8FFA8A9A8A9A8A9A8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8
%FFFFFFA8FFC9C9A8AFA8A9A88B1A435A7ECAFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8A884A884A8A8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FD16FF7E5276A0C9A8FD06FFA8AFA8FFA8FFA8FD1CFFCFC9CFA8
%FFA8CF83FB1B4367AFCAFD0FFFA8FFA8FD31FFA8525328522EFD07FFA8A9
%A8A8A8FD1DFFC9CFC6FEC6C6C6A61BFB1AFB1A67A8FD44FFA8A884FD09FF
%A8FD07FF856161FD15FFC9CFCFFEC6FEC6C6A5423C431A431B4384FD2CFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFCAFF5A3760853785A8FFFFFFA8FFFFFFCAFFFFFF
%A8FFFFFFA8FFFFC9A8CFFD05C6A53B651A1B1AFB1AFB84FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FD2CFFAF613761856115AFFD05FFAF8BFD0BFFCFFFCFFEC6CCC8C6
%C66641421BACA5431BAFFD43FFAEFD11FFCAA9363736A9CAFFFFFFA9671A
%FB3CAFFD0BFFCFC6C6C8CFC6C63B423B4281FE811B84FFA8FFA8FD3EFFAE
%AD82ADAEFD11FF84FD05FF613D1A431BFB1A67AFFD09FFCFFEC6CEFFCCC6
%893B424142A4AC1BAFCAFFA8FFAFFD28FFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFF838882AE828883FFA9FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFCFFFFFA82F352F5314FB1A1B1AFB61FFCFFFFFFFA8FFFFCFC6C6CAFFC7
%C6C98B3B3C3B651A1B84FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD16FFAF895E8883
%AE886483FD12FF8452535377535A356081CC82FB1BAFFD06FFCFFEC7FFFF
%CEC6CEFFFF84423B421AAFCAFD40FFA8AE5E5E5D8883FD05FFAFFFA9FFAF
%FD09FF5A305253525352537BFEC6FE3B1B1A67FD05FFCFC6CCFFFFC9C6C9
%FFFFFFA9603B3C84FFA8FD40FFCBFF8383A8FD07FFA8A9A8FD09FFCACD3B
%362F775353535FABFEA5431B1B3CFD05FFCFFEC7FFFFCFC6CEFD05FFAF60
%AFFD2BFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%A9FFCFFFFFFFA8FFA8A884A8A8FFA8FFFFFFA8FFAFC9C0883A3C0E535253
%2F36351B153D5F88A7FFFFFFA9FFC6CCA9FFCFC6A6FFFFFFA8FFFFFFCAFF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FD24FFA9FFA8FFA9FFA8FD07FFA8CAC1A682653636
%537752361560828883FD06FFFEC7FFFFFFC6CEFD55FF84A8A8A984A8FD08
%FFA9CAC2C181883B362F36365F5D8883FD07FFC6CCFFFFFFC7C8FD54FFA8
%A9A8A8A8A9A8FD0BFFC9C29FA65E3C3B885E83A8FD08FFCCC8FFFFFFC7CE
%FD35FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFF84A884A884AFFFFFA8FFFFFFA8FFFFFFA9FFA8C3BBC2815E5E
%A8CBFFA8FFFFFFA8FFFFFFC6CDFFFFA8CCC7FFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FD24FFA8FFA8FD0FFFAFCAC2C2A7FD0CFFCCC8FFA87E
%51A7FD69FFAFFFA8FD0DFFC7CDA9FFA8847EFFA8FD75FF847EA6A6FFA9FD
%36FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFA8FF7D59287DA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FD46FFA8FFFFA8A8FD7CFFA8FFA8FFA8FDB9FFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FDFCFFFD85FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2018-10-27T12:18:10+02:00</xap:CreateDate>
         <xap:ModifyDate>2018-10-27T12:18:11+02:00</xap:ModifyDate>
         <xap:MetadataDate>2018-10-27T12:18:11+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9SYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXm2gfnr5S1fVJdPYtp0yyGOH63RVlANBxcEqpP8AK30VzMyaKcRfNqjl&#xA;BeiQXMMw+A7/AMp65iENqrgV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KoLWbma10u5uITxljQlGIrQ9K0OLia/NLHgnOP1AMQ0rzvf2zcNRX63AT/AHqA&#xA;LKv0CisPuwiUZeReW0PtFOJrN6h39f1F4o/5Ra3daG+p6e8d3dzPIbnT2AWWLjI1PTbkVYsorQ0z&#xA;oIaiPJ3uLUQyi4GwgfKn5oecPJ1z+jrtXubO3PB9Ou+SyRU7RsRyT5bj2yGXSwyb8i5UMpD2HT/+&#xA;cgfKUsdq8qXJjlqLthGGa1pT4pVBqyb/AGkB+/NedDP8dXI8YPSdL1bTNWso73TbmO7tJRVJomDL&#xA;8tuhHcHMOUTE0WwG0XkUuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxVLPMppoV6f+Kz+sYuv7V/xaf8AVeaxxTSRSSohMcVPUfsOXT76ZXwvnMcUpAyA2HNaGmt5&#xA;hJGzQTgAhhsaEVFQeoI8ctx5JQ5M8eTJilcSYlVvND0LznG9lrdmpvIo6w38PwSha02bfof2TVfb&#xA;Nlgzkiw9T2Z2ic9xkPUHm/mj8rdc0EetCjajp0O8V9agrcwgbj1I132/mWo7mmbTHqISFSDuAUr8&#xA;meabnyzrMGpC5nXT+a/W5LEpSVAd1mgf92221V4kdeuQ1Ol4o7UWyE6L6Y8uectD1+yW7067juYT&#xA;QM6HdSezoaMh9iM5/JilA0Q5okDyT0EEVBqD0IytLeKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxVB6vZve6Zc2sZCySxlUJ6cu1fpwhxtZgOXDKA5yDy+SK+0m6MF9A&#xA;yo9PVhbZZEBB+FhUdvtDplnC+eTxZNNPhyR2PMd49/6Vt3qMdzCGdSbsyM7yigXixrxoPA9PDpg4&#xA;GGbOMkbI9dnf39EV5WaU6rMY158YKsPbmMycREY797tewIE5JV/N/Sy2OVZAabEdQeoy+3pmGecP&#xA;yq8v+YFmngrpmpSg87mAfBIev76LYN8xQ++XY88o7dE28Y1Ty556/L/UlvI2ktgDSLUbUloXFfst&#xA;tTf+RxmRcMgosoyrk9U/LT88m1W9t9H1mJbfUJzwguY/7mV+ysh3Rm7UNCfDNfqNFwjijycrHmvY&#xA;vaoZRLErgUr1Ga0t6/FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;qoXtjZ3sBgu4VmiP7LDofEHqD7jCDTVmwQyx4ZjiDw7TzdyaFY6lPQrdiT4lFByikZCPuAOZ+TGB&#xA;Kg8B2noPAn6foPL9TLPy/SQ6xcsyEILYAkg0qXBA+kZXkFQrzdj7OQIyysfw/pCYeYr+5sZGNsQj&#xA;uwBYivQV6ZlaKAkN2/2l7QyaWIOOrkf0ILT/ADQOQS8AjYn7f7B+k/Z+nMjJpiN47/e4PZ3tJiy1&#xA;HL6Jd/8AD+z8bp6fql5A0UirNDItHicBlZT2INQRmM9KDe4eWedPy20bRtU0fXtH5WoXVLRJrMEm&#xA;MepKPii7qeQ6Vp4Uy8ZSYkHuLZA7h7vYf7zL8z+vNIXYojArsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirxK2iu/8AlVOlXMMsSQ2883rxyniH5zOiBXoQp5N1NB4n&#xA;NlllWX4Oq1WjGoxGB232PcivIGu+bPryWUQe705HjW6trnaW2jlJ4vE/7ce23t2A3yjIAd3OxQ4I&#xA;iPcKTD8yNUi0+NJZAWLSURR3PHMvR5BCJJee7f7MnrJQhEgUbJPdTCNE8xSXs0sU4VT9qJR/L0I3&#xA;65m6fNxkgvL9u+z8dJjhPGSRyl7+h/HkyOz1K8suLQkiI7iN68D/AKp7fRk5DHkJjYMhzo7j3uBo&#xA;e09TpADucZ6Hl8P2LfPWuG68rWl0i0eHUrRuLb0ZJgaGnXMU4jCRie59A7N10dTjGSIrfkz/APK/&#xA;V7/WPImlalqEglvLhJGmkCqlSJXUfCoAGwzVamAjkIHJ3mM2LZVlDN2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV4PI0q/ldojKzpD9YuBM/p+rDQyvQTrv8NehoaH&#xA;oK5sc3958HGxcj73eSr3VdK1/ToI3aztdRdF9Bw0trPEzdbeQ8mU79Cfm3bKZgENrIPzQ0PUtUtA&#xA;bCIzyW0nOSJftlSpFVHengN8tw7wpxsh4ctnu/U8iglltblZACskTbqdjtsQcshMwkD3I1WnhqMU&#xA;sZ+mQ/BeneX/ADdY68LrTrmJbZY4+VvU1qiLRj/rL127fLPK+0extT2Zqcer08pZJyyerzMpbDzE&#xA;uR8/eHYzhh1GllgzCIgIfAUOY93MJJ5ifl5IU/8Aazt/+Ti57LqhWX/NeK9mR/g/+cf0PTPyX/8A&#xA;JZaJ/wAY5f8Ak++aPWf3peuxfSGbZjNjsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdiqVeafMdj5b8v3ut33I21knNkQVZmZgiIPdnYLhAtBNC2E/k7+ZGu+drjXJ9RtorWzt&#xA;mgGnRRK1AG9T1A0jfbZaJXp16CuM+EGr3RAki+i/8s76yi8ladbXTJSb16RsQSw9eQH4T1GZ+qjc&#xA;ue7RiEqJo8I5mth72YwWOnLbQwwwRfVoCGt4woKoQagoO1D0pmGbbQbQD/72TfRmXh+lxc/1JH5j&#xA;8l6Jrql7iL0rynw3cVA/Sg5dnG3f6KZd72kEjcPLNf8AJOveXpfrPD6xZoardxAlQK0/eL1T9Xvh&#xA;hcSJR6M8vBmgceQbSFJlcRNeeRrOvwJcavapy605SoMztVk4pCXfB1PYun8GEsd3w5CPuez+SNBi&#xA;0DytYaPFKZ1s0KGZhxLMWLM3GppVmO1c0GafHIy73pYxoUnmVMnYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FWNecLmxurWbRLu3S6tbuIi7jkrQq3QChBDDqD2zW6zXnFIC&#xA;IsuDqdVwHhCReRrbyx5UtksYp5IYBySD1yHJLvzYs6qvfvQDMfS6sTymc9ifk5B7Ww+FHH9Pv72B&#xA;6cQvlzSAwoRFNt4EXUubTtm/FBHc9b7Li8M/6/6AnmkecdR05grsbiDuCfjH0n7X0/fleDXHlk3H&#xA;f1b9d7O48nqxfu5/7E/Dp8PkzWw1CHULVLuEkxybgnb55u8ZBiCOTwuqwzxZDCf1BFBWIJAJA60w&#xA;ykBzaYwJ5KKTRvVTs3Qo3XJAsSGH/meUs/LVk0EaotvqNk0cYHFRxlBAoKbZbDcm+5OMURTJ/wAu&#xA;vMGqaj5L0u+1Cj3txGzyuVCcvjYKeIoBVaZrdRARmQOTsISJG7J478E0kWnuMoZWilZWFVNQe4xS&#xA;3irsVdirsVdirsVdirsVdirsVdirsVdirsVeW/nX+ZV35XGn6Vp1w1re6gskkt0ixs8Ma0VG4yK6&#xA;0Zia7V22IyQiTuGUJY7qdi+orbzP4+KR/kR598/+Y9XvLbWbpL3TIIRIZZUSOZXdiE4GNV5qeDVr&#xA;9+OWURIRHM/o/tacIkQSeQe3ZFsdirXJeXGo5HoO+CxdLbeFXYqwfzJb3C3NzeSxuq+oEjciilaH&#xA;x+QznNVinxSlIH6tvc6fWYCAchPWgx/6u1/cQwIOUztxjHu2Y+KBJodXVcHiEAc1CfRIr/TIJLGa&#xA;NJIlcojGiSrI5lqrdjyc/wBmbjHkjkhwzPDPHtv3fs5Pc+y3aZwROOUDKN8xzHv+X2dUhm0jUIYm&#xA;kuTHbKpI/euoJp/KBXl9GU+JG6G/ufQIarHI1G5e4ff3M68jNy8tWp8TJ/xM50+nFQD5x7Qj/Dcn&#xA;w/3IZNFcRW1pc3MxpFAhkkIFaKiljt8hkM/MOvwcipW0uj61aLd2E6TxN9mWM9D4EdVPscrEjFul&#xA;ES5sM/MdZIrDT4JDyA1WwIJ609cDfM3DPiB9xcYw4ZAM6iREjVEUKiiiqBQADYAAZrS5q7Aq+OWS&#xA;M1Q08R2xVGw3sb7P8LfhgSicVdirsVdirsVdirsVdirsVdirsVdirsVfO/5waRB5h/OK10y6meG2&#xA;j0+MSSIAWUD1ZBxB23ZxXJylKOMmIuTrtRq8UJXM1GJAPle/6U/sorXypZW8Hl++mS4uPgeZo1Yw&#xA;20C/3YMquhZ5pS9adCwpj2bovFycU/qrf4/gfJ13bPtPix4K0xs8QAsHl9m3P5sx8med9V1TVBpV&#xA;9DFMxheYXkFY6LGVWkkZ5jcuPiVuv7OZms0fg0b5r2H25LW2JQ4THmejOMwHomE3tzN9Zkk5cpOR&#xA;3rvUHtnG5ZE5CSd7dHkmeInqzG1dpLaJ2+06Kx+ZFc67FImAJ6gO6gbiCq5YyYn+YlyI9OtYq7vM&#xA;W/4FSP8AjbNf2j9A97qe151ADzYh5fvOOvWHflPGlP8AWbj/ABzXaYVkj73T6TJWWPvCN/LiGFvJ&#xA;2nSMgZ/3w5EVO07jOyy6bGchkYji9zvxllGxE1azWbhLqea2vYUubVHIWNhxZaHqjihB2zEnlHEY&#xA;yGzoMHtJqdHqZGJ2B/Hkfim+gz6VHZR2dkPSSEUETE8hU1JNfE5l4zGtncHtQa2ZymVzlz6fYmGo&#xA;6tb6XpFzdTIsppxitmIHrOVJEQqDu9KAUyrMLIcvByKT+Rp/JNxqF1eaHWyvrheF3pb/AAFSjVLC&#xA;I+H+SafLKp31b0B+aX91p3/bTsP+ogZk6X6T7j9zTk+sM3XpmCXJLeBXYq7FVaG6li2Bqv8AKcVR&#xA;0NzFLsDRv5TgSq4q7FXYq7FXYq7FXYq7FXYq7FXYq8N/MbTnn8/waxBVZ7SdYJgP2oHi4V+g/ry6&#xA;O4eK7Q1X73NjlylVe+IH303eQahfJFbWERnuS1VhDKrMAprxLlVr7V+W+2ZnZ2WGHIZS5EPPQ0ct&#xA;RIQjXF0tmP5S6Rd29tqOo3sLw3FzIkEccgKssUIJ3B3BZ3b5imUa7Wxz5jwG8caA9/V77sPsqWj0&#xA;4ExWSZJPu5Bn7uFWpzEdw87lvY1d3BqzMWqfc5x+SNyPveblkAJZ3pkqy6fbMO8SH71GdZhFQj7g&#xA;9BhNwHuCKyxsebfnNO62+lwo5VmaZ6qaEcQgHTf9rN92JhhPj4wJDbmL73j/AGszGIxgH+d+hhHl&#xA;UXqeb9MhumcPHdxB43J2IYdjmz1Gj08ME5Y4QHpO4Aef7Pnk/N44yJ+sfezX8tSD5K06m/8Af/8A&#xA;URJmlyc3vZc0v1lZYdRn9RSod2ZCehUmtRmuy4/US8P2jilHNKxzOyBWcrLGymjBloR1G+SxQqTR&#xA;p5GOSJHeGT+cpNJTyhcDU0SRX4rbeoWVRccGMZLKVK9KVrTx2y3JzD6Rg5MC8oWOk32uRW+qXbWc&#xA;kaLJYNKQs4lV1MapOBwljZa0rT/J8cEia2bmXfml/dad/wBtOw/6iBlml+k+4/c05PrDN16ZglyS&#xA;3gV2KuxV2Kt4qire8cMEf4gdge4xVHYEuxV2KuxV2KuxV2KuxV2KuxV5v+Y8yjWIYlQKRCHZ+7Fm&#xA;I/ALluDDEEyHMvHe02olLJDGfpiL/wBN/Yl3k7T4NS1j0ZGaN4kM0MqGhV0YU+jfJ6iJ4CAatxfZ&#xA;7HCWpBkL4fUPeHqdpaxWtukEQ+BB1PUnuTmHixCEREcnv8uQzlxFR1h3TT5WQkOtCpHahBy2PNpl&#xA;yYg/1aSX1ZLWFpK1LEGhPuoPE/dkTpMRNmItw5afGTZiLZP5fmkltXaQ1YvsaUHGgAAp8snJy4ck&#xA;0yLN53+YFmdS836HpzCscgHMf5LSfH/wqZvuzMnh4Mk/xyeN7fxeNrcOLof17/YED5nsDafmfYXS&#xA;gcbp7eYAdAVPpkf8JXLtLl4tFIfzRIfp/S09o4eDtXGf55if0foeK6R5781+StbvLFG520VzItzp&#xA;s9THyDkMU7oT4jr3ByPBGcQXp5Dd7J5X/Mbyl5vhW0ci3v366fckBi1P91PsH+j4vYZi5MJHuacu&#xA;GMxwyFhFXvk+T6wj2Uo9LmCySVqoBrsQN8qjEA26LJ2LUxLGdr5FGed9Al1ryhd6bFcehIaFGIqr&#xA;EKyhX8Fqa13pmu7TzeHjv4PZdmw4p08T/LPS/M935jl0SKJbiDTZDLdQzEmOJopQrcH24MxH7JHK&#xA;nhmHocxuv4adjrsYAvq9d/NL+607/tp2H/UQM3Wl+k+4/c6bJ9YZuvTMEuSW8CuxV2KtepHy48hy&#xA;/lqK/dlfix4uGxxdzHiF1e65VZjRRUnsMsZI23suJDybsNwvhgVF4pdirsVdirsVdirsVdirsVdi&#xA;rz38041SfTpqDk6yoT3ohUj/AInmXpRdvI+00BxQl3g/ZX60u/LR6+Y2H/Lu/wDxJcs1Mai4vs7/&#xA;AIx/mn9D1PMB7hplVlKsKg9QcVQTaJpxfl6W/h2w8RY8IRcUUcSBI1CqOwwMl+KsU1CFZfzG0xju&#xA;YLKSSnhUugP/AA2bPFKtJLzkP0PO6iIl2pj/AKOMn7wgvNNsJPP3l9iCajcf6jFst0c60uRxu1YX&#xA;2jg/HI2u88flN5W81o0s8P1bUaUS+hosm3QN2cf630EZr8Opnj5cnp54xJ88+dfyo81+U5HnliN3&#xA;pyGq39uDRQDsZF3aP5/Z982+HVQyeRcaeMxTzyJ+bPmawgEOpD9LafEQnxNS6QU/Zc7P8m+/LTpO&#xA;MWGoh7po9zZ67o8N/bl1tbtOUYkRkfYkbq1OhH9Ns0utxxkDjkP2OTpTKEhMGkZZ6bp+mxzGzgjh&#xA;lmPOeVEVGlcDZpCoHI/PMPT4Bjjwhys2Y5JWWIfmgoa006UGo/SlgtP+jgHNnpgRE+4uHMgzFM1X&#xA;pmAXKLeBXYq7FWOvNJyqjAvWo8a5xIJu+roTI3sziKGOMUQU8T3Odq79firsVdirsVdirsVdirsV&#xA;dirsVdirCfzK0a/vobKe24skBdGjJCtWShBFdv2PHLYavHgF5DQLpO1+y8+rMfCF8N7XXd3oD8u/&#xA;L2p2esz3N2qxCKJojHyDNyZh/LUU+E98ll1+LLcIGzHm0dk9i6jTz8TKBEEUNwT07nopIAqdgO+U&#xA;PRKD3A6J/wAEcICCUqHmG3j1JbGcTW88rFLdpkIimIDMRG4qlaITxqDTtTJUxtOI50fbo3h/TIkM&#xA;rXSFghKjkw6DAlgmpyeaU89RXVlpqz2n1JYpL2WcQpExmYsnAK7uQor9OZQzDwfD/pX9jrToj+b8&#xA;e/8AJ8NfG7R2pMs3nTQpZNuCT8iOmyEj8Tl+CVabIPc6/XQvtHTnyn9gZcrKwqpBHiN+ma56JqSK&#xA;ORSrqGU9jiry7zj+Ruk3zyX/AJecaVqDfE8SrW2kP+VGPs/NPuObDTdozx89w0zwg8k98lWmqaf5&#xA;csNP1SJYb61V45URua0WRuDBh2ZKH9e+VanIJzMhyKxFCky1TVLLTrGe+vpRDaWyGSeQgmirudgC&#xA;T9GVQiSaCk0GF+edQsdQ8v6Td2M6XNtLqtgUmiYMp/fjuM2URV+4uJD6gz5emakuwLeBV8cUkhog&#xA;r4nsMVRYgit09R/jYfd44qwA3yRJxU7928c4zgt5rxAA9HilWROQ/wA++dmQ9KCvwJdirsVdirsV&#xA;dirsVdirsVdirsVSPzPMpFpa8gGlkrTvQfDX/hs1naQ4hGPfL8fe7DQbGUu4LvLj+rJfXA6SS7fi&#xA;f+NsezhZnLvP611woQj3BGarJLFGkiDkA1GSh6EddvCmbWLrZJHfR3F7PbXmn3Ytr21EiiOVTJDJ&#xA;HKByV41dK7opVwar8iQZMebobG2i4S3p+vaiCJTLIAxV1FAYwaLGq70pTx6nFKMgN7dSq0XwqprU&#xA;fZH0/tfq+eJIUWU9WtBy696dK5WzWSwRyj4hv2I64qxPzR5AstcvrO5u5ZjHZhwIYW4c+dPtEDn2&#xA;/ZOWRyECg1yxgkGtwnuh6TDplnFZ2kYt7KEFYoBU0qanrU1JNSTucgTbMJngS7FWNSSSSaxeSVPp&#xA;KQijtyUAH9WYmmySllnv6Rt8XK1EYxxQ29R+5L/Mljbanod/YXJYQXMDo5SnIAr1WoIqO22bTEak&#xA;Pe6rUZODHKVXwgn5PCYfy/17Sdd06SxmfUNGF9bSy+lVWTjKtGmgqfsj9oVA8Rm3yTqJEhRp1nZ3&#xA;aeDVUcZ36xP1D4fpFh9JICQABU+GaEu9KLhsSfil2H8o64FRqqqjiooB2GBKA11pFsC8ZIdWBDDt&#xA;4/hko82M+TFvX+P1PRh9UGvqelHyr41p1x8GF3QtxvDjd0L9zKdDaRrANJUuzEknvXGXNyY8kwyL&#xA;J2KuxV2KuxV2KuxV2KuxV2KuxVhPnj8uW8xX0eo2+p3On3UNtLAht34Es7o617FfhYEe48MSIkVI&#xA;Ao9QNxJB8kv8m+TvPmn3lm+qa8ZbO1jVmtI4uBllMfFhO9SHVD0IFTsdsjDFCF8Iq2U8uSdcRuno&#xA;xAIoRUHtkkJdeaLBKS8X7uTrt0JyQkxMVO10betwQVBr6a9CfE1Jr9OJkoiu1nX9I0K2WS9lEfOv&#xA;owrvI5HXiv8AE7Zdp9LPMaiGnUaqGEXI/rS6w88afJcfVdRifTJ2P7r1yPTce0gooPjX78ycvZ0w&#xA;OKB4x5c/k4uLtKJPDMcB8+XzZICCKjpmudk7FXYq7FVO4l9GCSWleClqeNO2V5snBAy7gyhHikAx&#xA;3UkktoIG+zLNzll/1mIO/wAs4H2i7Q1OjOKWKRhKYkZfMcwdtnaYoQykgiwKASG8uLmWKSMuaMpF&#xA;BQdRTNNh9pdbPJDxMhMeOJOwFi/6IFtmq7OxHBMCO5hIfZ5sYLTWpR+RDdmUkEH2Oe+6fUwz2AOX&#xA;3PztPFLERIGj3joyfQfPMtuyx3yCaM7esAA4+fjmPqOzgd4bPV9l+1s4VDUDij/OHP49/wB/vehR&#xA;SpLGsiGqOAVPsc0xFPocZAixyXYEtMqsCGFQeoOKob9F2HLl6C169MNlFBEqqqKKKAdhgS3irsVd&#xA;irsVdirsVdirsVdirsVdiqGv9Rs7GISXL8a14L1ZiPAZTmzxxi5Fqy5o4xcilsfmaMOpubdobeT+&#xA;6l+1t7gZhR7S39caieRcYa0X6hQKcQzQzRiSFxJG3RlNRmxhMSFg2HMjISFhfkmTsVSbzH5W0zXr&#xA;f07tP3igiKUbMtf5T2/zrmTptXkwm4lx9RpYZhUgw+y/KzUHuRBqWqSTaPbsWt7YVDb9iakdNqgD&#xA;6M2mTtkVcIAZDzLrYdkb1KRMByDKNd83eWfK1tFb3dwqSJGqwWcfxScFAVfhH2R7nNTDHLJKyefU&#xA;uxy5hijUYmRHKI/FD4sAuvzMvdYuyLO4a2jj+JYoea0Ff23IHI/h7ZuNNpcPIeovB9t6/tKNTl+5&#xA;hfpEZC/jRs/d5Mm0P8xAeMOrL7fWox/xNB/xr92UajszrD5OV2X7Xcoakf5w/SP1fJm1vc29zCs1&#xA;vIssT/ZdCCD9IzUyiYmiKL2+LNDJESgRKJ6heyqwowqPA5CUQRRbQaSLzP1g+Tfwzzn27+vF7pfo&#xA;dn2b1S/XNPFvb2MgXiTHwk/1h8X/ABscwPaHswafBp5AUeDhl/W+r7yXL0efjlMebD9U067tSIb6&#xA;Fo0k3ikH2WHUFW6Z6xossoxjlh1j94fEu0uzZ4ZmExQvY9PgfwVur3thJpsRoqXaMFUKKVUdenbN&#xA;R7Ndna3T9pZADKWknEyNm6l8Td8/eObse2tbpdT2fCxGOpgRHYVcf1fceT0TTZ5I7OAqdjGlR2+y&#xA;M3OX6j73tdL/AHUf6o+5N7ef1lJpQjr4ZW5CrirsVdirsVdirsVdirsVdirsVdirsVdirsVS7V9G&#xA;g1FBz2dRRT4fLwyrLhhkFSDTmwRyCixf/DvmBJTZwzEWr/a5E0A+Q+E/fmvPZ0gaEvQ6w6DKDwiX&#xA;oZVo2lJptoYQxdmbm7nuaAfwzPw4I441F2eDAMcaC7UdSWzj5cC5rxp7kVy8BsJQthrwuZfTaLga&#xA;VqDUUH3YeFRJN8iyU7m4jt4JJ5DRI1LNTrQCu2Qy5BCJkeQFsoQMpCI6vnXzd5Xv49Sur2F2u4pn&#xA;aUyEln+M8virUnr1y/s7tTBrIiv3eT+bI7fCX6DXvdLqNRPR5jiyjiiP4gN999x194+TFg80XJQz&#xA;JX7QBIrTNhISgSDYLmR8LMBMcMx0Oxer6F5k8tnRreF3T6wIV9eDjyYtxHI7V6nxOeadq+znbWft&#xA;A5MUjIGVwkMgHBHoKuxwjY0N/Nhi7Q7N02mMMkOEAmJBxn1Hfkao8VWN/koeXdb1ODUwdLL+n6gN&#xA;woP7oID0kr8NePTv4Z6t2hPDgwD8xIcXD/nE+Q9/wfOex56iGfiwXHHxbjpXcfh8e57LFIssSSJu&#xA;jqGU+xFRnPRkCAR1fVImxYSbzCtZrQHoSR+IzgfbKF59PfIkj7Yuz0B9MlbzLEH0tm7xOrfeeP8A&#xA;xtm49sMPHoTL+ZKJ/wB7+lr7PlWWu8IqO1t7nTYYbiNZYmjTkjgEH4R45vezSRp8dfzI/wC5Dhar&#xA;HGZlGQsWWIa9+XQcNJpbBl6m1lPT/Uc/x+/Nrh1JibBovJdoezUZb4v9Kf0H9fzZTp2mPFawJcEF&#xA;40VWVelQADvlE5WSXpsEDHHGJ5gBMAABQCgHQDINzeKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2Ksd1+a4hvQ0ZKoyAN3UkE9jtlkOTVPml0V1dSyLGG+FiOSooWor34gZIsQWZA1APSvbKW9&#xA;p40dSriqntirGdZ8opKGlsqI3UxH7B+7p8xmp1XZUZnix+iX2Fy/HhljwZ48ce/+Ie4vNvMHlO3l&#xA;lZJojbXfWtB8Xv8AyuPcb5LS9tZ9NWPOOOHn0/qy5j7Y+TqNV7NZIXm0U+Id3X4jkfsPcleh+TaX&#xA;VJZGmc/CtvBy5MO/I0UgeP6820+3Yx/xWMuMj6pVt7gNj7z8nnNR42qPh5QNj9IB5+d8nq3l7ycY&#xA;Uia7RI4E3SzQfD/sqdf8+ua2GklOfiZjxzPfu7vS9mxhH1fLp+1lwAAAAoBsAM2DtEq11OUtlXp6&#xA;lK/MrnF+1mPiy6Y/7ZXzMf1OfojQl7lXXJIzp08VasQDQb9CD/DN17RQ4tDlH9G/kQWnRmssVfTp&#xA;o5LKDidxGtR36DMzsuXFpcR78cf9yGvOKnL3lFZnNTsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVWSwxSikiBh74qsis7WI1jiVT4gY2ilbFLsVdiqC1HSLHUIvTuYlcddx38chkxxm&#xA;KkLDbhzzxnigaLtO0bTtOj4WsKp4tT4j8ydzgx4owFRFLmzTyy4pmyjcsalkkscYq5p4DucVee3/&#xA;AOZmmTavZaTd2N5p99JcxxRx3EaqCzuEBVwxDLU9Rmn7Z7LyaiWGUKPh5YyO/wDCObdgzCPED1in&#xA;Ou+VtN1+JYbtZRIgYQzwSPFKnPYkMpH/AA1Rm5NEEHcFoTrRdGTTbC0tBK8otIUgR5DydhGgQM7U&#xA;FWNN9siAAKAoJTLCrsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVU5oElFG6joRiqDfR4ZnQ3CpIsTB4+SglWHRhXoR44bRSOSNI1ogoMCV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2Kv/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:98FE159BD1D9E8119327D2A5A923F5E1</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:99FE159BD1D9E8119327D2A5A923F5E1</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:a2b8dcac-7818-4055-b6a1-3efa106255e8</stRef:instanceID>
            <stRef:documentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>900.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -900 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 900 li
1200 900 li
1200 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1200 900 mo
0 900 li
0 0 li
1200 0 li
1200 900 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 .015701 cmyk
f
744.849 646.274 mo
734.491 646.274 724.183 644.019 716.247 639.468 cv
530.442 532.998 li
514.991 524.151 513.791 509.635 527.004 499.624 cv
527.004 508.698 li
527.004 508.698 li
527.004 515.808 532.044 524.529 538.209 528.084 cv
734.193 640.872 li
735.975 641.897 737.663 642.382 739.162 642.382 cv
739.475 642.382 739.778 642.36 740.074 642.319 cv
743.064 642.16 746.792 640.914 751.473 638.604 cv
755.586 636.39 757.566 634.707 758.52 633.537 cv
758.691 633.321 li
758.718 633.285 li
759.834 631.926 760.482 629.928 760.482 627.381 cv
760.482 356.583 li
767.087 354.296 774.514 353.145 781.914 353.145 cv
792.277 353.145 802.591 355.402 810.531 359.955 cv
996.345 466.425 li
1012.82 475.866 1013.09 491.76 996.921 501.741 cv
775.584 638.487 li
767.209 643.661 756 646.274 744.849 646.274 cv
.0823529 .0509804 .0509804 0 cmyk
f
749.277 166.599 mo
553.293 53.811 li
550.953 52.461 548.775 52.056 546.966 52.452 cv
542.556 53.064 536.949 56.565 530.451 59.967 cv
530.397 60.021 li
528.309 61.164 527.004 63.693 527.004 67.302 cv
527.004 508.698 li
527.004 515.808 532.044 524.529 538.209 528.084 cv
734.193 640.872 li
736.245 642.051 738.162 642.501 739.818 642.33 cv
742.851 642.231 746.658 640.98 751.473 638.604 cv
755.586 636.39 757.566 634.707 758.52 633.537 cv
758.691 633.321 li
758.718 633.285 li
759.834 631.926 760.482 629.928 760.482 627.381 cv
760.482 185.985 li
760.482 178.875 755.442 170.154 749.277 166.599 cv
.0823529 .0784314 .0313725 0 cmyk
f
745.398 192.987 mo
745.398 185.877 740.358 177.156 734.193 173.61 cv
538.209 60.822 li
532.044 57.276 527.004 60.183 527.004 67.302 cv
527.004 508.698 li
527.004 515.808 532.044 524.529 538.209 528.084 cv
734.193 640.872 li
740.358 644.418 745.398 641.502 745.398 634.392 cv
745.398 192.987 li
.952941 .839216 .196078 .0588235 cmyk
f
620.255 547.328 mo
617.888 545.965 615.95 547.084 615.95 549.818 cv
615.95 558.873 li
615.95 561.607 617.888 564.959 620.255 566.32 cv
643.435 579.662 li
645.802 581.023 647.74 579.904 647.74 577.172 cv
647.74 568.113 li
647.74 565.381 645.802 562.029 643.435 560.666 cv
620.255 547.328 li
cp
.745098 .639216 0 0 cmyk
f
537.948 92.997 mo
535.383 91.521 533.277 92.736 533.277 95.697 cv
533.277 482.562 li
533.277 485.523 535.383 489.159 537.948 490.635 cv
733.356 603.09 li
735.921 604.566 738.027 603.351 738.027 600.39 cv
738.027 213.534 li
738.027 210.564 735.921 206.937 733.356 205.452 cv
537.948 92.997 li
.207843 .0156863 0 0 cmyk
f
609.594 113.517 mo
607.848 112.512 606.418 113.338 606.418 115.35 cv
606.418 118.521 li
606.418 120.536 607.848 123.003 609.594 124.008 cv
664.494 155.603 li
666.238 156.606 667.665 155.783 667.665 153.768 cv
667.665 150.598 li
667.665 148.584 666.238 146.117 664.494 145.112 cv
609.594 113.517 li
cp
.741176 .635294 0 0 cmyk
f
747.9 374.426 mo
747.9 377.009 749.698 378.014 751.898 376.661 cv
753.601 375.613 li
755.8 374.259 757.599 371.04 757.599 368.46 cv
757.599 350.045 li
757.599 347.464 755.8 346.461 753.601 347.813 cv
751.898 348.859 li
749.698 350.215 747.9 353.432 747.9 356.013 cv
747.9 374.426 li
cp
.945098 .827451 .180392 .0431373 cmyk
f
625.447 98.2573 mo
623.375 97.0664 620.018 97.1157 617.983 98.3647 cv
617.623 98.5869 li
615.588 99.8408 615.618 101.839 617.689 103.032 cv
661.708 128.364 li
663.779 129.556 667.136 129.506 669.172 128.253 cv
669.53 128.034 li
671.564 126.782 671.537 124.783 669.465 123.591 cv
625.447 98.2573 li
cp
f
747.9 316.3 mo
747.9 318.882 749.698 319.889 751.898 318.536 cv
753.601 317.485 li
755.8 316.133 757.599 312.915 757.599 310.333 cv
757.599 236.61 li
757.599 234.029 755.8 233.023 753.601 234.376 cv
751.898 235.426 li
749.698 236.778 747.9 239.997 747.9 242.578 cv
747.9 316.3 li
cp
f
544.928 88.3501 mo
547.215 91.8687 551.018 93.4556 553.416 91.897 cv
555.814 90.3394 555.906 86.2207 553.618 82.7021 cv
551.33 79.1831 547.532 77.5923 545.132 79.1528 cv
542.731 80.7124 542.642 84.8276 544.928 88.3501 cv
cp
.741176 .635294 0 0 cmyk
f
559.073 95.6753 mo
559.658 96.5757 560.63 96.9829 561.243 96.5825 cv
561.858 96.1841 561.881 95.1323 561.295 94.2329 cv
560.709 93.3306 559.738 92.9253 559.125 93.3237 cv
558.512 93.7222 558.489 94.7754 559.073 95.6753 cv
cp
f
725.616 191.391 mo
726.48 192.72 727.916 193.321 728.822 192.729 cv
729.729 192.144 729.764 190.586 728.9 189.256 cv
728.034 187.923 726.598 187.324 725.692 187.913 cv
724.785 188.502 724.75 190.059 725.616 191.391 cv
cp
f
359.289 537.552 mo
340.839 537.552 325.89 528.867 325.89 518.148 cv
325.89 514.655 327.481 511.376 330.265 508.545 cv
331.191 516.141 li
331.191 516.177 li
331.191 525.015 343.53 532.188 358.758 532.188 cv
373.509 532.188 385.56 525.447 386.289 516.987 cv
386.325 516.942 li
387.389 507.655 li
390.747 510.68 392.697 514.282 392.697 518.148 cv
392.697 528.867 377.739 537.552 359.289 537.552 cv
.0823529 .0509804 .0509804 0 cmyk
f
390.159 483.471 mo
375.408 482.256 li
364.905 481.311 li
343.287 481.986 li
329.544 482.931 li
327.321 484.407 li
331.191 516.141 li
331.191 516.177 li
331.191 525.015 343.53 532.188 358.758 532.188 cv
373.509 532.188 385.56 525.447 386.289 516.987 cv
386.325 516.942 li
390.159 483.471 li
.231373 .109804 .105882 0 cmyk
f
390.168 484.047 mo
390.168 493.155 376.101 500.526 358.758 500.526 cv
341.397 500.526 327.339 493.155 327.339 484.047 cv
327.339 474.948 341.397 467.568 358.758 467.568 cv
376.101 467.568 390.168 474.948 390.168 484.047 cv
.054902 .0196078 .0156863 0 cmyk
f
358.758 494.793 mo
347.445 494.793 338.283 489.978 338.283 484.047 cv
338.283 478.116 347.445 473.31 358.758 473.31 cv
370.062 473.31 379.233 478.116 379.233 484.047 cv
379.233 489.978 370.062 494.793 358.758 494.793 cv
.211765 .121569 .117647 0 cmyk
f
377.054 429.674 mo
376.835 419.748 368.734 411.762 358.754 411.762 cv
348.771 411.762 340.673 419.748 340.455 429.674 cv
340.435 429.674 li
340.435 483.92 li
340.446 483.92 li
340.435 484.049 li
340.435 489.357 348.636 493.662 358.754 493.662 cv
368.871 493.662 377.072 489.357 377.072 484.049 cv
377.06 483.92 li
377.072 483.92 li
377.072 429.674 li
377.054 429.674 li
cp
level3{
gsave
clp
[10.4173 50.4683 -50.4683 10.4173 354.75 437.023 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~=9,H'=TGQ(>6(f+>QCo,>l_#-?3%,.?i[D2@0!J2@fW\4A,rh6AH8t8B)o1:BE5:;C&kR?CB1X?D#gmB
D?.!CDud6FE<*?GEWEHHEr`TJFTAiMG6#&OG6#&OGlY;RH2tGTHiU\WI/peXIfR%[JH3:^JcNC_KE/Ua
K`JddLB,!fLB,!fM#b3hM?(?jMZCKlN<$]nN<$`oNrZrqO9!&rOT</sP5rE!PQ8Q#PlSZ$Q2nc%QN4o'
QiP#(RK15*RfL>+SH-V/SH-V/T)ch1TE)t3T`E(4U&`15UB&:6U]AF8V#\O9VZ=a;VuXj<W;t$?WW:*?
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[10.4173 50.4683 -50.4683 10.4173 354.75 437.023 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~='/R,=BSd1>$G38>?kE<>[:W@?!^iE?XR8L?t!JQ@UinX@q9+\A7]=aAnPahB4tsmBkhBtC27U$Ci+$+
D/F0.Df9T6E,]f:EH-#>EcQ5BFEDYJG'8%PG'8(RG^+LZH$O^^H[C-fI!g?jIXZcrJ:N3%JUrE)K7ei1
KS5#4Knb>:L5(G<LPUbCM2@(HMMd:LMi<URN/W^TNK0$[O,o?`OH>QdOcklkPEV2pPa%DtQ'IW#QBmi'
Q^=&*R$a;0R[T\6S"#q<S=H+>SXl@DT:_aJTV.sNTqS0RU8"BVUSFTZUnjf^V5:&dVl-GjW2QYnWMukr
~>
0 <~XK8M)XKAV,Xf\_-Xf\_-Xf\_-Xfeh1YHP.5YHG%2Y-5%4YHY78Yct@9Yct@9Yd(I=ZEgdAZEgdAZEgdA
ZEggCZa7!EZa7!EZa7$G['[6K[C*EM[C*EM[C*HO[^NZS\$rlW\@B&Y\@B)[\[f;_]"5Ja]"5Ja]"5Mc
]=beh]Y(ni]Y(ni]Y(nj]tM+n^:q=q^:q=r^V@Ou^V@Ou^V@Ou^V@P!^qdb%_83t(_83t(_83t)_SX1,
_SX1,_SX1,_SX1,_o'F2`5KU4`5KU4`Pog8`Pog8`Pog8`Pog8`l?$<`l?$<`l?$<`l?$<a2c9BaN2HD
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
358.754 411.762 mo
348.771 411.762 340.673 419.748 340.455 429.674 cv
340.435 429.674 li
340.435 430.066 li
342.325 431.33 344.702 432.313 347.957 433.679 cv
359.092 438.349 365.199 433.679 370.585 438.528 cv
372.827 440.543 375.093 442.937 377.072 445.424 cv
377.072 429.674 li
377.054 429.674 li
376.835 419.748 368.734 411.762 358.754 411.762 cv
cp
level3{
gsave
clp
[14.0078 51.3621 -51.3621 14.0078 356.783 421.639 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[14.0078 51.3621 -51.3621 14.0078 356.783 421.639 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
377.072 484.049 mo
377.06 483.92 li
377.072 483.92 li
377.072 439.606 li
375.847 445.055 373.646 450.24 365.556 452.537 cv
351.009 456.668 350.11 466.365 340.771 472.652 cv
340.655 472.732 340.55 472.799 340.435 472.875 cv
340.435 483.92 li
340.446 483.92 li
340.435 484.049 li
340.435 489.357 348.636 493.662 358.754 493.662 cv
368.871 493.662 377.072 489.357 377.072 484.049 cv
cp
level3{
gsave
clp
[16.5237 46.878 -46.878 16.5237 356.794 456.716 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.5237 46.878 -46.878 16.5237 356.794 456.716 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
919.08 647.46 mo
900.63 647.46 885.672 638.775 885.672 628.065 cv
885.672 624.569 887.264 621.288 890.049 618.456 cv
890.973 626.049 li
890.973 626.085 li
890.973 634.923 903.312 642.096 918.54 642.096 cv
933.3 642.096 945.342 635.355 946.071 626.895 cv
946.107 626.85 li
947.173 617.565 li
950.53 620.591 952.479 624.196 952.479 628.065 cv
952.479 638.775 937.53 647.46 919.08 647.46 cv
.0823529 .0509804 .0509804 0 cmyk
f
949.95 593.379 mo
935.199 592.164 li
924.687 591.219 li
903.069 591.894 li
889.335 592.839 li
887.112 594.315 li
890.973 626.049 li
890.973 626.085 li
890.973 634.923 903.312 642.096 918.54 642.096 cv
933.3 642.096 945.342 635.355 946.071 626.895 cv
946.107 626.85 li
949.95 593.379 li
.231373 .109804 .105882 0 cmyk
f
949.959 593.964 mo
949.959 603.063 935.892 610.434 918.54 610.434 cv
901.188 610.434 887.121 603.063 887.121 593.964 cv
887.121 584.856 901.188 577.485 918.54 577.485 cv
935.892 577.485 949.959 584.856 949.959 593.964 cv
.054902 .0196078 .0156863 0 cmyk
f
918.54 604.701 mo
907.227 604.701 898.065 599.895 898.065 593.964 cv
898.065 588.024 907.227 583.227 918.54 583.227 cv
929.844 583.227 939.015 588.024 939.015 593.964 cv
939.015 599.895 929.844 604.701 918.54 604.701 cv
.211765 .121569 .117647 0 cmyk
f
936.84 539.584 mo
936.622 529.654 928.52 521.67 918.542 521.67 cv
908.56 521.67 900.459 529.654 900.24 539.584 cv
900.22 539.584 li
900.22 593.828 li
900.234 593.828 li
900.22 593.963 li
900.22 599.268 908.423 603.568 918.542 603.568 cv
928.659 603.568 936.861 599.268 936.861 593.963 cv
936.847 593.828 li
936.861 593.828 li
936.861 539.584 li
936.84 539.584 li
cp
level3{
gsave
clp
[10.4172 50.4677 -50.4677 10.4172 914.535 546.93 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[10.4172 50.4677 -50.4677 10.4172 914.535 546.93 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
918.542 521.67 mo
908.56 521.67 900.459 529.654 900.24 539.584 cv
900.22 539.584 li
900.22 539.975 li
902.113 541.24 904.488 542.225 907.743 543.59 cv
918.878 548.256 924.984 543.59 930.375 548.438 cv
932.613 550.453 934.881 552.842 936.861 555.334 cv
936.861 539.584 li
936.84 539.584 li
936.622 529.654 928.52 521.67 918.542 521.67 cv
cp
level3{
gsave
clp
[14.0086 51.3648 -51.3648 14.0086 916.569 531.549 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[14.0086 51.3648 -51.3648 14.0086 916.569 531.549 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
936.861 593.963 mo
936.847 593.828 li
936.861 593.828 li
936.861 549.516 li
935.633 554.965 933.431 560.148 925.344 562.447 cv
910.795 566.576 909.899 576.275 900.559 582.561 cv
900.44 582.639 900.336 582.709 900.22 582.785 cv
900.22 593.828 li
900.234 593.828 li
900.22 593.963 li
900.22 599.268 908.423 603.568 918.542 603.568 cv
928.659 603.568 936.861 599.268 936.861 593.963 cv
cp
level3{
gsave
clp
[16.5227 46.8751 -46.8751 16.5227 916.581 566.626 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.5227 46.8751 -46.8751 16.5227 916.581 566.626 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
786.34 739.819 mo
784.064 739.819 781.799 739.323 780.057 738.324 cv
740.691 715.77 li
740.439 715.653 740.196 715.527 739.962 715.392 cv
699.246 692.064 li
695.637 689.994 695.583 686.511 699.12 684.324 cv
747.612 654.372 li
749.449 653.235 751.903 652.662 754.344 652.662 cv
756.617 652.662 758.877 653.158 760.617 654.156 cv
799.983 676.71 li
800.244 676.827 800.487 676.953 800.721 677.088 cv
841.428 700.416 li
845.037 702.486 845.1 705.969 841.554 708.156 cv
793.062 738.117 li
791.232 739.249 788.78 739.819 786.34 739.819 cv
.0823529 .0509804 .0509804 0 cmyk
f
793.324 668.402 mo
793.324 665.859 791.522 662.746 789.322 661.48 cv
706.526 613.83 li
705.635 613.318 704.812 613.189 704.144 613.379 cv
701.953 613.82 698.995 616.016 698.995 616.016 cv
698.991 616.023 li
698.308 616.459 697.887 617.332 697.887 618.557 cv
697.887 683.324 li
697.887 685.863 699.689 688.98 701.888 690.246 cv
784.684 737.895 li
785.412 738.314 786.093 738.475 786.682 738.42 cv
787.359 738.404 788.267 738.217 789.317 737.584 cv
791.387 736.34 792.316 735.902 792.785 735.156 cv
793.125 734.676 793.324 734.004 793.324 733.166 cv
793.324 668.402 li
cp
.0823529 .0784314 .0313725 0 cmyk
f
788.686 670.811 mo
788.686 668.273 786.884 665.16 784.684 663.891 cv
701.888 616.242 li
699.689 614.977 697.887 616.018 697.887 618.557 cv
697.887 683.324 li
697.887 685.863 699.689 688.98 701.888 690.246 cv
784.684 737.895 li
786.884 739.16 788.686 738.121 788.686 735.58 cv
788.686 670.811 li
cp
level3{
gsave
clp
[-42.3204 93.1051 -93.1051 -42.3204 755.853 649.425 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~T`?bHU&ZkIUAuqIUAunHU];tHV#W%HV>r.IVZ84IVZ81HVuS7HW;n@IW;n=HWW4@GWW4:EWrO@EWrO=D
X8jCDX8j@CXT0FCXoKODY5fLAY5fLAYQ,RAYlGU@Z2b[@ZN(^?ZiCd?[/^j?[/^a<[K$g<\,Zs<\H!$<
\Gus:\c<$:\c;s8])W$8])Vs6]E&'6]E807]`\<8^'4Q;^'Xi?^C1)B^CC5D^CgMH^D$YJ^_QnM^_d%O
^E!:S^`NOV^`iaY^a9$]^aT6`^afBb_(>We_(kuj_DD5m_DVAo_E%Ys_E7eu_ES##_En5&_aXV+_ash.
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-42.3204 93.1051 -93.1051 -42.3204 755.853 649.425 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~TV8'QTq\9UU8"BVU8+KYUSO]]UnsoaV5C,eVP^5fVPg>iVl6PmW2QYnW2ZbqWMukrWN)tuWiE)!WiN2$
X/i;%X/i>'XK8P+Xf\b/Y-+q1Y-+t3YHP17YctC;Z*CU?ZEggCZa7$G['[3I['[6K[C*HO\$rlW\@B&Y
\@B&Z\[f8]\[f8^]"5Ja]"5Jb]=Y\e]=Y\f]Y(nj]tM+m]tM+n^:q=q^:q=q^:q=q^:q=r^V@Ou^V@Ou
^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^qdb$^qdb$_83t(_83t(_83t(_83t(_83t(_83t(_SX1,_SX1,
~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!!"!<N<)!s8W."9er5#7(VC$4@4M$k3XU%hK<c&eb
om'GV>u()Ic()&aG6*??1B+!;^M+sS?Z-7:2i.4H_r.k</%/M8_31,:XA1c.'I2E*TU3]]>a4?Pbj5<h
D!6:4.07Rfm=~>
<~0/"t30/"t30.nk0/hJY,/M&G(/1W5$.k<,#.k3"u.Oceq.4?Sm-n$Jl-mpAh-7'r`,U4NY,9e<U+sA*Q
+X%sN+<VaJ+!2OF*Zc@C*#fe7)B'M4)B'J2(`4&*(Ddi&'bqDs'GM2o',(uk&J,H`%hB-[%1N^S$k*LO
$47+H#mgnD#R:S="pP88"U"r1!s/N)!<E3$zzzzzzzzzzzzzzzzzzzzzzzz!!!!!~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
754.3 696.83 mo
758.98 704.033 766.76 707.285 771.673 704.096 cv
776.583 700.902 776.771 692.477 772.086 685.271 cv
767.406 678.066 759.629 674.811 754.713 678.006 cv
749.803 681.193 749.619 689.623 754.3 696.83 cv
cp
.00784314 .0470588 .898039 0 cmyk
f
788.686 735.58 mo
788.686 725.09 li
770.258 714.709 li
752.945 685.084 li
743.967 692.137 li
725.756 655.973 li
725.756 655.973 706.403 668.109 697.887 673.289 cv
697.887 683.324 li
697.887 685.863 699.689 688.98 701.888 690.246 cv
784.684 737.895 li
786.884 739.16 788.686 738.121 788.686 735.58 cv
cp
level3{
gsave
clp
[-18.6592 41.3581 -41.3581 -18.6592 749.284 691.599 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~S,e-@SH+6ASH+3@ScF<AT)a?@TE'HAT)a9>T`BK@T`BE>U&]N?U&]H=U&]H=UB#K<UB#K<UB#K<U]>N;
V#YW<V#YT;V#YT;V>tW:VZ:`;VuUc:VuUc:VuU`9W;pf9W;p`7W;p`7WW6f7WW6c6WrQi6WrQf5WrQf5
X8li4X8lf3X8lc2XT2l3XoMo2Y5hu2Y5hu2YQ/&2YlJ,2Z2e/1Z2e/1ZN+51ZN+20ZiF5/ZiF5/ZiF/-
[/a5-[/a/+[K'8,[K'8,[fB;+\,]A+[fB5)\,];)\H#>(\H#;'\H#8&\c>>&])Y>$])Y;#]DtA#]Dt>"
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-18.6592 41.3581 -41.3581 -18.6592 749.284 691.599 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~S"-"=S=H+>S=Q4ASXuFEStDXIT:_aJT:_aKTV.sNTV8'QTqS0RTqS0RTq\9UU8"BVU8"BVU8+KYUSO]]
Unjf^Unjf^Unji`V5:&dVP^8hVl-GjVl-GjVl-JlW2QYnW2QYnW2Q\pWMukrWMuntWiE)!WiE)!WiE,#
X/i;%X/i;%X/i;&XK8M*Xf\_.Y-+q1Y-+q2YHP.6Yct@:Z*CR=Z*CR>ZEgdAZEgdBZa7!EZa7!EZa7!F
['[3I['[3I[C*EM[C*EM[^NWQ\$riU\$riU\$riU\@B&Y\@B&Y\@B&Y\[f8]]"5Ja]"5Ja]=Y\e]=Y\e
~>
0 <~JUrB'JUrB'JUi9$J:N0"IsuiqIXZ`oI=-EiI!g<gH[:!aH?sm_H$FRYG^+IWGBS.QG'8%PG'8%OF`__I
FEDVHFEDSFF)uDDEcQ/>EH,u<E,]`6Df9Q4Df9N2DJj<.Ci!m&CMR^$CMR["C2.HsBk_6oBP;$kB4kji
AnGXdAS#F`A7T4\@q0"Y@q&nU@:<SP?smAM?smAL?XI/H?<piA>[1N=>[1N<>?b<8>$5!1=BJ[-=BAR)
<`W7%<E3!t;c?Un;c?Un;c?Rl;,L1f:f'tb:JXb^:/4MX9MA,R91qoN8kM]J8P)HC7Rfj:77BX66psF2
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
235.915 671.317 mo
234.185 671.317 232.462 670.938 231.138 670.176 cv
192.942 648.189 li
190.476 646.605 190.503 644.094 193.104 642.492 cv
213.966 629.658 li
215.355 628.803 217.208 628.373 219.053 628.373 cv
220.783 628.373 222.506 628.752 223.83 629.514 cv
262.026 651.492 li
264.492 653.085 264.465 655.596 261.864 657.189 cv
241.002 670.032 li
239.613 670.887 237.76 671.317 235.915 671.317 cv
.0823529 .0509804 .0509804 0 cmyk
f
276.206 458.33 mo
274.792 462.977 271.64 473.947 268.213 480.598 cv
264.992 486.854 260.092 493.908 258.409 493.773 cv
256.994 493.537 258.054 493.047 256.506 493.283 cv
254.956 493.518 248.625 498.438 250.175 499.615 cv
250.175 499.785 li
250.175 499.785 253.484 503.045 258.141 504.07 cv
258.368 504.164 258.615 504.221 258.873 504.221 cv
259.331 504.221 259.748 504.051 260.079 503.783 cv
262.117 502.797 273.953 496.166 278.563 473.551 cv
278.698 473.213 280.315 464.324 281.121 454.828 cv
281.121 453.414 277.621 453.684 276.206 458.33 cv
cp
level3{
gsave
clp
[-15.6257 -55.8568 55.8568 -15.6257 273.831 506.651 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!,$NV!+gBT!+^?T!+L9T!+L9T!+L9T!+:0S!+1-S!+(*S!*k$S!*b!S!*b!S!*XpR!*FgQ!*=aP!*+[P
!*"XP!)nRO!)nRO!)\IN!)SCM!)A=M!)87L!)/1K!(r%I!(r%I!(i%J!(VnH!(MhG!(;\E!(2YE!'uMC
!()VE!'lMD!'cGC!'Q>B!'H8A!'6/@!'-,@!'-,@!&p#?!&p#?!&]l=!&Tl>!&B`<!&9]<!&9]<!&0W;
!%sN:!%jK:!%aE9!%O<8!%F67!%F67!%=37!%+*6!$ms4!$dm3!$Ra1!$I[0!$I[0!$@X0!$.O/!$%I.
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-15.6257 -55.8568 55.8568 -15.6257 273.831 506.651 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
0 <~AnGXdARo=^A7K+Y@UW\R@:<SQ@:<SP?sd8J?X@&F?<piA>[(E:>?Y36>$>*5>$5!1=BAR*=&r@%<E)ps
<)cdp;c?Rl;GpCj;,L.d:f'q`:/4MX9he;T9MA)P8kMZH8P)KF8P)HD7n6$<7Rfg86psC06UO1,5s[e&
5s[e&5sR\"5<h@r5!;%k4?P_f4$#D_3B9)Z3&ilW3&`cS2E!HO2Dm?K1c.$F1GU^?0ekC:0JG170JG16
0/"q1/M/P+/1`>'.k<)!.4H\p-n$Jl-n$Jl-RU5f,paf^,9nEX+sJ0R+<VdL+!2RH+!2RH*Zc=B*#oq<
~>
<~GB\7TGBe@WG^4R\H?sm`H?sm`H@(!cH[L3gI!pEkI=?WpIt3'"J:N0#J:N0#J:W9&JUrB'JV&K+K7no2
KS5#3KS5#3KS5&5KnY57KnY89LPLY?LPLY?LPLY?LPLY?LPL\AM2@(GM2@(GM2@(GM2@+IMMd:KMMd=M
Mi3LPN/W^SN/W^TNK&pWNK&pXNfK-\O,o?_O,o?`OH>QcOH>QcOH>QdOckljP*1ulPEV2oPEV2oPEV2p
Pa%DsQ'IW"Q'IW"QBmi&QBmi&QBmi&Q^=&*R$a8.R$a8.R$a8.R$a8.R$a8.R$a8.R@0J2R[T\6R[T\6
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
212.086 583.916 mo
212.177 584.275 213.164 594.779 210.112 614.178 cv
207.059 633.574 206.97 634.338 206.612 638.109 cv
206.449 640.588 210.92 643.184 214.692 644.396 cv
218.464 645.607 226.343 646.348 229.845 642.713 cv
231.192 640.219 229.172 638.941 229.172 638.941 cv
229.172 638.941 225.715 639.299 224.177 639.264 cv
223.001 639.201 219.102 638.941 219.541 637.123 cv
219.979 635.303 223.919 613.953 224.862 602.707 cv
225.805 591.457 226.411 579.674 226.411 579.674 cv
223.986 574.084 li
209.438 572.264 li
212.086 583.916 li
cp
level3{
gsave
clp
[-35.5606 -112.429 112.429 -35.5606 230.853 654.476 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-35.5606 -112.429 112.429 -35.5606 230.853 654.476 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
234.256 639.615 mo
231.932 638.436 228.936 638.672 228.936 638.672 cv
228.936 638.672 227.579 638.875 229.271 639.953 cv
230.233 640.357 230.692 643.639 225.198 644.465 cv
220.523 645.199 219.24 645.035 216.814 644.391 cv
216.662 644.346 li
207.324 641.664 207.554 635.146 206.52 636.27 cv
205.244 637.656 203.916 638.859 203.916 642.059 cv
203.916 643.605 204.138 645.473 204.859 646.732 cv
205.987 649.186 206.599 652.814 206.61 652.855 cv
206.61 656.063 li
206.61 656.818 207.114 657.104 207.868 657.104 cv
208.622 657.104 209.338 656.818 209.338 656.063 cv
209.338 651.914 li
209.546 649.75 210.292 648.191 210.292 648.191 cv
210.292 648.191 211.191 646.328 212.377 648.123 cv
213.591 649.957 215.343 652.77 219.407 652.793 cv
223.47 652.814 226.243 651.377 230.992 647.941 cv
235.74 644.508 236.581 640.793 234.256 639.615 cv
cp
.858823 .619608 .494118 .356863 cmyk
f
230.406 589.482 mo
230.498 589.844 231.483 600.35 228.431 619.746 cv
225.378 639.141 225.29 639.906 224.931 643.676 cv
224.769 646.154 229.24 648.75 233.011 649.963 cv
236.782 651.176 244.663 651.916 248.165 648.279 cv
249.512 645.789 247.491 644.508 247.491 644.508 cv
247.491 644.508 244.034 644.867 242.496 644.834 cv
241.321 644.77 237.422 644.508 237.861 642.689 cv
238.298 640.871 242.238 619.521 243.18 608.273 cv
244.125 597.027 244.729 585.24 244.729 585.24 cv
242.305 579.648 li
227.757 577.832 li
230.406 589.482 li
cp
level3{
gsave
clp
[-35.5606 -112.429 112.429 -35.5606 249.173 660.043 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-35.5606 -112.429 112.429 -35.5606 249.173 660.043 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
252.577 645.182 mo
250.251 644.002 247.255 644.238 247.255 644.238 cv
247.255 644.238 245.897 644.441 247.592 645.516 cv
248.551 645.922 249.012 649.201 243.518 650.031 cv
238.842 650.766 237.559 650.602 235.134 649.961 cv
234.981 649.91 li
225.643 647.23 225.873 640.715 224.839 641.836 cv
223.562 643.225 222.236 644.43 222.236 647.629 cv
222.236 649.172 222.458 651.039 223.178 652.299 cv
224.305 654.754 224.917 658.383 224.929 658.424 cv
224.929 661.633 li
224.929 662.383 225.434 662.67 226.187 662.67 cv
226.941 662.67 227.657 662.383 227.657 661.633 cv
227.657 657.479 li
227.866 655.318 228.611 653.758 228.611 653.758 cv
228.611 653.758 229.509 651.895 230.697 653.689 cv
231.911 655.523 233.661 658.336 237.727 658.359 cv
241.791 658.383 244.562 656.945 249.311 653.51 cv
254.059 650.076 254.899 646.359 252.577 645.182 cv
cp
.858823 .619608 .494118 .356863 cmyk
f
212.268 489.873 mo
212.268 494.297 221.494 497.887 204.69 497.887 cv
200.505 497.887 197.762 494.221 196.91 489.873 cv
193.948 474.717 200.505 481.857 204.69 481.857 cv
208.875 481.857 212.268 485.443 212.268 489.873 cv
cp
level3{
gsave
clp
[-12.9324 .583571 -.583571 -12.9324 205.87 488.879 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-12.9324 .583571 -.583571 -12.9324 205.87 488.879 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
213.973 468.162 mo
213.973 466.904 209.303 450.383 209.303 450.112 cv
209.303 449.913 207.584 446.224 206.69 444.32 cv
207.494 439.96 216.915 430.536 205.022 434.731 cv
200.646 436.309 199.253 438.563 197.991 443.461 cv
197.41 445.722 197.284 447.879 197.54 449.617 cv
197.832 450.964 197.839 460.82 196.192 468.881 cv
194.487 477.232 193.409 483.967 196.553 485.854 cv
199.696 487.74 203.647 487.559 206.52 487.289 cv
209.394 487.02 216.127 484.146 216.127 484.146 cv
216.127 484.146 213.973 469.42 213.973 468.162 cv
cp
level3{
gsave
clp
[18.0492 -.53878 .53878 18.0492 187.33 461.143 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[18.0492 -.53878 .53878 18.0492 187.33 461.143 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
246.302 501.029 mo
243.248 496.092 243.248 496.178 243.248 493.217 cv
243.248 490.254 243.428 480.736 244.417 472.652 cv
245.404 464.57 248.188 462.234 247.649 456.309 cv
247.11 450.383 247.646 445.174 236.963 440.593 cv
232.202 439.36 220.275 434.242 216.017 433.843 cv
214.883 433.539 213.67 433.365 212.402 433.365 cv
207.059 433.365 202.602 436.306 201.578 440.208 cv
199.163 446.432 201.321 455.242 201.962 465.826 cv
202.635 476.939 207.553 491.689 207.823 492.902 cv
208.092 494.115 208.765 495.396 207.62 496.74 cv
202.569 502.668 201.357 511.088 201.357 511.088 cv
201.357 511.088 201.354 511.178 201.347 511.33 cv
201.097 512.791 200.953 514.305 200.953 515.869 cv
200.953 516.721 201.005 517.559 201.081 518.383 cv
201.029 521.209 202.122 523.576 204.791 532.303 cv
207.89 547.252 205.802 580.658 205.802 580.658 cv
205.802 585.754 215.39 589.887 227.218 589.887 cv
239.047 589.887 248.636 585.754 248.636 580.658 cv
248.636 580.658 248.906 532.504 249.175 525.633 cv
249.445 518.766 249.354 505.969 246.302 501.029 cv
cp
level3{
gsave
clp
[64.656 147.99 -147.99 64.656 187.826 427.452 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[64.656 147.99 -147.99 64.656 187.826 427.452 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
271.375 479.447 mo
270.729 481.102 268.845 481.93 267.188 481.283 cv
237.361 469.65 li
235.705 469.002 234.877 467.119 235.524 465.465 cv
251.726 423.925 li
252.372 422.27 254.256 421.442 255.911 422.086 cv
285.739 433.719 li
287.395 434.365 288.22 436.251 287.575 437.909 cv
271.375 479.447 li
cp
.858823 .619608 .494118 .356863 cmyk
f
268.365 478.271 mo
268.362 478.271 li
268.354 478.27 li
238.535 466.637 li
254.739 425.1 li
284.565 436.735 li
268.362 478.27 li
268.365 478.271 li
cp
level3{
gsave
clp
[-1.7511 63.5767 -63.5767 -1.7511 262.269 425.607 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.7511 63.5767 -63.5767 -1.7511 262.269 425.607 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
255.933 488.84 mo
255.933 488.84 254.183 485.033 251.377 479.162 cv
248.48 473.102 245.864 467.049 246.773 463.211 cv
247.422 460.477 247.624 457.207 247.687 455.545 cv
247.721 455.145 247.738 454.742 247.738 454.334 cv
247.738 448.058 243.798 442.974 238.939 442.974 cv
234.294 442.974 230.499 447.622 230.169 453.51 cv
230.138 453.549 li
229.241 462.035 235.167 475.705 237.188 479.162 cv
239.208 482.619 243.833 493.172 244.776 495.373 cv
245.719 497.572 248.728 500.4 250.884 500.852 cv
253.038 501.299 256.499 496.348 257.752 494.564 cv
258.605 493.352 255.933 488.84 255.933 488.84 cv
cp
level3{
gsave
clp
[34.8876 42.5656 -42.5656 34.8876 232.392 455.714 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[34.8876 42.5656 -42.5656 34.8876 232.392 455.714 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
233.082 428.693 mo
232.476 427.785 li
229.58 425.057 li
223.62 424.72 li
218.938 425.763 li
218.938 425.763 219.545 427.078 219.276 430.277 cv
218.895 433.55 218.444 434.865 218.215 435.355 cv
218.065 435.551 217.958 435.771 217.911 436.008 cv
217.588 437.69 220.205 439.606 223.757 440.292 cv
227.311 440.974 230.452 440.168 230.774 438.487 cv
230.805 438.323 230.801 438.162 230.78 437.998 cv
230.833 437.481 230.883 436.678 230.927 435.363 cv
231.164 431.42 233.082 428.693 233.082 428.693 cv
cp
level3{
gsave
clp
[-9.76715 -21.9592 21.9592 -9.76715 229.03 440.649 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-9.76715 -21.9592 21.9592 -9.76715 229.03 440.649 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
249.313 398.485 mo
249.475 400.161 249.539 406.782 249.539 408.613 cv
249.539 419.027 246.552 426.841 241.367 428.256 cv
224.887 432.601 220.892 424.055 220.892 413.64 cv
220.892 403.227 239.851 389.753 243.299 389.753 cv
246.139 389.753 248.558 390.639 249.313 398.485 cv
cp
level3{
gsave
clp
[.404121 -51.9956 51.9956 .404121 235.045 433.127 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[.404121 -51.9956 51.9956 .404121 235.045 433.127 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
249.806 395.367 mo
249.806 396.299 249.741 399.384 248.797 399.364 cv
244.712 399.258 241.617 401.151 242.848 406.164 cv
243.685 409.597 242.684 415.732 238.583 424.773 cv
237.426 427.328 240.11 431.42 238.315 431.42 cv
237.687 431.42 236.227 430.722 236.203 427.02 cv
236.171 422.195 238.583 418.577 238.853 417.411 cv
241.538 407.611 234.015 408.841 232.925 410.543 cv
231.412 412.911 228.75 415.977 233.15 420.196 cv
236.798 423.694 226.781 428.708 223.923 427.918 cv
216.264 425.804 216.11 429.569 214.763 431.286 cv
207.832 440.125 209.127 402.185 209.127 395.367 cv
209.127 388.547 216.753 383.737 227.987 383.737 cv
239.221 383.737 249.806 388.547 249.806 395.367 cv
cp
level3{
gsave
clp
[13.1101 36.1891 -36.1891 13.1101 221.584 388.003 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~gR`jugR`jugR`jugR`jugR`jug7Eatg7Eatg7Eatg7Eatg7Eatg7Eatfq!Utfq!Utfq!UtfU[LsfU[Ls
fU[LsfU[LsfU[LsfU[LsfU[LsfU[LsfU[Lsf:@Crf:@Crf:@Crf:@Crf:@Crf:@Crf:@Crf:@Crf:@Cr
eXV1reXV1reXV1reXV1reXV1reXV1reXV1reXV1reXV1re=;(qe=;(qe=;(qe=;(qe=;(qe=;(qe=;(q
e=;(qe=;(qd[bnod[bnod[bnod@5_od@5_od@5_od@5_od@5_od@5_od$oVnd$oVnd$oVnd$oVnd$oVn
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.1101 36.1891 -36.1891 13.1101 221.584 388.003 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~g=k97g=k97g=k97g=k97g=k97g=b04g"G'3g"G'3g"G'3g"G'3g"G'3g"=s0f\"j/f\"j/f[na,f@SX+
f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SU)f%/F'f%/F'f%/F'f%/F'f%/F'f%/F'f%/F'f%/F'
e^`4"eC<!teC<!teC<!teC<!teC<!teC<!teC<!teC<!teC<!se'ldpe'ldpe'ldpe'ldpe'ldpe'ldp
e'ldpe'ldpe'landF$@hdF$@hdF$@hd*U.dd*U.dd*U.dd*U.dd*U.dd*U.dcd0q`cd0q`cd0q`cd0q`
~>
<~SXl=BSXl=BSXl=BSXl=BSXl=BSXl=BSXl=BSXl=BSXl=BSXl=BSXl=BSXc4?S=H+>S=H+>S=H+>S=H+>
S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>
S=H+=S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:
S"#n:S"#n:S=H+>S=H+>S=H+>S=H(<R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6
~>
<~I=6NlI=6NlI=6NlI=6NlI=6NlI=6NlI=6NlI=6NlI=6NlI=6NlI=?WoIXZ`pIXZ`pIXZ`pIXZ`pIXZ`p
IXZ`pIXZ`pIXZ`pIXZ`pIXZ`pIXZ`pIXZ`pIXZ`pIXZ`pIXZ`pIXZ`pIXZ`pIXZ`pIXZ`pIXZ`pIXZcr
It3'"J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#
J:N0#J:N0#J:N0#It)rtIt)rtJ:N3%JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'
~>
<~>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$G38>?b<9>?b<9>?b<9>?b<9>?b<9
>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b?;
>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=
>[1N=>[1N=>[1N=>[1N=>[1N=?!U`A?!U`A?!U`A?!U`A?!U`A?!U`A?!U`A?!U`A?!U`A?!U`A?!U`A
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
223.406 398.78 mo
223.406 403.813 219.739 407.895 215.211 407.895 cv
210.686 407.895 207.018 403.813 207.018 398.78 cv
207.018 393.744 210.686 389.664 215.211 389.664 cv
219.739 389.664 223.406 393.744 223.406 398.78 cv
cp
level3{
gsave
clp
[21.014 17.0628 -17.0628 21.014 208.835 393.601 ]ct
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!2Oo@!2b&B!2k&A!315C!3CAE!3LDE!3UDD!3gME!4$VF!4-YF!46\F!4?_F!4HeG!4QbE!4ckF!4utG
!5*"G!53"F!5<%F!5N.G!5W1G!5`1F!5i4F!5r:G!6/CH!68CG!6AFG!6AFG!6SIF!6\LF!6eOF!6nUG
!7"RE!7+UE!74[F!7FdG!7F[D!7OaE!7XdE!7adD!7jgD!7sjD!8'pE!80mC!80jB!8BsC!8L$D!8KpA
!8TsA!8^$B!8g'B!8p$@!8p$@!9$'@!9$!>!9-$>!96'>!9?-?!9?'=!9H*=!9Q0>!9Z3>!9Z*;!9c0<
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[21.014 17.0628 -17.0628 21.014 208.835 393.601 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
0 <~USO]^V5C,eVPgAlWN)u!X/rD(XKAV,Xfeh1YHY79Z*L[@ZEpmDZa@*H['d<L[C3NP[^W`U\@K/]]">Sd
]=Y_g]Y(qk]tM.o^V@S"^qde&_84"*_SX4._o'F2`Poj:`l?'>a2c6@a2c9BaiV]Jb0%oNbKJ,Rbfn>V
c-=MYcHa_]cd0qad*^7gdF$@idaHRme'ldqeC<!ue^`4$f%/F(f@SX,f\"j/f\"j0g"P07gY:K;gY:K<
gt^]?h;-oChVR,Ghr!>Khr!>Ki8EPOi8EPOiSibSio8tWj5]1[j5]1[jQ,C_jlPUck2tggk2tggkND$k
~>
<~H$O[\H$O[[G^"@UGBS.QG'8%PG'.qLFE;MEF)l;AEcH)=EH#l9E,TZ5Df0H1DJj?/Chmg%CMIU!C2%Br
Bk_6oB4kggAnGUcAS#C_A7T1[@U`bS@:<PO?smAM?sm>K?=$oC?!U]?>[1N=>?Y04=]nj/=BJX+='&I)
<`N.!<)cgq;c?Un;c?Um;,C(b:JXb^:JXb]:/+GV9MA,Q91qoM8kM]J8kDQD7n6'=7Rfj977BX6779L0
6:+"*5s[e&5s[e&5X.Fr4Ztqk4Ztqk4?P\e3]];_3B9)[3&ilW3&iiU2E!HO2)R6K2)R6K1c.!D0ekC;
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
219.186 414.181 mo
220.533 403.225 220.589 401.485 220.287 399.733 cv
220.283 399.73 li
219.835 396.024 217.057 393.167 213.686 393.167 cv
210.343 393.167 208.533 396.162 207.103 399.63 cv
207.085 399.63 li
207.085 399.63 199.34 417.682 200.957 435.46 cv
202.573 453.244 202.304 454.23 211.195 469.768 cv
214.785 477.221 215.145 477.938 214.965 480.813 cv
214.785 483.686 217.119 485.213 217.569 479.285 cv
218.018 473.357 218.467 465.996 214.426 453.961 cv
212.091 446.777 212.629 440.223 213.977 434.833 cv
215.326 429.446 217.211 424.773 219.186 414.181 cv
cp
level3{
gsave
clp
[5.38808 34.4835 -34.4835 5.38808 210.125 416.609 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.38808 34.4835 -34.4835 5.38808 210.125 416.609 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
732.942 547.46 mo
732.191 547.46 731.348 547.217 730.458 546.705 cv
679.167 517.185 li
676.08 515.412 673.56 511.047 673.56 507.492 cv
673.56 363.213 li
673.56 360.685 674.834 359.218 676.68 359.218 cv
677.43 359.218 678.275 359.461 679.167 359.973 cv
730.458 389.493 li
733.536 391.266 736.065 395.622 736.065 399.177 cv
736.065 543.465 li
736.065 545.993 734.787 547.46 732.942 547.46 cv
.270588 .0627451 .0196078 0 cmyk
f
720.581 396.36 mo
669.287 366.84 li
667.731 365.942 666.322 365.875 665.303 366.48 cv
660.299 368.501 658.113 369.803 657.329 370.331 cv
656.267 370.896 655.602 372.162 655.602 373.986 cv
655.602 518.268 li
655.602 521.824 658.123 526.184 661.204 527.957 cv
712.5 557.479 li
713.302 557.941 714.065 558.18 714.756 558.221 cv
715.158 558.275 717.246 558.414 720.92 556.166 cv
722.863 554.941 723.861 554.332 724.351 554.039 cv
724.488 553.975 724.617 553.898 724.74 553.811 cv
724.782 553.787 li
724.785 553.779 li
725.652 553.139 726.184 551.959 726.184 550.33 cv
726.184 406.049 li
726.184 402.495 723.665 398.133 720.581 396.36 cv
cp
.0823529 .0784314 .0313725 0 cmyk
f
661.204 370.747 mo
658.123 368.971 655.602 370.43 655.602 373.986 cv
655.602 518.268 li
655.602 521.824 658.123 526.184 661.204 527.957 cv
712.5 557.479 li
715.582 559.252 718.102 557.793 718.102 554.238 cv
718.102 409.955 li
718.102 406.4 715.582 402.039 712.5 400.266 cv
661.204 370.747 li
cp
.054902 .0196078 .0156863 0 cmyk
f
671.586 413.101 mo
695.024 426.586 li
695.024 414.997 li
671.586 401.508 li
671.586 413.101 li
cp
.639216 .552941 .305882 .0705882 cmyk
f
709.482 465.65 mo
709.482 454.059 li
669.161 430.854 li
669.161 442.448 li
709.482 465.65 li
cp
f
698.256 463.854 mo
662.335 443.18 li
662.335 454.773 li
698.256 475.445 li
698.256 463.854 li
cp
f
669.161 474.953 mo
709.482 498.158 li
709.482 486.566 li
669.161 463.359 li
669.161 474.953 li
cp
f
662.335 487.279 mo
709.482 514.412 li
709.482 502.82 li
662.335 475.688 li
662.335 487.279 li
cp
f
662.335 491.941 mo
662.335 503.531 li
685.594 516.92 li
685.594 505.324 li
662.335 491.941 li
cp
f
616.741 337.328 mo
615.992 337.328 615.149 337.085 614.259 336.573 cv
562.959 307.053 li
559.881 305.28 557.361 300.915 557.361 297.36 cv
557.361 153.081 li
557.361 150.551 558.637 149.079 560.482 149.079 cv
561.23 149.079 562.071 149.321 562.959 149.832 cv
614.259 179.361 li
617.337 181.134 619.857 185.49 619.857 189.045 cv
619.857 333.333 li
619.857 335.861 618.583 337.328 616.741 337.328 cv
.270588 .0627451 .0196078 0 cmyk
f
604.377 186.227 mo
553.086 156.706 li
551.531 155.812 550.119 155.742 549.1 156.346 cv
544.096 158.371 541.91 159.669 541.127 160.196 cv
540.064 160.765 539.399 162.029 539.399 163.853 cv
539.399 308.133 li
539.399 311.69 541.919 316.051 545.003 317.825 cv
596.296 347.347 li
597.099 347.807 597.862 348.046 598.555 348.088 cv
598.957 348.144 601.045 348.282 604.719 346.032 cv
606.662 344.809 607.659 344.198 608.15 343.908 cv
608.285 343.84 608.414 343.764 608.537 343.678 cv
608.578 343.655 li
608.583 343.644 li
609.449 343.007 609.981 341.825 609.981 340.198 cv
609.981 195.917 li
609.981 192.362 607.461 188.002 604.377 186.227 cv
cp
.0823529 .0784314 .0313725 0 cmyk
f
545.003 160.614 mo
541.919 158.839 539.399 160.297 539.399 163.853 cv
539.399 308.133 li
539.399 311.69 541.919 316.051 545.003 317.825 cv
596.296 347.347 li
599.378 349.117 601.901 347.66 601.901 344.104 cv
601.901 199.824 li
601.901 196.27 599.378 191.908 596.296 190.134 cv
545.003 160.614 li
cp
.054902 .0196078 .0156863 0 cmyk
f
555.384 202.967 mo
578.822 216.457 li
578.822 204.864 li
555.384 191.375 li
555.384 202.967 li
cp
.639216 .552941 .305882 .0705882 cmyk
f
593.279 255.519 mo
593.279 243.925 li
552.958 220.721 li
552.958 232.313 li
593.279 255.519 li
cp
f
582.055 253.719 mo
546.134 233.046 li
546.134 244.638 li
582.055 265.313 li
582.055 253.719 li
cp
f
552.958 264.823 mo
593.279 288.024 li
593.279 276.434 li
552.958 253.228 li
552.958 264.823 li
cp
f
546.134 277.146 mo
593.279 304.278 li
593.279 292.687 li
546.134 265.553 li
546.134 277.146 li
cp
f
546.134 281.809 mo
546.134 293.4 li
569.393 306.786 li
569.393 295.193 li
546.134 281.809 li
cp
f
733.344 329.038 mo
733.301 329.038 733.257 329.036 733.212 329.031 cv
733.113 329.022 732.996 328.986 732.888 328.968 cv
732.762 328.941 732.636 328.923 732.501 328.878 cv
732.249 328.797 731.997 328.68 731.727 328.527 cv
724.041 324.099 li
723.762 323.946 li
716.202 319.59 li
716.202 319.608 li
692.172 305.775 li
692.163 305.757 li
644.445 278.289 li
642.312 277.065 640.566 274.041 640.566 271.584 cv
640.566 194.445 li
640.566 194.157 640.593 193.887 640.638 193.635 cv
640.656 193.545 640.692 193.473 640.71 193.383 cv
640.755 193.239 640.791 193.086 640.845 192.96 cv
640.89 192.87 640.935 192.789 640.989 192.708 cv
641.043 192.609 641.106 192.51 641.169 192.42 cv
641.376 192.213 li
641.741 191.871 642.21 191.688 642.749 191.688 cv
643.261 191.688 643.836 191.853 644.445 192.204 cv
731.727 242.433 li
733.869 243.666 735.615 246.69 735.615 249.147 cv
735.615 326.277 li
735.615 327.636 735.075 328.527 734.247 328.869 cv
734.121 328.923 733.995 328.977 733.86 329.004 cv
733.644 329.013 li
733.549 329.026 733.449 329.038 733.344 329.038 cv
.270588 .0627451 .0196078 0 cmyk
f
721.095 249.072 mo
633.814 198.839 li
632.985 198.363 632.215 198.226 631.583 198.379 cv
631.277 198.415 630.735 198.724 627.759 199.989 cv
625.412 200.985 624.354 201.738 623.897 202.141 cv
623.317 202.593 622.965 203.402 622.965 204.505 cv
622.965 281.637 li
622.965 284.101 624.711 287.122 626.847 288.349 cv
700.245 330.612 li
706.441 334.158 li
714.128 338.584 li
715.171 339.179 716.116 339.244 716.816 338.872 cv
717.273 338.743 718.045 338.5 719.329 338.031 cv
721.813 337.149 723.231 336.047 723.941 335.35 cv
724.582 334.919 724.977 334.084 724.977 332.916 cv
724.977 255.785 li
724.977 253.321 723.231 250.3 721.095 249.072 cv
cp
level3{
gsave
clp
[-61.4236 162.719 -162.719 -61.4236 707.369 180.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-61.4236 162.719 -162.719 -61.4236 707.369 180.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
715.29 339.023 mo
715.397 339.043 715.508 339.082 715.609 339.09 cv
715.761 339.103 715.904 339.085 716.045 339.074 cv
716.258 339.062 li
716.396 339.038 716.52 338.98 716.645 338.93 cv
717.474 338.584 718.01 337.688 718.01 336.337 cv
718.01 259.206 li
718.01 256.743 716.264 253.721 714.128 252.492 cv
626.847 202.261 li
625.59 201.54 624.481 201.608 623.771 202.272 cv
623.572 202.479 li
623.501 202.565 623.444 202.662 623.387 202.766 cv
623.247 203.016 li
623.191 203.146 623.151 203.295 623.11 203.441 cv
623.085 203.526 623.056 203.603 623.04 203.694 cv
622.993 203.945 622.965 204.213 622.965 204.505 cv
622.965 281.637 li
622.965 284.101 624.711 287.122 626.847 288.349 cv
674.56 315.809 li
674.572 315.827 li
698.604 329.667 li
698.604 329.648 li
706.163 333.999 li
706.441 334.158 li
714.128 338.584 li
714.392 338.734 714.648 338.85 714.896 338.936 cv
715.032 338.98 715.16 338.995 715.29 339.023 cv
cp
level3{
gsave
clp
[-24.246 113.687 -113.687 -24.246 679.032 230.369 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-24.246 113.687 -113.687 -24.246 679.032 230.369 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
681.94 288.493 mo
688.494 298.58 699.387 303.135 706.268 298.664 cv
713.144 294.197 713.408 282.395 706.848 272.305 cv
700.292 262.217 689.402 257.655 682.518 262.129 cv
675.639 266.596 675.38 278.399 681.94 288.493 cv
cp
.00784314 .0470588 .898039 0 cmyk
f
712.726 318.919 mo
688.482 277.432 li
675.908 287.309 li
650.405 236.662 li
650.405 236.662 635.525 245.992 622.965 253.779 cv
622.965 281.637 li
622.965 284.101 624.711 287.122 626.847 288.349 cv
674.56 315.809 li
674.572 315.827 li
698.604 329.667 li
698.604 329.648 li
706.163 333.999 li
706.441 334.158 li
714.128 338.584 li
714.392 338.734 714.648 338.85 714.896 338.936 cv
715.032 338.98 715.16 338.995 715.29 339.023 cv
715.397 339.043 715.508 339.082 715.609 339.09 cv
715.761 339.103 715.904 339.085 716.045 339.074 cv
716.258 339.062 li
716.396 339.038 716.52 338.98 716.645 338.93 cv
717.474 338.584 718.01 337.688 718.01 336.337 cv
718.01 321.896 li
712.726 318.919 li
cp
.639216 .552941 .305882 .0705882 cmyk
f
639.886 505.417 mo
639.858 505.417 639.83 505.416 639.801 505.413 cv
639.594 505.368 li
639.351 505.314 li
639.189 505.26 639.027 505.188 638.865 505.089 cv
633.996 502.29 li
633.816 502.191 li
629.028 499.437 li
629.028 499.446 li
613.809 490.68 li
613.8 490.671 li
583.587 473.283 li
582.237 472.5 581.13 470.592 581.13 469.026 cv
581.13 420.183 li
581.13 419.994 581.148 419.832 581.175 419.67 cv
581.22 419.508 li
581.247 419.418 581.274 419.319 581.31 419.238 cv
581.4 419.076 li
581.517 418.896 li
581.643 418.77 li
581.875 418.552 582.174 418.434 582.517 418.434 cv
582.84 418.434 583.203 418.539 583.587 418.761 cv
638.865 450.576 li
640.215 451.35 641.322 453.267 641.322 454.824 cv
641.322 503.667 li
641.322 504.522 640.98 505.089 640.458 505.314 cv
640.215 505.395 li
640.08 505.404 li
640.016 505.41 639.953 505.417 639.886 505.417 cv
.270588 .0627451 .0196078 0 cmyk
f
632.129 454.773 mo
576.852 422.962 li
576.328 422.661 575.841 422.576 575.443 422.669 cv
575.248 422.693 574.905 422.888 573.02 423.689 cv
571.533 424.321 570.862 424.796 570.574 425.054 cv
570.208 425.338 569.982 425.851 569.982 426.548 cv
569.982 475.398 li
569.982 476.957 571.089 478.869 572.441 479.648 cv
618.922 506.41 li
622.848 508.658 li
627.717 511.459 li
628.376 511.84 628.977 511.879 629.419 511.641 cv
629.707 511.559 630.197 511.406 631.01 511.111 cv
632.582 510.551 633.483 509.854 633.931 509.412 cv
634.336 509.139 634.585 508.611 634.585 507.871 cv
634.585 459.025 li
634.585 457.465 633.483 455.551 632.129 454.773 cv
cp
level3{
gsave
clp
[-.455217 105.55 -105.55 -.455217 602.633 386.251 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-.455217 105.55 -105.55 -.455217 602.633 386.251 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
628.453 511.738 mo
628.655 511.781 li
628.751 511.793 628.839 511.777 628.93 511.77 cv
629.065 511.764 li
629.311 511.68 li
629.833 511.459 630.173 510.895 630.173 510.037 cv
630.173 461.191 li
630.173 459.631 629.069 457.717 627.717 456.941 cv
572.441 425.13 li
571.646 424.67 570.946 424.714 570.495 425.136 cv
570.366 425.267 li
570.251 425.446 li
570.164 425.608 li
570.125 425.689 570.102 425.784 570.076 425.876 cv
570.032 426.038 li
570 426.194 569.982 426.364 569.982 426.548 cv
569.982 475.398 li
569.982 476.957 571.089 478.869 572.441 479.648 cv
602.657 497.039 li
602.666 497.051 li
617.885 505.814 li
617.885 505.799 li
622.67 508.555 li
622.848 508.658 li
627.717 511.459 li
627.881 511.557 628.045 511.629 628.204 511.682 cv
628.453 511.738 li
cp
level3{
gsave
clp
[23.6577 108.734 -108.734 23.6577 593.719 439.068 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[23.6577 108.734 -108.734 23.6577 593.719 439.068 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
612.403 416.515 mo
612.377 416.515 612.35 416.514 612.324 416.511 cv
612.117 416.466 li
611.874 416.412 li
611.712 416.358 611.55 416.286 611.388 416.187 cv
606.519 413.388 li
606.339 413.289 li
601.551 410.526 li
601.551 410.544 li
586.332 401.778 li
586.323 401.769 li
556.11 384.381 li
554.76 383.598 553.653 381.69 553.653 380.124 cv
553.653 331.281 li
553.653 331.092 553.671 330.921 553.698 330.768 cv
553.743 330.606 li
553.77 330.507 553.797 330.417 553.833 330.336 cv
553.914 330.174 li
554.04 329.994 li
554.166 329.859 li
554.392 329.647 554.687 329.531 555.029 329.531 cv
555.353 329.531 555.72 329.635 556.11 329.859 cv
611.388 361.665 li
612.738 362.448 613.845 364.356 613.845 365.922 cv
613.845 414.765 li
613.845 415.62 613.503 416.187 612.981 416.412 cv
612.738 416.493 li
612.603 416.502 li
612.533 416.508 612.467 416.515 612.403 416.515 cv
.270588 .0627451 .0196078 0 cmyk
f
604.65 365.872 mo
549.373 334.06 li
548.85 333.759 548.361 333.67 547.962 333.768 cv
547.769 333.792 547.426 333.985 545.54 334.788 cv
544.054 335.417 543.383 335.895 543.096 336.15 cv
542.727 336.436 542.504 336.95 542.504 337.649 cv
542.504 386.496 li
542.504 388.055 543.609 389.967 544.962 390.748 cv
591.445 417.512 li
595.371 419.756 li
600.238 422.558 li
600.896 422.936 601.497 422.977 601.94 422.74 cv
602.227 422.658 602.718 422.502 603.531 422.209 cv
605.104 421.65 606.003 420.953 606.452 420.509 cv
606.858 420.238 607.108 419.708 607.108 418.969 cv
607.108 370.123 li
607.108 368.563 606.003 366.651 604.65 365.872 cv
cp
level3{
gsave
clp
[-.45522 105.55 -105.55 -.45522 575.156 297.348 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-.45522 105.55 -105.55 -.45522 575.156 297.348 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
600.972 422.835 mo
601.177 422.879 li
601.272 422.888 601.362 422.877 601.453 422.871 cv
601.587 422.862 li
601.832 422.775 li
602.355 422.558 602.695 421.993 602.695 421.136 cv
602.695 372.288 li
602.695 370.729 601.59 368.816 600.238 368.04 cv
544.962 336.226 li
544.168 335.769 543.465 335.813 543.015 336.235 cv
542.885 336.364 li
542.772 336.544 li
542.683 336.707 li
542.648 336.789 542.622 336.881 542.598 336.975 cv
542.551 337.134 li
542.522 337.292 542.504 337.462 542.504 337.649 cv
542.504 386.496 li
542.504 388.055 543.609 389.967 544.962 390.748 cv
575.179 408.135 li
575.186 408.149 li
590.406 416.91 li
590.406 416.898 li
595.192 419.654 li
595.371 419.756 li
600.238 422.558 li
600.404 422.652 600.566 422.728 600.724 422.781 cv
600.972 422.835 li
cp
level3{
gsave
clp
[23.658 108.735 -108.735 23.658 566.241 350.167 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[23.658 108.735 -108.735 23.658 566.241 350.167 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
580.646 134.128 mo
493.363 83.8945 li
492.536 83.4194 491.765 83.2847 491.133 83.4346 cv
490.828 83.4697 490.287 83.7798 487.309 85.0415 cv
484.962 86.0405 483.905 86.7905 483.448 87.1968 cv
482.868 87.6479 482.514 88.4561 482.514 89.5605 cv
482.514 166.693 li
482.514 169.155 484.26 172.177 486.396 173.407 cv
544.895 207.072 li
558.19 244.423 li
565.992 240.442 li
565.992 219.211 li
573.679 223.637 li
574.722 224.238 575.668 224.299 576.367 223.925 cv
576.823 223.796 577.596 223.555 578.879 223.088 cv
581.364 222.206 582.782 221.104 583.491 220.405 cv
584.132 219.976 584.528 219.139 584.528 217.971 cv
584.528 140.84 li
584.528 138.375 582.782 135.354 580.646 134.128 cv
cp
level3{
gsave
clp
[-58.6877 110.1 -110.1 -58.6877 589.688 48.3945 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-58.6877 110.1 -110.1 -58.6877 589.688 48.3945 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
573.679 137.549 mo
486.396 87.3159 li
484.26 86.0864 482.514 87.0962 482.514 89.5605 cv
482.514 166.693 li
482.514 169.155 484.26 172.177 486.396 173.407 cv
534.111 200.865 li
558.153 244.546 li
558.153 214.702 li
573.679 223.637 li
575.815 224.865 577.561 223.855 577.561 221.393 cv
577.561 144.26 li
577.561 141.797 575.815 138.774 573.679 137.549 cv
cp
level3{
gsave
clp
[-15.1779 165.459 -165.459 -15.1779 533.258 120.373 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-15.1779 165.459 -165.459 -15.1779 533.258 120.373 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
516.402 160.061 mo
507.232 148.533 li
506.918 148.157 506.701 147.827 506.572 147.538 cv
506.444 147.25 506.381 146.956 506.381 146.661 cv
506.381 146.119 li
506.381 145.822 506.444 145.597 506.572 145.441 cv
506.701 145.285 506.918 145.172 507.232 145.103 cv
516.402 143.137 li
516.44 143.137 516.539 143.13 516.694 143.12 cv
516.85 143.109 516.99 143.133 517.107 143.197 cv
517.283 143.29 517.43 143.425 517.546 143.602 cv
517.665 143.78 517.722 143.964 517.722 144.152 cv
517.722 145.441 li
517.722 145.67 517.667 145.829 517.561 145.917 cv
517.453 146.01 517.283 146.077 517.048 146.119 cv
509.112 147.798 li
517.048 157.752 li
517.3 158.074 517.479 158.332 517.577 158.528 cv
517.672 158.725 517.722 158.93 517.722 159.138 cv
517.722 160.426 li
517.722 160.635 517.665 160.768 517.546 160.82 cv
517.43 160.877 517.283 160.86 517.107 160.77 cv
516.969 160.7 516.733 160.463 516.402 160.061 cv
cp
0 0 0 0 cmyk
f
520.662 167.288 mo
520.543 167.102 520.485 166.928 520.485 166.76 cv
520.485 166.675 520.514 166.567 520.573 166.43 cv
530.623 146.09 li
530.8 145.835 531.055 145.795 531.387 145.972 cv
532.474 146.556 li
532.631 146.64 532.769 146.775 532.886 146.959 cv
533.003 147.149 533.063 147.325 533.063 147.489 cv
533.063 147.57 533.034 147.68 532.974 147.813 cv
522.894 168.077 li
522.855 168.183 522.771 168.26 522.645 168.311 cv
522.518 168.361 522.346 168.331 522.131 168.222 cv
521.072 167.686 li
520.916 167.604 520.778 167.474 520.662 167.288 cv
cp
f
535.971 170.25 mo
535.855 170.065 535.795 169.881 535.795 169.696 cv
535.795 168.431 li
535.795 168.227 535.845 168.077 535.942 167.982 cv
536.04 167.891 536.215 167.818 536.472 167.763 cv
544.406 166.204 li
536.472 156.366 li
536.235 156.079 536.065 155.833 535.957 155.632 cv
535.849 155.432 535.795 155.22 535.795 154.993 cv
535.795 153.729 li
535.795 153.542 535.849 153.422 535.957 153.367 cv
536.065 153.313 536.208 153.332 536.384 153.425 cv
536.501 153.486 536.642 153.607 536.809 153.788 cv
536.976 153.97 537.079 154.082 537.117 154.123 cv
546.287 165.534 li
546.598 165.923 546.82 166.257 546.947 166.538 cv
547.075 166.817 547.137 167.1 547.137 167.382 cv
547.137 167.9 li
547.137 168.185 547.075 168.401 546.947 168.546 cv
546.82 168.694 546.598 168.788 546.287 168.829 cv
537.117 170.681 li
536.806 170.747 536.56 170.733 536.384 170.645 cv
536.226 170.562 536.088 170.432 535.971 170.25 cv
cp
f
522.727 633.041 mo
520.827 633.041 518.935 632.626 517.482 631.791 cv
442.503 588.636 li
439.497 586.908 439.452 584.001 442.413 582.183 cv
465.345 568.071 li
466.874 567.132 468.915 566.659 470.946 566.659 cv
472.848 566.659 474.741 567.074 476.199 567.909 cv
551.169 611.064 li
554.175 612.792 554.22 615.699 551.268 617.517 cv
528.327 631.629 li
526.797 632.568 524.757 633.041 522.727 633.041 cv
.0823529 .0509804 .0509804 0 cmyk
f
457.533 398.119 mo
486.193 396.859 li
486.193 396.859 487.031 392.661 490.392 392.974 cv
493.751 393.292 503.516 392.868 503.516 392.868 cv
503.516 392.868 509.396 391.925 500.578 395.812 cv
491.759 399.692 490.287 400.849 487.558 400.011 cv
485.564 400.114 461.419 407.778 459.32 406.726 cv
457.219 405.677 457.64 402.947 457.64 402.947 cv
457.533 398.119 li
cp
level3{
gsave
clp
[50.5226 -10.902 10.902 50.5226 453.095 403.819 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[50.5226 -10.902 10.902 50.5226 453.095 403.819 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
480.401 353.13 mo
475.747 353.13 li
475.747 353.13 467.367 355.659 462.583 370.284 cv
457.798 384.906 455.406 391.823 455.273 395.013 cv
455.139 398.201 453.943 404.453 457.4 406.181 cv
460.857 407.91 463.517 405.915 465.246 403.919 cv
466.974 401.926 466.175 399.797 467.769 395.675 cv
469.366 391.556 470.294 385.439 473.355 383.312 cv
476.414 381.185 480.533 375.603 480.533 375.603 cv
480.401 353.13 li
cp
level3{
gsave
clp
[25.5674 0 0 25.5674 454.965 379.985 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[25.5674 0 0 25.5674 454.965 379.985 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
465.922 581.527 mo
464.666 582.455 li
464.666 582.455 464.326 585.451 464.435 587.203 cv
464.549 588.955 463.75 590.816 464.666 591.123 cv
465.58 591.436 467.979 592.158 469.691 591.436 cv
471.407 590.713 471.178 588.855 472.207 588.955 cv
473.235 589.061 479.293 587.514 483.407 585.451 cv
487.518 583.387 488.78 580.393 485.463 580.6 cv
482.147 580.807 474.837 582.041 471.979 582.561 cv
471.364 582.689 471.257 582.242 471.257 582.242 cv
470.036 582.051 li
468.513 581.836 li
465.922 581.527 li
cp
level3{
gsave
clp
[23.1367 0 0 23.1367 464.22 586.168 ]ct
/6 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~d$oVnd$oVlc^]MicCBAecCBAec's2ac'j)^baa&[bF<lWb+*cTb+*`Qad[QMad[QMaI7?Ia.%9Fa-q0C
`gLs>`LCs=`0ta8`11g7_jPO4_jGI1_O>F._3o7+_4#7(^mT%$^R/ju^RApt^6`Xq^6raq]pNOl]U*=h
]9m7e\sI%a\X$k]\X6q\\WpbZ\<g_X\!:JS[Zk8O[[(>N[?Y/J[$G&GZ^"iCZ]e`BZBSZ@Z'/H;Z'8H9
Y`i96YE<!1Y*2s/Xccd,Xccd,XH6L&X,g=#WfU3uWK1!qW/spoViO^kVN+OhVN+OhV2\=dUlJ4aUQ&"]
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[23.1367 0 0 23.1367 464.22 586.168 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~cd0q`cd0q`cd'h]cHXVYc-=MXc-4DUbfn;Tbfe2QbK@uMb/qcIaiVZHaiMQEaN2HDaN)?Aa2Z-=`l?$<
`l?!:`Pod6`5KR2_o'C0_o'@._SX1,_SX.*_83q&^qdb$^qd_"^V@Ls^:q=q^:q:o]tM+m]tM(k]Y(kg
]=Y\d]"5J`\[f8\\@B&Y\@B&Y\@B&X\$riT[^NWP[C*EM[C*EL['[3HZa7!DZEgdAZEgd@Z*CR<Yct@9
Yct@9YHP.5Y-+q1Xf\_-XK8M)XK8M)X/i;%WiE)!WMukrW2QYnVl-GjVP^5fV5:#bV5:#bUnjf^USFTZ
~>
<~R[T\6R[]e9S"#n:S"#n:S"#n:S!oe7R[T\7S"#n:S"#n:S"#n:S"#n:S!oe7R[T\6R[T\6R[T\6R[KS3
R@0J2R[T\6R[T\6S"#n9R@0G0R$a8.R@0J2R@0J2R@0J2R@0G0R$a8.R@0J2R$X/+R$a8.R$a5,Q^=&*
Q^=&*Q^=&)QBmi&QC!r)QBd`#Q'R`%QBd`"Pa%DsPa.N!Q'IW"Q'IW"Q'IW!P`q;pPEV2oPEV2oPEV2o
PEV2oP*1riOcbfiP*1ukOcbcgOcb`eO,o?_O,o?_O,o?_O,o?_O,o?_NfK-[NK&pWNK&pWNK&pWNK&pW
~>
<~JUrB'JUrB&J:E&uIsuiqIXZ`pIXZ`pIXQWlI!^3eH[C*cH?jd]H$FRYG^+IXG^+IXG^"@UGBS.QG'.qM
F`heJFEDSFF)uABEH,u<EH,u<EH,u<E,]`6Df9Q4DJj<.D/F**Ci!p(CMR^$CMR^$CMR["C2.HsBk_6o
BP;'lB4kjhAnGXeAn>ObAS#FaARo=]@q0"Y@q0"X@UW\Q?smAM?sd8I?=$rE?=$rE?=$rD?!U`@>[(E9
>$>*5>$>*5=]nj/='&I)='&I)='&I)<`W7%<`W4#<)cgr;c?Un;GpCj;,L1f;,L1f;,L1f:f'q`:/4PZ
~>
<~?!U`@>[(E:>?Y35=]ed.=BJ[,=&r@&<`N.!<)Z^n;Gg:g;,C(b:JOYZ9h\5S9MA,R9M8#N8kDTG8OuBB
7n6$<7Rfg86psC06UO1,6:+"*5s[b$5<h=q5!D+m4?P\e4$,Ja3B9&Y3&iiU2`EZS2`EWQ2)R3I1c.!E
1,:U>0ekC:0J>(3/hSb./M/P+/M/P*/1W5#.Olns.4H\o-mpAh-71&c,pai_,U=W\,U=W[,9e<T+X&!O
+<VdL+!2RH*Zc@D*??.@*#oq<*#on:)B'M4)&X;0(`4),(Ddl(()@Z$'bqGu'GM5q'GM5q',)#m&eYfi
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
471.292 582.455 mo
471.292 583.367 469.81 584.107 467.979 584.107 cv
466.148 584.107 464.666 583.367 464.666 582.455 cv
464.666 581.545 466.148 580.807 467.979 580.807 cv
469.81 580.807 471.292 581.545 471.292 582.455 cv
cp
.745098 .686274 .635294 .803922 cmyk
f
476.809 443.683 mo
469.587 445.069 471.597 449.04 471.597 452.754 cv
471.597 456.469 469.454 476.18 466.81 501.895 cv
464.375 525.563 465.597 535.893 465.311 554.033 cv
465.082 568.463 464.047 575.912 463.631 578.367 cv
463.529 578.672 463.457 578.986 463.457 579.316 cv
463.457 581.367 465.568 583.031 468.167 583.031 cv
470.774 583.031 472.881 581.367 472.881 579.316 cv
472.881 579.316 475.646 543.133 476.132 539.283 cv
478.559 520.107 485.024 497.18 487.454 488.609 cv
489.881 480.039 500.309 450.255 500.309 450.255 cv
500.309 450.255 492.811 440.611 476.809 443.683 cv
cp
level3{
gsave
clp
[169.915 -67.8065 67.8065 169.915 374.887 552.391 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[169.915 -67.8065 67.8065 169.915 374.887 552.391 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
489.302 362.957 mo
489.858 361.908 493.696 353.576 494.312 348.097 cv
494.927 342.616 494.642 339.575 495.009 339.452 cv
495.378 339.329 498.767 338.526 498.767 338.526 cv
505.233 341.977 li
508.19 343.269 li
508.19 343.269 510.014 347.945 507.577 350.229 cv
501.785 355.404 503.016 367.966 506.897 367.661 cv
507.255 367.629 506.897 371.784 503.08 370.429 cv
499.259 369.077 494.332 366.673 493.656 366.118 cv
492.978 365.564 489.302 362.957 489.302 362.957 cv
cp
level3{
gsave
clp
[-9.83762 -19.9433 19.9433 -9.83762 504.857 365.5 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-9.83762 -19.9433 19.9433 -9.83762 504.857 365.5 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
510.588 341.566 mo
511.29 341.285 511.886 340.744 511.886 340.046 cv
511.886 339.143 508.971 333.961 507.603 332.81 cv
507.486 331.825 507.342 330.615 507.206 329.579 cv
506.917 327.402 506.381 326.045 504.618 326.045 cv
502.854 326.045 498.953 326.948 498.953 326.948 cv
498.953 326.948 494.393 329.497 494.393 329.62 cv
494.393 329.74 488.728 342.387 488.728 342.797 cv
488.728 343.208 496.239 352.573 508.148 352.612 cv
509.645 352.612 510.858 351.396 510.858 349.902 cv
510.858 349.574 510.791 349.26 510.682 348.967 cv
510.571 348.311 510.448 347.42 510.448 346.7 cv
510.448 345.384 511.189 344.81 510.859 344.154 cv
510.53 343.5 510.038 343.084 510.285 342.428 cv
510.36 342.222 510.471 341.904 510.588 341.566 cv
cp
level3{
gsave
clp
[28.7176 -18.3474 18.3474 28.7176 493.972 346.019 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[28.7176 -18.3474 18.3474 28.7176 493.972 346.019 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
507.54 601.277 mo
505.969 602.566 li
505.969 602.566 505.543 606.707 505.685 609.135 cv
505.826 611.566 504.826 614.137 505.969 614.566 cv
507.112 614.994 510.112 615.994 512.255 614.994 cv
514.397 613.996 514.111 611.424 515.396 611.566 cv
516.682 611.707 524.255 609.568 529.397 606.709 cv
534.539 603.852 536.112 599.707 531.967 599.994 cv
527.827 600.281 518.683 601.992 515.113 602.707 cv
514.344 602.889 514.209 602.273 514.209 602.273 cv
512.683 602.004 li
510.782 601.709 li
507.54 601.277 li
cp
level3{
gsave
clp
[-1.6957 -8.97724 8.97724 -1.6957 520.648 611.511 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.6957 -8.97724 8.97724 -1.6957 520.648 611.511 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
514.256 602.566 mo
514.256 603.826 512.399 604.852 510.112 604.852 cv
507.826 604.852 505.969 603.826 505.969 602.566 cv
505.969 601.305 507.826 600.281 510.112 600.281 cv
512.399 600.281 514.256 601.305 514.256 602.566 cv
cp
.745098 .686274 .635294 .803922 cmyk
f
518.03 448.193 mo
501.366 450.897 li
500.302 443.971 495.629 438.753 490.025 438.753 cv
483.635 438.753 478.454 445.536 478.454 453.896 cv
478.454 456.836 479.106 459.568 480.211 461.891 cv
483.26 470.021 495.679 479.859 497.024 492.467 cv
498.454 505.893 502.596 511.607 503.165 519.463 cv
503.736 527.32 504.31 563.461 505.02 575.031 cv
505.734 586.604 506.132 600.35 506.132 600.35 cv
506.132 602.184 507.858 603.666 509.986 603.666 cv
512.116 603.666 513.84 602.184 513.84 600.35 cv
513.84 600.35 518.021 541.604 518.308 528.463 cv
518.59 515.322 518.45 514.465 518.593 498.037 cv
518.757 478.947 518.03 448.193 518.03 448.193 cv
cp
level3{
gsave
clp
[-140.404 -184.679 184.679 -140.404 592.109 630.031 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-140.404 -184.679 184.679 -140.404 592.109 630.031 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
518.16 407.508 mo
521.085 395.545 522.814 390.891 522.814 390.891 cv
521.085 368.819 li
521.085 368.819 514.204 364.763 506.727 363.37 cv
501.011 362.302 498.05 361.775 492.632 358.981 cv
491.285 358.286 488.675 354.595 482.194 352.799 cv
482.194 352.799 475.913 350.904 473.355 355.26 cv
470.004 360.961 471.761 367.357 473.488 381.715 cv
475.215 396.076 475.351 412.694 473.488 424.927 cv
472.407 432.035 470.613 440.481 471.509 445.533 cv
471.509 445.703 li
471.553 446.177 471.708 446.64 471.919 447.097 cv
472.35 448.278 473.021 449.157 474.009 449.623 cv
477.881 452.758 485.879 454.943 495.457 454.943 cv
504.515 454.943 512.022 453.211 516.058 450.49 cv
517.863 449.866 519.837 447.759 519.758 441.68 cv
519.624 431.177 515.235 419.478 518.16 407.508 cv
cp
level3{
gsave
clp
[27.9211 111.685 -111.685 27.9211 479.411 339.795 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[27.9211 111.685 -111.685 27.9211 479.411 339.795 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
505.91 327.077 mo
506.734 322.72 505.798 313.826 505.798 313.826 cv
505.798 313.127 505.195 312.566 504.443 312.566 cv
493.526 312.176 482.522 325.972 480.38 328.802 cv
479.218 330.155 478.5 331.834 478.5 333.688 cv
478.5 334.254 478.567 334.804 478.69 335.338 cv
478.65 335.488 li
479.402 340.82 487.81 349.533 487.81 349.533 cv
487.881 349.527 li
488.787 350.426 490.063 350.998 491.491 350.998 cv
493.939 350.998 495.966 349.335 496.363 347.154 cv
496.391 347.083 li
496.691 345.806 497.349 342.853 497.05 337.48 cv
496.949 335.722 502.447 334.042 502.587 334.016 cv
502.658 333.97 li
503.693 333.61 504.492 332.824 504.826 331.837 cv
504.838 331.82 li
504.852 331.761 li
504.905 331.58 504.943 331.397 504.967 331.212 cv
505.195 330.09 505.196 329.866 505.91 327.077 cv
cp
.815686 .607843 .509804 .368627 cmyk
f
538.637 407.91 mo
574.934 406.313 li
574.934 406.313 575.997 400.996 580.25 401.394 cv
584.505 401.792 596.872 401.262 596.872 401.262 cv
596.872 401.262 604.319 400.064 593.15 404.985 cv
581.982 409.905 580.117 411.367 576.663 410.305 cv
574.136 410.435 543.556 420.14 540.897 418.813 cv
538.239 417.481 538.769 414.024 538.769 414.024 cv
538.637 407.91 li
cp
level3{
gsave
clp
[70.2011 -9.83892 9.83892 70.2011 533.659 413.979 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[70.2011 -9.83892 9.83892 70.2011 533.659 413.979 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
543.125 406.011 mo
542.759 404.148 539.633 401.561 533.05 386.303 cv
529.168 377.303 526.078 373.041 524.186 371.042 cv
522.407 368.959 519.685 367.624 516.633 367.624 cv
511.271 367.624 506.927 371.73 506.927 376.796 cv
506.927 377.432 506.997 378.05 507.126 378.648 cv
506.971 385.351 526.971 404.756 529.959 408.343 cv
532.951 411.932 533.875 415.533 537.738 418.644 cv
541.96 421.936 543.125 420.071 542.293 416.186 cv
541.518 412.585 544.022 410.596 543.125 406.011 cv
cp
level3{
gsave
clp
[-33.1333 -55.4229 55.4229 -33.1333 543.908 422.483 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-33.1333 -55.4229 55.4229 -33.1333 543.908 422.483 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
650.79 847.692 mo
648.5 847.692 646.2 847.158 644.481 846.099 cv
618.606 830.187 li
615.276 828.135 615.321 824.85 618.714 822.906 cv
703.269 774.243 li
704.91 773.298 707.046 772.83 709.192 772.83 cv
711.483 772.83 713.785 773.364 715.509 774.423 cv
741.375 790.335 li
744.705 792.387 744.66 795.663 741.267 797.616 cv
656.712 846.279 li
655.071 847.224 652.935 847.692 650.79 847.692 cv
.0823529 .0509804 .0509804 0 cmyk
f
705.159 589.318 mo
676.271 574.752 li
676.271 574.752 677.355 570.047 673.751 568.811 cv
670.151 567.584 660.307 562.629 660.307 562.629 cv
660.307 562.629 654.697 558.934 661.965 567.012 cv
669.237 575.092 670.213 576.959 673.412 577.359 cv
675.413 578.391 696.691 597.451 699.337 597.346 cv
701.983 597.238 702.817 594.238 702.817 594.238 cv
705.159 589.318 li
cp
level3{
gsave
clp
[-46.9067 -34.6075 -34.6075 46.9067 707.086 597.239 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-46.9067 -34.6075 -34.6075 46.9067 707.086 597.239 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
702.477 532.469 mo
707.261 534.621 li
707.261 534.621 714.707 541.102 712.857 558.357 cv
711.005 575.613 710.264 583.828 708.922 587.172 cv
707.581 590.514 705.92 597.496 701.563 597.674 cv
697.209 597.848 695.397 594.566 694.544 591.715 cv
693.691 588.865 695.496 587.045 695.765 582.07 cv
696.033 577.09 697.91 570.369 695.748 566.768 cv
693.585 563.166 691.936 555.516 691.936 555.516 cv
702.477 532.469 li
cp
level3{
gsave
clp
[-26.2899 -11.8388 -11.8388 26.2899 716.196 571.862 ]ct
/7 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~%Kut8%gE+9%g<(9&-`7;&dAL>&dJR?'*\X@'F4mC'F+jC'aP!D(C(3G('t3G(^LEJ(^UHJ(^^NK)%$WL
)@?cN)@?cN)[cuQ*"!#Q*"3/S*=E5T*XiAU*t/MW*t8SX+UebZ+:\e[+V+t]+q>%^+qP1`,S(@b,nLOd
,nLOd-4pag-P-dg-P?sj-kR!j.2!3m.2*6m.MEEp.h`Kp.h`Qr///]s/JJft/JSp!/ees!0,50$0,50$
0GYB'0bkE'0c(T*1)L`+1D^i-1Dpr.2&I/12Am;22Am>32]<M53#NV73#`_83>re93ZAt;3ZB"<3uf1>
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-26.2899 -11.8388 -11.8388 26.2899 716.196 571.862 ]ct
clp
/7 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~%1WjX%LrsY%M''\%hK9a&J5Te&J>]h&ebol',)#m',2,p'GV>u()@Z$()@Z%(Ddl((Ddl((Dmu+(`=2/
)&X;0)&X>2)B'P6)]K_8)]Kb:*#ot>*??1B*Zc@D*ZcCF+<VdL+<VdL+<VgN+X&!P+X&$R,9nHZ,U=W\
,U=W],paia-71&d-71&e-RU8i-n$Jl-n$Jm.4H\q.Olnt.Olnu.k<,$/1`>'/1`>(/M/P,/hSb//hSb0
0/"t30JG170JG170ekC;1,:U?1,:U?1G^jE2)R6K2)R6K2E!HO2`EZS2`EZS3&ilW3B9)[3B9)[3]];_
~>
<~"9er4"U,&5"U,&5"U,&5"U5/8"pP89"pP8:#6tJ=#6tJ=#6tJ=#6tJ>#RC\A#RC\A#RLeD#mgnE#mgnE
#mgnE#mgqG$47+I$47+I$O[=M$O[=M$O[=M$O[@O$k*OQ$k*OQ%1NdW%LrsY%LrsY%hB0]%hB0]%hB0]
%hB0^&.fBa&.fBa&.oKd&J5Te&J5Tf&eYfi&eYfi&eYfi&eYfj',)#m',)#n'GM5q'GM5q'GM5q'GM5r
'bqGu'bqGu'bqK"(Ddl((Ddl((Ddo*(`4),(`4),(`4),)&X;0)&X;0)&X>2)B'M4)B'M4)B'M4)]K_8
~>
<~!s8W-!s8W-!s8W-!sA`0"9\i1"9er4"U,&5"U5/8"pP89"pP8:#6tJ=#6tJ>#RC\A#R:S>#6tJ=#7(S@
#RC\A#RC_C#mgnE#mgnE#mgqG$47+I$47+I$47+I$47.K$O[=M$O[=M$O[@O$k*OQ$k*RS%1NaU%1NaU
%1NaV%LrsY%LrsZ%hB0]%hB0^&.fBa&.fBa&.oKd&J5Te&J>]h&eYfh&J5Tf&eYfi&eYfj',)#m',)#n
'GM5q'GM5q'bqGu'bqGu'bqK"()@Z$()@]&(Ddl((Ddl((Ddl((`4,.)&X;0)&X;0)&X;0)B'M4)B'M4
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /7 /Gradient get_res exec grestore
}if
np
714.858 789.596 mo
716.276 790.645 li
716.276 790.645 716.66 794.021 716.534 795.996 cv
716.405 797.977 717.307 800.072 716.276 800.422 cv
715.245 800.77 712.541 801.584 710.607 800.77 cv
708.674 799.957 708.929 797.859 707.772 797.977 cv
706.609 798.094 699.779 796.348 695.141 794.021 cv
690.501 791.693 689.08 788.314 692.821 788.549 cv
696.559 788.783 704.803 790.178 708.027 790.762 cv
708.72 790.906 708.841 790.404 708.841 790.404 cv
710.22 790.188 li
711.935 789.943 li
714.858 789.596 li
cp
level3{
gsave
clp
[-26.0928 0 0 26.0928 716.777 794.828 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-26.0928 0 0 26.0928 716.777 794.828 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
708.8 790.645 mo
708.8 791.672 710.473 792.504 712.541 792.504 cv
714.603 792.504 716.276 791.672 716.276 790.645 cv
716.276 789.615 714.603 788.783 712.541 788.783 cv
710.473 788.783 708.8 789.615 708.8 790.645 cv
cp
.745098 .686274 .635294 .803922 cmyk
f
702.58 634.141 mo
710.724 635.703 708.458 640.182 708.458 644.371 cv
708.458 648.561 710.874 670.789 713.856 699.787 cv
716.601 726.48 715.224 738.129 715.546 758.59 cv
715.804 774.859 716.973 783.266 717.44 786.033 cv
717.557 786.377 717.639 786.732 717.639 787.105 cv
717.639 789.418 715.259 791.291 712.325 791.291 cv
709.386 791.291 707.009 789.418 707.009 787.105 cv
707.009 787.105 703.892 746.295 703.344 741.955 cv
700.605 720.328 693.314 694.471 690.574 684.807 cv
687.838 675.139 676.078 641.551 676.078 641.551 cv
676.078 641.551 684.534 630.678 702.58 634.141 cv
cp
level3{
gsave
clp
[-191.628 -76.4712 -76.4712 191.628 817.527 756.738 ]ct
/8 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!Y"/j!Y4;l!Y4;l!Y=Am!Y=Am!>4Dn!>4Dn!>=Jo!>=Jo!>OVq!>OVq!>X\r!>X\r!>jes!>skt!>skt
!#jnu!#jnu!$(&"!$(&"!$1,#!$1,#!$C8%!$C8%!$L>&!$L>&!$UD'!$gS*!$gS*!$pY+!$pY+!%$_,
!%$_,!%6k.!%6k.!%?n.!%?n.!%R%0!%[+1!%[+1!%m73!%m73!&!=4!&!=4!&*C5!&*C5!&<R8!&<R8
!&EX9!&EX9!&Wa:!&im<!&im<!&rs=!&rs=!''$>!''$>!'90@!'90@!'K<B!'K<B!'TBC!'TBC!']HD
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-191.628 -76.4712 -76.4712 191.628 817.527 756.738 ]ct
clp
/8 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~!<E3%!<E3%!<E3%!<E3%!<E3%!<<*"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
zzzzzzz!!!!!~>
<~$OdFQ%1NaU%1WjX%LrsY%M'']&.fBa&.oKd&J5Te&J>]i',)#m',2,p'GM5q'GV>u()Ic'(Ddl((Dmu,
)&X;0)&X>2)]K_8)]Kb:*#oq<*#ot>*Zc@D*ZcCF+!2RH+!2UJ+<VgN+sJ3T+sJ6V,9nEX,9nHZ,U=W\
,U=W],pjrc-71&e-RU8h-RU8i-n-Sp.Olnt.Olnu.kE5&/1`>(/M/P+/M/P,/hSb//hSb00/,(60JG18
0ekC;0ekC;1,:XA1c.'I2)R6K2E!HO2E!HO2`EZS2`EZS3&ioY3B9)[3]]>a4$,Mc4?P_g4?P_g4Ztqk
~>
<~jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ#:\j5]1[j5]1[
j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]4]jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_
jQ,C_jQ,C_jQ,C_jQ,C^j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1\jQ,C_jQ,C_
jQ,C_jQ,C_jQ,C_j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /8 /Gradient get_res exec grestore
}if
np
688.491 543.1 mo
687.862 541.916 683.535 532.52 682.842 526.34 cv
682.146 520.154 682.467 516.729 682.052 516.59 cv
681.636 516.451 677.818 515.547 677.818 515.547 cv
670.524 519.439 li
667.189 520.896 li
667.189 520.896 665.133 526.17 667.883 528.744 cv
674.414 534.58 673.022 548.748 668.646 548.402 cv
668.244 548.369 668.646 553.055 672.955 551.525 cv
677.261 550 682.817 547.289 683.581 546.666 cv
684.345 546.041 688.491 543.1 688.491 543.1 cv
cp
level3{
gsave
clp
[11.0947 -22.4917 -22.4917 -11.0947 670.95 545.968 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[11.0947 -22.4917 -22.4917 -11.0947 670.95 545.968 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
664.485 518.975 mo
663.694 518.658 663.023 518.045 663.023 517.264 cv
663.023 516.24 666.307 510.398 667.851 509.102 cv
667.983 507.99 668.147 506.625 668.299 505.455 cv
668.623 503 669.228 501.473 671.217 501.473 cv
673.208 501.473 677.607 502.488 677.607 502.488 cv
677.607 502.488 682.749 505.361 682.749 505.5 cv
682.749 505.641 689.138 519.9 689.138 520.365 cv
689.138 520.826 680.667 531.387 667.236 531.432 cv
665.548 531.432 664.183 530.063 664.183 528.375 cv
664.183 528.004 664.256 527.654 664.379 527.324 cv
664.505 526.58 664.644 525.576 664.644 524.766 cv
664.644 523.281 663.808 522.633 664.178 521.893 cv
664.549 521.154 665.106 520.688 664.828 519.947 cv
664.743 519.715 664.617 519.355 664.485 518.975 cv
cp
level3{
gsave
clp
[-32.3888 -20.6929 -20.6929 32.3888 683.226 523.996 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-32.3888 -20.6929 -20.6929 32.3888 683.226 523.996 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
667.921 811.873 mo
669.694 813.322 li
669.694 813.322 670.175 817.994 670.014 820.734 cv
669.855 823.473 670.981 826.371 669.694 826.855 cv
668.405 827.338 665.021 828.467 662.604 827.338 cv
660.188 826.211 660.512 823.313 659.062 823.473 cv
657.612 823.633 649.072 821.219 643.274 817.996 cv
637.473 814.773 635.701 810.1 640.374 810.424 cv
645.044 810.744 655.356 812.678 659.382 813.482 cv
660.249 813.686 660.401 812.988 660.401 812.988 cv
662.122 812.689 li
664.268 812.357 li
667.921 811.873 li
cp
level3{
gsave
clp
[1.91178 -10.1212 -10.1212 -1.91178 653.139 823.41 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.91178 -10.1212 -10.1212 -1.91178 653.139 823.41 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
660.348 813.322 mo
660.348 814.746 662.443 815.9 665.021 815.9 cv
667.6 815.9 669.694 814.746 669.694 813.322 cv
669.694 811.902 667.6 810.744 665.021 810.744 cv
662.443 810.744 660.348 811.902 660.348 813.322 cv
cp
.745098 .686274 .635294 .803922 cmyk
f
656.094 639.229 mo
674.886 642.273 li
676.086 634.465 681.355 628.582 687.676 628.582 cv
694.881 628.582 700.725 636.227 700.725 645.66 cv
700.725 648.973 699.99 652.055 698.742 654.674 cv
695.305 663.844 681.298 674.939 679.781 689.154 cv
678.169 704.301 673.5 710.742 672.858 719.604 cv
672.213 728.465 671.566 769.223 670.763 782.273 cv
669.96 795.32 669.509 810.826 669.509 810.826 cv
669.509 812.889 667.564 814.564 665.165 814.564 cv
662.762 814.564 660.817 812.889 660.817 810.826 cv
660.817 810.826 656.101 744.574 655.781 729.754 cv
655.459 714.932 655.62 713.965 655.456 695.438 cv
655.271 673.91 656.094 639.229 656.094 639.229 cv
cp
level3{
gsave
clp
[45.2969 0 0 45.2969 655.428 721.573 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[45.2969 0 0 45.2969 655.428 721.573 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
655.945 593.348 mo
652.646 579.854 650.698 574.604 650.698 574.604 cv
652.646 549.709 li
652.646 549.709 660.407 545.139 668.838 543.564 cv
675.285 542.359 678.626 541.764 684.735 538.615 cv
686.253 537.832 689.197 533.668 696.506 531.645 cv
696.506 531.645 703.591 529.506 706.474 534.416 cv
710.255 540.85 708.275 548.063 706.327 564.256 cv
704.376 580.449 704.226 599.191 706.327 612.988 cv
707.545 621.004 709.568 630.527 708.556 636.227 cv
708.556 636.416 li
708.507 636.953 708.332 637.475 708.094 637.99 cv
707.608 639.322 706.851 640.313 705.738 640.84 cv
701.371 644.373 692.352 646.838 681.55 646.838 cv
671.334 646.838 662.868 644.881 658.315 641.818 cv
656.282 641.113 654.055 638.736 654.143 631.881 cv
654.295 620.035 659.244 606.842 655.945 593.348 cv
cp
level3{
gsave
clp
[96.414 115.049 -115.049 96.414 652.892 553.357 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[96.414 115.049 -115.049 96.414 652.892 553.357 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
669.762 502.635 mo
668.83 497.723 669.887 487.688 669.887 487.688 cv
669.887 486.902 670.568 486.266 671.414 486.266 cv
683.73 485.832 696.137 501.391 698.552 504.578 cv
699.861 506.104 700.675 508.002 700.675 510.09 cv
700.675 510.727 700.596 511.35 700.458 511.953 cv
700.502 512.121 li
699.656 518.133 690.172 527.963 690.172 527.963 cv
690.091 527.953 li
689.071 528.971 687.632 529.611 686.021 529.611 cv
683.261 529.611 680.976 527.736 680.528 525.279 cv
680.496 525.197 li
680.159 523.758 679.416 520.424 679.751 514.367 cv
679.869 512.385 673.667 510.488 673.508 510.459 cv
673.429 510.41 li
672.261 510.004 671.361 509.115 670.986 508.002 cv
670.966 507.984 li
670.954 507.916 li
670.895 507.715 670.851 507.508 670.825 507.299 cv
670.568 506.033 670.567 505.779 669.762 502.635 cv
cp
.376471 .729412 .878431 .423529 cmyk
f
649.612 600.41 mo
639.638 655.33 li
639.638 655.33 633.527 655.674 633.298 660.484 cv
633.07 665.303 630.512 679.025 630.512 679.025 cv
630.512 679.025 627.997 687.15 635.261 675.459 cv
642.524 663.768 644.455 661.92 643.814 657.895 cv
644.361 655.096 659.236 623.557 658.625 620.258 cv
658.12 617.525 663.539 606.586 660.803 602.232 cv
660.433 601.643 655.335 606.258 655.335 606.258 cv
649.612 600.41 li
cp
level3{
gsave
clp
[-26.8952 93.4222 93.4222 26.8952 658.755 594.692 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-26.8952 93.4222 93.4222 26.8952 658.755 594.692 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
648.791 603.521 mo
647.326 601.963 649.42 597.176 646.441 578.676 cv
644.686 567.76 645.044 561.832 645.635 558.789 cv
646.066 555.727 647.847 552.809 650.75 550.959 cv
655.852 547.715 662.473 548.992 665.54 553.811 cv
665.923 554.414 666.234 555.045 666.471 555.697 cv
670.676 561.977 663.398 592.549 662.728 597.771 cv
662.056 602.998 663.006 607.471 658.678 607.318 cv
655.397 607.207 651.035 605.92 648.791 603.521 cv
cp
level3{
gsave
clp
[46.992 76.1588 -76.1588 46.992 639.67 550.341 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[46.992 76.1588 -76.1588 46.992 639.67 550.341 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
523.596 805.094 mo
521.952 805.094 520.294 804.701 519.066 803.925 cv
437.166 752.211 li
434.844 750.744 434.907 748.449 437.301 747.108 cv
502.911 710.361 li
504.039 709.729 505.491 709.417 506.954 709.417 cv
508.595 709.417 510.251 709.81 511.479 710.586 cv
593.379 762.309 li
595.701 763.767 595.647 766.062 593.253 767.412 cv
527.643 804.15 li
526.515 804.782 525.061 805.094 523.596 805.094 cv
.0823529 .0509804 .0509804 0 cmyk
f
589.13 760.469 mo
589.38 753.693 li
589.602 752.742 589.119 751.73 587.912 750.969 cv
514.485 704.602 li
512.405 703.287 508.945 703.197 506.795 704.4 cv
447.978 737.342 li
446.835 737.982 446.289 738.869 446.343 739.754 cv
446.059 746.674 li
446.039 746.811 446.033 746.947 446.044 747.084 cv
446.039 747.152 li
446.045 747.152 li
446.118 747.902 446.614 748.65 447.559 749.244 cv
520.986 795.609 li
523.067 796.922 526.526 797.016 528.673 795.814 cv
587.491 762.873 li
588.632 762.232 589.177 761.352 589.127 760.469 cv
589.13 760.469 li
cp
level3{
gsave
clp
[-8.20403 86.8883 -86.8883 -8.20403 522.685 697.69 ]ct
/9 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!#WiY!#iu[!$0/]!$B;_!$TGa!$fSc!%,hg!%>qh!%Q%i!%c.j!&)@m!&2Fn!&MUp!&_ar!&haq!'.st
!'8!t!'S1!!'\7"!("F$!(4R&!(F^(!(Xj*!(t'-!)10.!)LB1!)UE1!)gN2!*$W3!*-Z3!*Qr7!*[#8
!+!2:!+*5:!+EG=!+NJ=!+i\@!+r\?!,/e@!,K"C!,T"B!,f.D!-#4D!-5@F!-GIG!-bXI!-k[I!.1jK
!.D!M!._3P!.h3O!.q9P!/7EQ!/@KR!/[ZT!/d]T!0*lV!03lU!0O&W!0X,X!0s5X!10AZ!1KJZ!1TP[
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-8.20403 86.8883 -86.8883 -8.20403 522.685 697.69 ]ct
clp
/9 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
0 <~(Dmu,)&aG6*$$%@*ZlIH+<_mP+sS?Y,pjrd-R^Al.4Qet.kE8(/h\k20/,(71,C^C1c7-J2)[?O3&ruZ
3B9,^4?Pbi4Zttn5X7V$6:+%,6psI47Rfm=84cEG91qrQ9hnJ[:JXe`;,L4h;c?Xp<)cju='/U.=]np3
>?kE=?!U`B?XR8M@:<SR@q9+]AS#FbAnPaiBk_<tCMR^%Ci+$,DJsH4E,fl<EcZ;DFEMbNGB\7UG^4U^
H[C-fI=?ZqJ:N0#JUrB'JqJ`0KnY57L51P?M2@(GMMmCONK&pWNfT6_OcbcgP*2#nQ'IZ$Q^=)-R[T\6
~>
<~aiVZHaiVZHaiMQEaN2HDaN2HDaN;QGaiVZHaiMQEaN)?Aa2Z-=`l?$<`l?$<`l5p9`Pog7`5BL1_o'C0
_o'@._SX.*_83t(_83q&^qdb$^qdb$^qdb$^qdb$^qd_"^V@Ou^V@Ls^:q:o]tM(k]Y(kg]=Y\e]=Y\e
]=Y\d]"5J`\[f8]\[f8\\@B&Y\@8rU[^NWP[C*EM[C!<IZa7!EZa-mAZ*CR=Z*CR<Yct@8YHP.4Y-+q0
Xf\_-Xf\_-Xf\\+X/i;%X/i8#WMukrWMukrW2QYnVl-GjVP^2dUnjf^USFTZUSFQWTV.sNTV.pKSXl=B
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /9 /Gradient get_res exec grestore
}if
np
514.485 704.602 mo
512.405 703.287 508.945 703.197 506.795 704.4 cv
447.978 737.342 li
445.832 738.543 445.778 740.602 447.861 741.918 cv
521.286 788.283 li
523.368 789.596 526.828 789.689 528.975 788.484 cv
587.792 755.543 li
589.939 754.34 589.995 752.283 587.912 750.969 cv
514.485 704.602 li
cp
level3{
gsave
clp
[-11.1874 67.1248 -67.1248 -11.1874 519.087 739.237 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-11.1874 67.1248 -67.1248 -11.1874 519.087 739.237 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
603.418 749.26 mo
603.266 742.48 li
603.43 741.518 602.885 740.535 601.637 739.846 cv
525.589 697.912 li
523.435 696.725 519.976 696.84 517.904 698.166 cv
461.144 734.537 li
460.037 735.246 459.547 736.162 459.653 737.043 cv
459.779 743.969 li
459.767 744.104 459.77 744.24 459.788 744.375 cv
459.789 744.445 li
459.793 744.445 li
459.909 745.189 460.453 745.906 461.428 746.443 cv
537.474 788.377 li
539.63 789.564 543.09 789.451 545.162 788.123 cv
601.922 751.752 li
603.023 751.049 603.512 750.135 603.414 749.26 cv
603.418 749.26 li
cp
level3{
gsave
clp
[-3.35627 89.8729 -89.8729 -3.35627 533.17 699.301 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.35627 89.8729 -89.8729 -3.35627 533.17 699.301 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
525.589 697.912 mo
523.435 696.725 519.976 696.84 517.904 698.166 cv
461.144 734.537 li
459.071 735.865 459.137 737.924 461.293 739.113 cv
537.342 781.043 li
539.496 782.232 542.956 782.115 545.027 780.791 cv
601.788 744.422 li
603.861 743.092 603.792 741.035 601.637 739.846 cv
525.589 697.912 li
cp
level3{
gsave
clp
[-60.162 112.37 -112.37 -60.162 553.607 698.122 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-60.162 112.37 -112.37 -60.162 553.607 698.122 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
596.583 734.662 mo
596.554 727.881 li
596.737 726.92 596.211 725.93 594.975 725.217 cv
519.706 681.902 li
517.573 680.672 514.114 680.725 512.018 682.014 cv
454.599 717.338 li
453.483 718.029 452.974 718.934 453.064 719.818 cv
453.064 726.742 li
453.049 726.879 453.049 727.014 453.064 727.152 cv
453.064 727.219 li
453.071 727.217 li
453.172 727.967 453.703 728.695 454.667 729.25 cv
529.933 772.566 li
532.069 773.795 535.527 773.742 537.624 772.453 cv
595.04 737.127 li
596.156 736.441 596.661 735.543 596.579 734.662 cv
596.583 734.662 li
cp
level3{
gsave
clp
[-14.4192 94.9691 -94.9691 -14.4192 536.729 648.801 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-14.4192 94.9691 -94.9691 -14.4192 536.729 648.801 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
519.706 681.902 mo
517.573 680.672 514.114 680.725 512.018 682.014 cv
454.599 717.338 li
452.505 718.629 452.534 720.689 454.667 721.916 cv
529.933 765.232 li
532.069 766.459 535.527 766.41 537.624 765.117 cv
595.04 729.795 li
597.137 728.506 597.108 726.445 594.975 725.217 cv
519.706 681.902 li
cp
level3{
gsave
clp
[-43.7545 124.304 -124.304 -43.7545 539.966 680.539 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-43.7545 124.304 -124.304 -43.7545 539.966 680.539 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
530.047 747.965 mo
525.946 714.402 li
505.063 717.756 li
510.284 702.842 li
473.212 705.885 li
454.599 717.338 li
452.505 718.629 452.534 720.689 454.667 721.916 cv
529.933 765.232 li
532.069 766.459 535.527 766.41 537.624 765.117 cv
548.974 758.133 li
547.948 744.607 li
530.047 747.965 li
cp
.639216 .552941 .305882 .0705882 cmyk
f
564.589 727.453 mo
564.589 734.758 556.804 740.678 547.202 740.678 cv
537.597 740.678 529.816 734.758 529.816 727.453 cv
529.816 720.146 537.597 714.227 547.202 714.227 cv
556.804 714.227 564.589 720.146 564.589 727.453 cv
cp
.00784314 .0470588 .898039 0 cmyk
f
343.25 664.934 mo
342.002 664.934 340.764 664.667 339.804 664.128 cv
283.941 632.844 li
281.898 631.701 281.844 629.748 283.824 628.497 cv
353.565 584.46 li
354.606 583.799 356.014 583.465 357.411 583.465 cv
358.66 583.465 359.9 583.732 360.864 584.271 cv
416.727 615.555 li
418.761 616.698 418.815 618.651 416.835 619.902 cv
347.103 663.939 li
346.057 664.6 344.647 664.934 343.25 664.934 cv
.0823529 .0509804 .0509804 0 cmyk
f
287.447 626.936 mo
287.233 621.168 li
287.045 620.355 287.457 619.494 288.483 618.844 cv
351.005 579.365 li
352.777 578.246 355.723 578.168 357.551 579.193 cv
407.634 607.242 li
408.607 607.787 409.072 608.541 409.026 609.297 cv
409.269 615.188 li
409.286 615.303 409.29 615.422 409.283 615.537 cv
409.286 615.592 li
409.28 615.592 li
409.219 616.234 408.794 616.869 407.992 617.377 cv
345.469 656.857 li
343.698 657.979 340.752 658.055 338.925 657.029 cv
288.841 628.98 li
287.871 628.436 287.408 627.686 287.449 626.936 cv
287.447 626.936 li
cp
.231373 .109804 .105882 0 cmyk
f
351.005 579.365 mo
352.777 578.246 355.723 578.168 357.551 579.193 cv
407.634 607.242 li
409.461 608.266 409.508 610.02 407.736 611.137 cv
345.214 650.615 li
343.441 651.736 340.496 651.814 338.667 650.789 cv
288.585 622.74 li
286.758 621.717 286.71 619.965 288.483 618.844 cv
351.005 579.365 li
cp
level3{
gsave
clp
[9.52579 57.1549 57.1549 -9.52579 347.086 608.856 ]ct
/10 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~%Kut8%Kut8%Kut8%L*%9%L*%9%g<(9%g<(9%gN4;%gN4;%gN7<%gN7<%gN7<%gW:<%gW:<&-rC=&I8R@
&.&L?&.&L?&.&L?&.&L?&.&L?&./R@&./R@&degC&degC&ISaB&ISdC&ISdC&ISdC&ISdC&IemD&IemD
&e#!F&e#!F&e,$F&e,$F&e,$F&e,$F&e,'G&e>0H&e>0H'+P6I'+P6I'+bBK'+bBK'+bBK'+bBK'+bBK
'+kEK'+kHL'G(NM'G(NM'G:WN'G:WN'G:WN'G:ZO'G:ZO'GC]O'GC]O'bU`O'bU`O'bgoR'bgoR'bgoR
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.52579 57.1549 57.1549 -9.52579 347.086 608.856 ]ct
clp
/10 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~%1NaU%1NaU%1NaU%1NaU%1WjX%LrsY%LrsY%LrsY%LrsY%LrsY%LrsY%LrsY%LrsY%M''\%hK9`&.fBa
&.f?_%hB0]%hB0]%hB0]%hB0]%hB0]%hB3_&J5Te&J5Te&J5Qc&.fBa&.fBa&.fBa&.fBa&.fBa&.fEc
&J5Te&J5Te&J5Te&J5Te&J5Te&J5Te&J5Te&J5Te&J5Tf&eYfi&eYfi&eYfi&eYfi&eYfi&eYfi&eYfi
&eYfi&eYfi',)#m',)#m',)#m',)#m',)#m',)#m',)#m',)#m',)#m'GM5q'GM5q'GM5q'GM5q'GM5q
~>
<~"9\i1"9\i1"9er4"U,&5"U,&5"U"r2"9er5"pP89"pP89"pP89"pP89"pYA<#6tJ=#6tJ=#6tJ=#7(S@
#RC\A#RC\A#RC\A#RC\A#RC_C#mgnE#mgnE#mgnE#mgqG$47+I$47+I$47+I$47+I$47.K$k*OQ$k*OQ
$k*OP$O[=N$k*OQ$k*OQ$k*OQ$k*OQ$k*OR%1WjX%LrsY%LrsX%1NaV%M''\%hB0]%hB0]%hB0]%hB0^
&.fBa&.fBa&.fBa%hB0]&.fEc&J5Te&J5Te&J5Te&J5Te&eYfi&eYfi&eYfi&J5Te&eYik',)#m',)#m
~>
<~!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!sA`0"9\i1"9\i1"9\i1"9S`.!s8W-!sA`1"U,&5
"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\l3"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,#3"9\l3
"U5/8"pP89"pP88"U,&5"U,&5"U,&6"pP89"pP88"U,&6"pP89"pP89"pP89"pP89"pP89"pP89"pP89
"pP89"pP89#6tJ=#6tJ=#6tJ="pP89"pP89#6tJ=#6tJ=#6tJ="pP89"pP89"pP89#6tJ=#6tJ=#6tJ=
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /10 /Gradient get_res exec grestore
}if
np
282.631 614.443 mo
282.656 608.668 li
282.498 607.852 282.946 607.006 284.001 606.398 cv
348.087 569.516 li
349.905 568.471 352.85 568.514 354.636 569.611 cv
403.526 599.693 li
404.478 600.275 404.91 601.049 404.833 601.803 cv
404.833 607.699 li
404.844 607.814 404.844 607.932 404.833 608.045 cv
404.833 608.104 li
404.828 608.104 li
404.742 608.74 404.291 609.359 403.468 609.832 cv
339.379 646.717 li
337.563 647.76 334.617 647.719 332.833 646.621 cv
283.944 616.541 li
282.994 615.959 282.564 615.188 282.633 614.441 cv
282.631 614.443 li
cp
.231373 .109804 .105882 0 cmyk
f
348.087 569.516 mo
349.905 568.471 352.85 568.514 354.636 569.611 cv
403.526 599.693 li
405.31 600.789 405.284 602.543 403.468 603.59 cv
339.379 640.473 li
337.563 641.518 334.617 641.473 332.833 640.375 cv
283.944 610.295 li
282.158 609.199 282.185 607.445 284.001 606.398 cv
348.087 569.516 li
cp
level3{
gsave
clp
[10.0932 58.2654 58.2654 -10.0932 340.906 588.666 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[10.0932 58.2654 58.2654 -10.0932 340.906 588.666 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
353.411 603.674 mo
353.232 603.785 353.137 603.912 353.118 604.055 cv
353.107 604.199 353.175 604.324 353.324 604.428 cv
354.845 605.514 li
354.991 605.619 355.167 605.672 355.376 605.666 cv
355.596 605.666 355.788 605.613 355.966 605.502 cv
357.812 604.383 li
357.99 604.275 358.089 604.154 358.104 604.012 cv
358.127 603.871 358.067 603.75 357.92 603.646 cv
356.398 602.561 li
356.252 602.455 356.069 602.4 355.845 602.398 cv
355.632 602.396 355.432 602.447 355.254 602.555 cv
353.411 603.674 li
cp
.815686 .607843 .509804 .368627 cmyk
f
344.456 589.896 mo
344.278 590.004 344.174 590.121 344.155 590.25 cv
344.136 590.379 344.205 590.496 344.352 590.602 cv
345.098 591.135 li
345.246 591.24 345.412 591.291 345.608 591.287 cv
345.805 591.287 345.985 591.24 346.143 591.145 cv
346.277 591.064 li
347.145 590.549 347.967 590.291 348.732 590.285 cv
349.495 590.273 350.281 590.479 351.099 590.885 cv
351.912 591.291 352.98 591.961 354.288 592.896 cv
356.001 594.121 357.834 594.555 359.771 594.197 cv
359.07 595.436 359.574 596.67 361.294 597.9 cv
362.602 598.834 363.531 599.59 364.088 600.164 cv
364.644 600.738 364.887 601.27 364.806 601.768 cv
364.723 602.26 364.26 602.775 363.419 603.307 cv
363.285 603.387 li
363.138 603.49 363.056 603.609 363.038 603.742 cv
363.018 603.867 363.078 603.977 363.208 604.07 cv
363.981 604.623 li
364.128 604.729 364.295 604.779 364.491 604.777 cv
364.689 604.775 364.881 604.721 365.059 604.611 cv
365.191 604.533 li
366.544 603.713 367.356 602.895 367.629 602.092 cv
367.899 601.287 367.732 600.461 367.115 599.619 cv
366.503 598.779 365.462 597.844 364.009 596.805 cv
363.257 596.268 362.797 595.779 362.608 595.342 cv
362.423 594.902 362.447 594.426 362.682 593.912 cv
362.784 593.734 li
362.911 593.498 362.963 593.307 362.938 593.154 cv
362.909 593.01 362.802 592.863 362.614 592.732 cv
362.216 592.447 li
362.024 592.311 361.816 592.227 361.594 592.195 cv
361.37 592.166 361.078 592.188 360.713 592.254 cv
360.388 592.307 li
359.586 592.422 358.873 592.398 358.239 592.236 cv
357.608 592.082 356.913 591.736 356.165 591.203 cv
354.711 590.164 353.378 589.406 352.168 588.924 cv
350.959 588.449 349.734 588.264 348.496 588.391 cv
347.265 588.508 345.958 588.982 344.587 589.814 cv
344.456 589.896 li
cp
f
346.729 607.734 mo
346.553 607.84 346.452 607.971 346.437 608.109 cv
346.428 608.256 346.496 608.379 346.642 608.484 cv
348.164 609.572 li
348.311 609.674 348.489 609.729 348.696 609.725 cv
348.91 609.727 349.109 609.668 349.287 609.561 cv
351.132 608.438 li
351.303 608.336 351.408 608.209 351.425 608.068 cv
351.444 607.934 351.38 607.811 351.234 607.707 cv
349.714 606.621 li
349.567 606.514 349.383 606.459 349.166 606.455 cv
348.952 606.451 348.747 606.51 348.575 606.613 cv
346.729 607.734 li
cp
f
321.682 603.721 mo
320.33 604.545 319.505 605.363 319.223 606.176 cv
318.95 606.984 319.119 607.811 319.741 608.641 cv
320.364 609.48 321.405 610.418 322.858 611.455 cv
323.606 611.988 324.071 612.48 324.247 612.926 cv
324.425 613.371 324.402 613.85 324.159 614.361 cv
324.064 614.537 li
323.932 614.771 323.879 614.969 323.903 615.111 cv
323.927 615.262 324.029 615.402 324.207 615.529 cv
324.625 615.828 li
324.798 615.951 325 616.029 325.227 616.057 cv
325.45 616.088 325.756 616.072 326.136 616.016 cv
326.432 615.955 li
327.246 615.846 327.97 615.867 328.617 616.023 cv
329.259 616.178 329.955 616.523 330.703 617.059 cv
332.156 618.098 333.485 618.85 334.692 619.32 cv
335.894 619.793 337.121 619.973 338.362 619.863 cv
339.604 619.746 340.903 619.281 342.261 618.457 cv
342.419 618.361 li
342.577 618.264 342.67 618.145 342.696 618.012 cv
342.72 617.881 342.668 617.76 342.523 617.654 cv
341.749 617.102 li
341.617 617.008 341.446 616.969 341.242 616.975 cv
341.039 616.98 340.846 617.027 340.678 617.117 cv
340.544 617.197 li
339.671 617.705 338.862 617.965 338.106 617.98 cv
337.348 617.992 336.557 617.795 335.734 617.383 cv
334.91 616.969 333.84 616.299 332.534 615.365 cv
330.83 614.146 329.009 613.721 327.078 614.078 cv
327.773 612.838 327.263 611.6 325.547 610.375 cv
324.255 609.451 323.326 608.695 322.765 608.117 cv
322.204 607.541 321.963 607 322.042 606.504 cv
322.123 606.01 322.582 605.5 323.423 604.967 cv
323.537 604.873 li
323.694 604.775 323.787 604.656 323.812 604.523 cv
323.837 604.391 323.786 604.271 323.639 604.166 cv
322.893 603.633 li
322.745 603.527 322.562 603.48 322.359 603.486 cv
322.155 603.49 321.975 603.545 321.816 603.643 cv
321.682 603.721 li
cp
f
340.049 611.789 mo
339.867 611.902 339.771 612.027 339.758 612.164 cv
339.749 612.311 339.811 612.439 339.957 612.545 cv
341.478 613.633 li
341.625 613.736 341.809 613.781 342.015 613.781 cv
342.229 613.781 342.423 613.729 342.606 613.617 cv
344.446 612.498 li
344.623 612.391 344.724 612.268 344.743 612.123 cv
344.763 611.988 344.702 611.869 344.555 611.762 cv
343.034 610.678 li
342.885 610.57 342.703 610.518 342.486 610.51 cv
342.266 610.51 342.067 610.564 341.889 610.674 cv
340.049 611.789 li
cp
f
242.413 747.447 mo
241.612 747.447 240.801 747.255 240.201 746.874 cv
200.322 721.692 li
199.197 720.981 199.224 719.865 200.394 719.208 cv
232.335 701.316 li
232.885 701.011 233.591 700.86 234.302 700.86 cv
235.103 700.86 235.911 701.052 236.511 701.433 cv
276.39 726.615 li
277.524 727.326 277.488 728.442 276.327 729.099 cv
244.377 746.991 li
243.831 747.296 243.125 747.447 242.413 747.447 cv
.0823529 .0509804 .0509804 0 cmyk
f
274.319 725.719 mo
274.441 722.418 li
274.549 721.955 274.313 721.463 273.725 721.092 cv
237.972 698.514 li
236.959 697.875 235.275 697.828 234.228 698.418 cv
205.588 714.457 li
205.032 714.768 204.765 715.201 204.793 715.633 cv
204.654 719.002 li
204.647 719.199 li
204.645 719.232 li
204.648 719.232 li
204.682 719.596 204.926 719.963 205.384 720.252 cv
241.138 742.828 li
242.151 743.467 243.835 743.512 244.881 742.928 cv
273.521 726.889 li
274.076 726.576 274.341 726.146 274.317 725.719 cv
274.319 725.719 li
cp
.231373 .109804 .105882 0 cmyk
f
237.972 698.514 mo
236.959 697.875 235.275 697.828 234.228 698.418 cv
205.588 714.457 li
204.544 715.043 204.516 716.043 205.531 716.682 cv
241.285 739.264 li
242.295 739.902 243.983 739.945 245.028 739.359 cv
273.667 723.318 li
274.711 722.734 274.74 721.732 273.725 721.092 cv
237.972 698.514 li
cp
level3{
gsave
clp
[-5.44772 32.6864 -32.6864 -5.44772 240.213 715.38 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5.44772 32.6864 -32.6864 -5.44772 240.213 715.38 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
277.072 718.574 mo
277.058 715.271 li
277.148 714.805 276.893 714.32 276.29 713.975 cv
239.64 692.883 li
238.602 692.283 236.918 692.307 235.896 692.936 cv
207.94 710.139 li
207.396 710.473 207.147 710.916 207.19 711.344 cv
207.19 714.715 li
207.19 714.918 li
207.19 714.949 li
207.194 714.949 li
207.243 715.313 207.501 715.668 207.972 715.938 cv
244.62 737.029 li
245.659 737.629 247.344 737.604 248.364 736.975 cv
276.321 719.773 li
276.864 719.441 277.111 719.002 277.07 718.574 cv
277.072 718.574 li
cp
level3{
gsave
clp
[8.26139 46.5193 -46.5193 8.26139 237.117 686.732 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.26139 46.5193 -46.5193 8.26139 237.117 686.732 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
239.64 692.883 mo
238.602 692.283 236.918 692.307 235.896 692.936 cv
207.94 710.139 li
206.918 710.766 206.933 711.77 207.972 712.369 cv
244.62 733.459 li
245.659 734.055 247.344 734.031 248.364 733.404 cv
276.321 716.203 li
277.342 715.574 277.33 714.574 276.29 713.975 cv
239.64 692.883 li
cp
level3{
gsave
clp
[-10.9561 69.8653 -69.8653 -10.9561 246.811 683.326 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-10.9561 69.8653 -69.8653 -10.9561 246.811 683.326 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
248.542 711.926 mo
248.661 712.08 li
248.535 712.232 li
241.231 716.49 li
241.156 716.535 241.066 716.555 240.97 716.559 cv
240.867 716.559 240.786 716.535 240.712 716.492 cv
240.19 716.203 li
240.076 716.061 li
240.196 715.914 li
243.418 714.035 li
239.625 711.918 li
236.402 713.797 li
236.326 713.844 236.235 713.863 236.14 713.865 cv
236.037 713.863 235.956 713.842 235.881 713.801 cv
235.36 713.512 li
235.254 713.371 li
235.381 713.23 li
242.684 708.971 li
242.94 708.891 li
243.036 708.889 243.117 708.902 243.191 708.943 cv
243.713 709.234 li
243.833 709.389 li
243.706 709.539 li
240.596 711.352 li
244.391 713.467 li
247.5 711.654 li
247.583 711.607 247.667 711.584 247.762 711.58 cv
247.86 711.578 247.947 711.596 248.022 711.639 cv
248.542 711.926 li
cp
0 0 0 0 cmyk
f
235.065 708.797 mo
236.159 709.41 237.193 709.432 238.173 708.859 cv
238.644 708.584 238.877 708.293 238.864 707.994 cv
238.837 707.693 238.548 707.391 238 707.086 cv
236.092 706.02 li
233.156 707.734 li
235.065 708.797 li
cp
240.289 708.021 mo
240.352 708.516 239.991 708.996 239.221 709.447 cv
238.444 709.898 237.617 710.111 236.748 710.086 cv
235.872 710.057 235.027 709.814 234.208 709.359 cv
232.247 708.266 li
229.427 709.908 li
229.351 709.951 229.263 709.975 229.167 709.977 cv
229.07 709.98 228.989 709.955 228.921 709.918 cv
228.373 709.611 li
228.266 709.473 li
228.393 709.33 li
235.696 705.072 li
235.952 704.992 li
236.047 704.99 236.13 705.004 236.203 705.047 cv
238.964 706.586 li
239.782 707.043 240.223 707.518 240.289 708.021 cv
cp
f
249.809 717.023 mo
250.906 717.633 251.947 717.658 252.926 717.088 cv
253.396 716.813 253.624 716.52 253.61 716.219 cv
253.59 715.92 253.301 715.617 252.747 715.309 cv
250.84 714.246 li
247.902 715.959 li
249.809 717.023 li
cp
255.034 716.244 mo
255.105 716.742 254.738 717.221 253.967 717.668 cv
253.189 718.123 252.37 718.338 251.493 718.307 cv
250.625 718.283 249.78 718.043 248.955 717.584 cv
246.993 716.488 li
244.174 718.131 li
244.098 718.176 244.014 718.201 243.919 718.203 cv
243.824 718.205 243.741 718.184 243.667 718.143 cv
243.126 717.84 li
243.018 717.703 li
243.139 717.557 li
250.443 713.297 li
250.526 713.248 250.609 713.221 250.705 713.221 cv
250.795 713.215 250.881 713.232 250.958 713.275 cv
253.711 714.809 li
254.535 715.27 254.977 715.746 255.034 716.244 cv
cp
f
343.854 796.104 mo
325.404 796.104 310.446 787.419 310.446 776.7 cv
310.446 773.207 312.038 769.929 314.823 767.097 cv
315.747 774.693 li
315.747 774.729 li
315.747 783.567 328.086 790.74 343.314 790.74 cv
358.074 790.74 370.116 783.999 370.845 775.539 cv
370.881 775.494 li
371.947 766.206 li
375.304 769.232 377.253 772.834 377.253 776.7 cv
377.253 787.419 362.304 796.104 343.854 796.104 cv
.0823529 .0509804 .0509804 0 cmyk
f
374.724 742.014 mo
359.973 740.808 li
349.461 739.863 li
327.843 740.538 li
314.1 741.474 li
311.886 742.959 li
315.747 774.693 li
315.747 774.729 li
315.747 783.567 328.086 790.74 343.314 790.74 cv
358.074 790.74 370.116 783.999 370.845 775.539 cv
370.881 775.494 li
374.724 742.014 li
.231373 .109804 .105882 0 cmyk
f
374.733 742.599 mo
374.733 751.707 360.666 759.078 343.314 759.078 cv
325.962 759.078 311.895 751.707 311.895 742.599 cv
311.895 733.5 325.962 726.12 343.314 726.12 cv
360.666 726.12 374.733 733.5 374.733 742.599 cv
.054902 .0196078 .0156863 0 cmyk
f
343.314 753.345 mo
332.001 753.345 322.839 748.53 322.839 742.599 cv
322.839 736.668 332.001 731.862 343.314 731.862 cv
354.618 731.862 363.789 736.668 363.789 742.599 cv
363.789 748.53 354.618 753.345 343.314 753.345 cv
.211765 .121569 .117647 0 cmyk
f
423.489 704.322 mo
422.809 704.322 422.123 704.16 421.614 703.836 cv
387.819 682.497 li
386.865 681.894 386.883 680.949 387.873 680.391 cv
414.945 665.226 li
415.411 664.967 416.011 664.839 416.616 664.839 cv
417.296 664.839 417.982 665.001 418.491 665.325 cv
452.286 686.664 li
453.24 687.267 453.213 688.221 452.232 688.77 cv
425.16 703.935 li
424.694 704.194 424.094 704.322 423.489 704.322 cv
.0823529 .0509804 .0509804 0 cmyk
f
450.53 685.908 mo
450.632 683.111 li
450.724 682.717 450.524 682.301 450.026 681.984 cv
419.727 662.854 li
418.869 662.313 417.44 662.273 416.554 662.771 cv
392.281 676.363 li
391.811 676.629 391.584 676.994 391.608 677.359 cv
391.49 680.215 li
391.482 680.383 li
391.482 680.41 li
391.484 680.41 li
391.512 680.723 391.72 681.029 392.106 681.275 cv
422.409 700.406 li
423.269 700.951 424.693 700.99 425.582 700.492 cv
449.854 686.898 li
450.322 686.635 450.547 686.271 450.527 685.908 cv
450.53 685.908 li
cp
.231373 .109804 .105882 0 cmyk
f
419.727 662.854 mo
418.869 662.313 417.44 662.273 416.554 662.771 cv
392.281 676.363 li
391.395 676.859 391.373 677.709 392.232 678.252 cv
422.534 697.383 li
423.39 697.928 424.82 697.965 425.705 697.471 cv
449.977 683.875 li
450.862 683.379 450.885 682.529 450.026 681.984 cv
419.727 662.854 li
cp
level3{
gsave
clp
[-4.61647 27.6989 -27.6989 -4.61647 421.624 677.146 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-4.61647 27.6989 -27.6989 -4.61647 421.624 677.146 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
452.862 679.855 mo
452.85 677.057 li
452.926 676.658 452.71 676.252 452.2 675.955 cv
421.14 658.082 li
420.26 657.574 418.832 657.596 417.966 658.125 cv
394.274 672.703 li
393.812 672.988 393.601 673.363 393.639 673.727 cv
393.639 676.586 li
393.639 676.752 li
393.639 676.781 li
393.641 676.781 li
393.684 677.092 393.902 677.391 394.3 677.619 cv
425.361 695.496 li
426.241 696 427.667 695.979 428.534 695.447 cv
452.227 680.869 li
452.686 680.588 452.894 680.215 452.862 679.855 cv
cp
level3{
gsave
clp
[7.00078 39.4209 -39.4209 7.00078 419.002 652.87 ]ct
/11 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Q4ErqQOs2tQkKH"R2#]%Rhbu(Ri28,SJqP/SK%V0SfIe2T-++6THX@9U*BX<UaH-BV'l<DVCDQGW%@uL
W%J&MW\4>PX"aSSX>U%YXZ$4[XuHC]YWMmcYWVsdYs&-fZ9eNkZU=cnZparp[7:2s[RpN"[nHc%\4lr'
\PW>,\l&M.]2Sb1]iY77^KLU;^g$j>_-I$@_I3EE_dWTG`+/iJ`b,8O`b>DQaD(\Ta_h(Ya_q.Zb&@=\
bAmR_b]Nmcc$'-fc?K<hc[,Wld!Pfnd!brpd=D8tdXqN"dY%T#dtIc%e;+))eVX>,eVaD-erB_1f8fn3
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.00078 39.4209 -39.4209 7.00078 419.002 652.87 ]ct
clp
/11 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~Q'R`%QC!r)Q^F/-R$jA2R[T\6R[]e:S=H+>S=Q4ASXuFEStDXIT:hjNTq\9VUSO]]UnsoaV5C,fVl-Gj
Vl-JlWMuntWiE,#X/i>'XK8P+Xf\b/YHP.5YHP17YctC;Z*CU?ZEggCZa7$G['[6K[C*HO[^NZS\$rlW
\@B&Z\[f8^]"5Jb]=bei]tV4q^V@P!^qdb%_83t)_SX1-_o'C1`5T^7`Pog9`lH-@aN2HDaN2HEaiVZI
b0%lLbKJ)Pbfn;Tc-=MXcHa_\cd0q`cd0q`d*U.ddF$@hdF$@hdaHRle'ldpeC<!teC<!te^`4#f%/F'
~>
<~%M'']&.oKe&ebom'GV>t'c%T&)&aD3)B0V7)]Th;*$$(A+!;[L+X/*S+sS?Z-7:/g-R^Al.4Qet/1iG*
/M/S-/hSe10JG7<1c70L2E!KQ2`E]V3]fGd4?Pbi4Zttn5X@_'6UO706psI47Rfm<84cEG91qrP9MA/U
:/=\`;,L1g;H$Ln<E<1'=BSd1>$G39>[1N>?=.)K@:<SR@UinYAS#IdB4tsmBk_9rCM[j*DJj?1Df9Q5
E,]f:EcZ>EF`hkNGB\7TG^4U]H[C*dI!g?jIXcitJUrE)K7ef/KS5#3KnY8:LkpnEMMd:KMi3ORNfK-[
~>
0 0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /11 /Gradient get_res exec grestore
}if
np
421.14 658.082 mo
420.26 657.574 418.832 657.596 417.966 658.125 cv
394.274 672.703 li
393.408 673.236 393.42 674.086 394.3 674.592 cv
425.361 692.471 li
426.241 692.977 427.667 692.953 428.534 692.42 cv
452.227 677.844 li
453.091 677.313 453.079 676.463 452.2 675.955 cv
421.14 658.082 li
cp
level3{
gsave
clp
[-9.28528 59.2107 -59.2107 -9.28528 427.215 649.982 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-9.28528 59.2107 -59.2107 -9.28528 427.215 649.982 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
420.662 668.986 mo
421.227 669.291 421.605 669.615 421.787 669.955 cv
421.972 670.295 421.986 670.627 421.851 670.939 cv
421.716 671.254 421.458 671.531 421.095 671.777 cv
420.887 671.834 li
420.685 671.789 li
420.21 671.533 li
420.105 671.42 li
420.187 671.271 li
420.597 670.896 420.761 670.576 420.674 670.295 cv
420.606 670.018 420.329 669.746 419.842 669.484 cv
418.74 668.887 417.515 668.975 416.182 669.736 cv
415.993 669.844 415.719 670.008 415.35 670.232 cv
414.972 670.465 414.691 670.635 414.503 670.758 cv
413.27 671.566 413.201 672.27 414.301 672.865 cv
414.782 673.125 415.268 673.266 415.757 673.299 cv
416.25 673.322 416.806 673.211 417.416 672.961 cv
417.513 672.926 417.597 672.904 417.67 672.906 cv
417.875 672.959 li
418.348 673.217 li
418.439 673.328 li
418.359 673.447 li
417.955 673.67 417.483 673.834 416.941 673.936 cv
416.405 674.033 415.836 674.039 415.233 673.955 cv
414.629 673.869 414.043 673.674 413.476 673.369 cv
412.634 672.912 412.233 672.424 412.274 671.889 cv
412.309 671.354 412.731 670.828 413.538 670.295 cv
413.715 670.18 414.008 670.002 414.414 669.756 cv
414.826 669.502 415.12 669.326 415.315 669.211 cv
416.188 668.719 417.08 668.443 418.008 668.391 cv
418.933 668.332 419.818 668.531 420.662 668.986 cv
cp
0 0 0 0 cmyk
f
432.595 675.43 mo
433.096 675.703 433.417 675.988 433.59 676.289 cv
433.763 676.594 433.798 676.879 433.706 677.139 cv
433.614 677.412 433.441 677.635 433.174 677.809 cv
432.96 677.869 li
432.764 677.83 li
432.284 677.572 li
432.193 677.465 li
432.246 677.324 li
432.492 677.127 432.578 676.902 432.499 676.641 cv
432.413 676.387 432.178 676.145 431.777 675.93 cv
431.349 675.697 430.913 675.566 430.482 675.537 cv
430.051 675.504 429.66 675.598 429.319 675.809 cv
429.087 675.949 428.958 676.1 428.932 676.252 cv
428.898 676.4 428.947 676.58 429.082 676.783 cv
429.216 676.986 429.439 677.256 429.758 677.6 cv
430.137 677.988 430.41 678.314 430.558 678.578 cv
430.703 678.842 430.743 679.088 430.65 679.311 cv
430.565 679.541 430.339 679.764 429.969 679.986 cv
429.339 680.373 428.63 680.555 427.826 680.514 cv
427.02 680.482 426.24 680.258 425.464 679.842 cv
424.943 679.559 424.574 679.266 424.362 678.949 cv
424.155 678.637 424.086 678.342 424.166 678.063 cv
424.25 677.777 424.444 677.533 424.758 677.33 cv
424.96 677.277 li
425.157 677.318 li
425.625 677.572 li
425.739 677.633 425.754 677.713 425.668 677.818 cv
425.443 678.02 425.371 678.254 425.435 678.523 cv
425.507 678.795 425.783 679.064 426.29 679.338 cv
426.823 679.629 427.33 679.787 427.801 679.809 cv
428.262 679.832 428.675 679.734 429.026 679.52 cv
429.257 679.381 429.372 679.232 429.384 679.072 cv
429.404 678.912 429.336 678.73 429.19 678.521 cv
429.046 678.316 428.792 678.029 428.438 677.648 cv
428.098 677.301 427.864 676.996 427.74 676.732 cv
427.62 676.477 427.608 676.236 427.7 676.014 cv
427.796 675.783 428.031 675.557 428.402 675.332 cv
428.766 675.109 429.181 674.965 429.641 674.889 cv
430.108 674.818 430.599 674.828 431.115 674.91 cv
431.622 675.004 432.121 675.174 432.595 675.43 cv
cp
f
426.691 672.24 mo
427.186 672.508 427.514 672.801 427.687 673.102 cv
427.854 673.4 427.889 673.688 427.802 673.953 cv
427.71 674.225 427.532 674.439 427.262 674.619 cv
427.057 674.682 li
426.853 674.637 li
426.38 674.383 li
426.288 674.277 li
426.334 674.133 li
426.588 673.939 426.673 673.713 426.594 673.453 cv
426.509 673.195 426.272 672.955 425.872 672.742 cv
425.446 672.512 425.006 672.379 424.579 672.346 cv
424.149 672.316 423.758 672.41 423.416 672.621 cv
423.184 672.762 423.055 672.91 423.02 673.061 cv
422.995 673.215 423.042 673.393 423.178 673.594 cv
423.307 673.793 423.534 674.068 423.855 674.412 cv
424.234 674.801 424.502 675.123 424.655 675.391 cv
424.799 675.652 424.831 675.895 424.747 676.123 cv
424.662 676.352 424.435 676.574 424.066 676.803 cv
423.436 677.184 422.718 677.361 421.921 677.326 cv
421.119 677.295 420.329 677.068 419.554 676.65 cv
419.033 676.369 418.669 676.076 418.457 675.762 cv
418.251 675.449 418.18 675.152 418.26 674.875 cv
418.347 674.59 418.541 674.348 418.857 674.143 cv
419.056 674.09 li
419.252 674.129 li
419.721 674.383 li
419.833 674.443 419.85 674.525 419.765 674.633 cv
419.537 674.83 419.469 675.064 419.534 675.334 cv
419.596 675.604 419.877 675.877 420.38 676.146 cv
420.919 676.439 421.418 676.596 421.889 676.615 cv
422.352 676.641 422.765 676.541 423.117 676.328 cv
423.345 676.189 423.468 676.043 423.483 675.883 cv
423.5 675.725 423.433 675.543 423.285 675.334 cv
423.143 675.129 422.888 674.84 422.534 674.461 cv
422.194 674.109 421.954 673.803 421.834 673.547 cv
421.716 673.287 421.697 673.045 421.79 672.82 cv
421.893 672.594 422.127 672.369 422.5 672.143 cv
422.863 671.918 423.272 671.77 423.738 671.701 cv
424.198 671.625 424.69 671.635 425.208 671.725 cv
425.718 671.814 426.216 671.986 426.691 672.24 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 
/10 /11 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Sasa) ()
%%Title: (Technology Flat Illustration.eps)
%%CreationDate: 10/27/2018 12:18 PM
%AI9_DataStream
%Gb",KBj26Bp\49*Y%ta=4,SVTm!Sn(kp;<;#QflFL89Ak87E>Tmhc#Mrg\&0HHY#.SLi6uOAK6;fm\(hWCgf;a_>k_Q"p9GC&G:\
%Li>qk-jl7grqXU_daRJYcq`1@Ln^i:Aktk!;=<9Dp!.!H;%D;s[o$qJg)GY@UJr''9:'Uq,eOS$[DmF,WKkWXd)OqmcMVE/n/JL!
%;Ff(A+r)S?eG*#_>!WDgSsSosbI)463/$ukAbQDs\*8om7XlB_SIWjV7[7p^mf(u(ak>V%%Fl)&Gh!7%<?ul8C.M"6&g^2;K]Vqu
%_.C%1BpCa07fD?SG%C(,CeD`6Zc$as:bW5]bA^DLJr<O9emWV7i`bi[ZQ`cnX27.99A7lf8)DW>nr*GmR8H7pX\8FRY1EU_hogTq
%W,/!A6P%5!=Tr(F<"3`g]ReQk!1#1b,a#tl_+h7:l3&AH>nd[8TW/e*::q+<K&il!CoN#`Jfa--WTsD!X:E(UC@HX=GT)er6&SCl
%DKUu?rr_L41^M9c]!\4(Wa>&mT3+l)j8=A$'%E:RH$d;,6:iQ86,.])P>^^%k^`(ZC0bBJL1!KG]]e5=Q$rk7Sh_DKTGc6T)R!kP
%l`r&LQ9dhl%:,&`_[Ju/We-ol,SkQ[mBLfdY@4(\%RDNS>1Lf2I3Y8MEOO>r<YCiN$6&quh%n5QNtqZ`8HR#):/DJS+N\9aIbYSB
%B`EUDEH9UC3NndLa>2E_/<C:c`rX_nH_jIDMA=q]5q)a=cArI'&QlH>./7#un[E)gDq>Fk'a7qZ"n*oJhGk85fCu7)CSpE":"Sng
%?,p]kNn&7-pVT`X$gUn1f!4-T27G-<Am&4Fhr/LTk.4[>Fg7q3iZ6Xi3kgZ!I:(U*\aO#3he.r$UtM!cN7aNa/iF1-.ge,R(T`@5
%iGYfPFG85MHUnkM`]?X)r[->dG-JtW(]MFhO=:$d>qorrY)t.19siq"/4R3i<5qip"0@6QiGYgXqcFV+M'gP.c$7?4Ktgbh7QhuH
%9qT[jNDG`K728j3s0*EiLqg2F-:gTd]>k)1Dm1/.(eU7%L,DF=nMgH$">W-UhgFusKYOc1dYPZ+0U]L+k->l_R%Z.Zj?lWK7E;:H
%G`UAlo0V:fl59UZGr@N<1@%"9)ljVN_`C=rW1um+2.r/[gINRg`bJ3!O[d>,eeimH*@)2bLKYa&&n<"&K5#Y1cCr[>H:O03.`7Jp
%1m1\DN;IF?N;%.!`]T];.%$)[2LVYBNmG:L*O,G-+.kYO<2S>Bp5D;=$_RDQ<K=2R[=RJ6ou;.j1+Td8VWjc``0s6A@r2Q)5F-K6
%lW>&bVi[J!4D%/Eh/LNqaK/n&<0BZGLT_[I-2p]+frb%7rDQ_iGPoV_6$#b17I_o*B,L"(pm(e6:%l&17\cINT5Co=nLOM"3:-,/
%Q2Q?tT#Z`J=8&h"A:MY'm%5-nj#E)T`8=8&m-jEsp51]LWiKmKk9F%k'=_bGm,n(E&l?$:K3kPQm@+"^UO/$=?4G6TNM:$qNpd"H
%roM8>W:WkDnM5u(cC7V#Fe/YudhJ/d9M\TC=hl0/<ZFq\S?sU&%sXVML%hR$b[Ef&'M$bL<O6Pc-t5't#_""X7&Qpss"1dn%SdpT
%KKl>G>;f0B9cSVDq`lQkjIp.a\*#pNI?QV_'U:Y4XA^EU*C)23&%N,X,RL+hkf6YN:Nr3H(m?sofN]50hmQ4D7,r&4'-<1-K.qFF
%Q!&`Y&GY"6(3!tG1e2h+e6'%b>3<T#Fe!33]eZT%Q]Yf'-S1],l<IjL^M`Zu,18jPR5W?H*&X1]l.?[fcm8-?$AnQ(NCGj'\rt#N
%ZOYEZ@<7@?"_mj=/^^F$Q?:Wt+uX'u]#[=\<&rXeL6[qgc/eS1ROWI];u4I*)ng:;-];dSku:p_ES*Yo(Xs3g#eI!TEO&Z(CE91<
%0]Zk:+7i*>*EiNUr?Oh$DSlVUR$B'pZ9Z>n$S=]#VM[ird18&m#qg$%H;m/$(;*Fb@2).9ZUbJNcZ+o</n.bd44=K`DlJV)qi9Y:
%;j,CF@8^LMiif));Rn##10SfT,ZJc3#A4Fh,o`__U(j"XE?5#6:l/tN9kn1T1gotFVPP5pUFO!1bQM'>+VRQZR>@S)EXWK"_;koI
%F<7@$"5[hC_I5[+L73YJVksY;'27.94:Qa0En;T@r'a=\4<.RGTJ;;Ne.A]i]$e@$`^OY`(E9H]Su*>G1FPX;\7EN)C^r::IRl!)
%"Y:G'-YcdrE1=srMT&_Sc&%?N-oU"hN)MN_Ksp:`+Z=9c#D?M?()$@5E7bL$k@l\L'[m1L[OJbuX4u,<"c!5Sbs<rP5`cep3O&]&
%8W]&^Jou]6AJeKM4C,h#'1\=;)=:Q1(V\%*pE%Te3J3-DTSZ:"X:+8m%**N:2%ncL)L]-?d4.MpK^<2.cW306HP@UF"3eiCfr-Fb
%?)++@kbORkorrWE*Xk;aPTh>),`K<rYmXe`9N4iY$EY?$SC=$\D7"N:$lOY"$,IQ^^OOS)QAZ;Fb2?5BZ'I!32(i,N;=@Bj+HSrs
%SJHh?Dq@$j2fVQu703kOQ<i0`EGiEaEWll")_r9_6<!M(MK[Bd?'E_E?!oUO#Hh3]5\f/^k_I7%GQNW"\_%okd[k=665e&U;]H/:
%l<6ra.XaP.0ag9lQ`sH4p8"e]6t8!JF_jj+8b4#8U5a\t_d%%:='R)6@aeqlNuBX7UtL2Rh'"u.mFQOmTUi9jSckd_,_^&<VQ?h%
%;=dXe+>.3+LHe@[-e*ZcnkA&j#^3.7(qiM0/8?ro[jU.o@Gh]U,7%==]PJ8%U61Np$$Us:8Sf,L$'>C1pRp])HoKX]X:`k*U2c*g
%*6EeEJ<NL)OcVarBA,f:X.;ZZ&LpNIRNC:K1P^WA@$HVFbMX)-->+'`D7[MHP"q-AB,?[OgMh"6E\0*O9+<J7#VgVG:$RF-a_97:
%<hId"R4#h>C3YQR+9`d%hh*&k-c>WH4YmtG]S/Qem$ePr1;DDJ5mM]]6)u!W3g9,T0ea#b`R%T%=g0p=')H]@^It>cA3gZ$j%[,k
%J"m/q[+6I+(!]8`1[`Iq%rj%m4i(8_%Q2<)@.jU!%`$X>#d/tl#.]CF`pBL>*m=s*eFiX=J4I2*1,fqOittuo#^n.#i?VQ;Gj'3h
%5*/8j=D8F;M-!Jn8'AU_D'72fMj.Vr?nt!#jChSAhc)RfNBXbD"i8fJMM49l644qJ_89OD;N*q.FAlcAW/Y9-nQ;-ar_+)%G`q;)
%Gq9OoR1o/K;+s"a'E3YodNo3/3u5ee2FK;-1F\^#OXZ[ld4E](6$G-)QcR;S^+tmDhst;]&p7&00STd5#5BjNRcSQ[4m"uXGtcnd
%!NHe.MG.khQlH#9f;X+e*W!UnDR?oXE1H(S0[BP0k\FuCDu`l@B$NqNF[@U30M)@%i!93$PX"EFl0s?::N(3#-T3`X`&:*fojF>O
%F[,a1Mq&u8Vk=ilC)7Y,5JG<A2`0,WE,c,kO+m`.CZrNf>&S.LFeUj!$iM.SKc#]F&NnfD_Q01lo.^]*HZ1Sd/b0k=3RTCE0[L"J
%A(\Y'+s1;uhe-E9M5-e8.BcRg\GlB*UH4.TSGq%73`bG@D87;7ilok?R&A3k)3/V*KSt[n,bM0<9;H:%ktpN^U_F!Y+[U!Zkp#k=
%0Eb?l\6N&\/(P5N:2h)g&U81'Vofbe/,m@f'(%#cPH`"4;bSt/J(2QoFr3m2]kD)ZX\"2-$n?V?J'b7^%'kI90!U1'E7:,SORr"u
%LitVsn0d%Cl^IlS2LdS)EYisqPLfJ=d"fJZ/YnH*@n,I-MXqC0)!Tf8X<=rq`f)+gkH\>4(R?-MN%`O#,t\6%[&?!2n$He:na-_t
%()%T7-ub0,f8'=0_5?jp<Z;jg-ZgD=D.bYDI;XncZbiLSp;f5:qUUJ/W'I);X&$Z;?u.7ibW*oKgS?t78j)s7Ysc*`/7]D<#[eQJ
%8SiC6]%A@QbgRU7J->#36V]>OnJH9XNi-3AiVEq7'mg*C;T9%*V96ii#I#E#^,*W]S[o?S9Dbh6ECEjF0JA[;_QaRY+!%nLEJg6:
%OC:b^`rZ:FP"S0/FFt7c76!i-!1Ko1eeq>n,Z7Z-+U<Md.s%G)ng"Q7AbqS,`[:@8_@AS>TXri<pe!1&Z]4cLg/+P8*;A4aK&3c"
%)hA`6SnTo(0r"n5Bt!XP7Icb.U3%K;_\qM0IPT.\RKfks!rt302G=/d<PU`:Hd`)(%`#o4Y^l9jamq-dL@a\-)ce6p7O6_00riKJ
%(adVLMOgVgck"9la9'](=uT2B.Dt*?5T'E<2^61$<\5T5p\iaFi7!>b%\5sG_$^G`W%aSd)3fMV*IucVRr'IH=TSr@(;ll"i5!_D
%=!Y.e4%=GFKur-.U]S/mZSFjBZHY5?NK[mYe-048E?-;T@1G;eN0`%nGSZe_QL?4!9@?X1H%G]32?>bPkVF8$Qm>22H&O[R."iY,
%*&<Lr7*W9V-2j.'*Mk>5j^!tf7m+hg93'?qHS$@hNRT<I/^h=nHVKOG1)37#&;Vs&\Xq_C(F$0/`L6Rb8*sco^qkOt#;%'b1T$FU
%l-NH<r0E8'*a"qTe>l*hqlYqu$a_^`ZW$r(5dsQ[<C9ZP0R:ABHc,Lk<`ht3;)^[^_n*-.c>qSb(X<V^b7i$Hj=6A)7BsM-(`9_1
%#5T&4pUT51[ufW$Wk^&^(',X^^;\[h1B+T$Za^m=7$t95Cm6b<N,<r_<?1."0p]D<^W'Pe4KO=+!8N2.%P-W6Gq.Mf86D%:;HQD1
%`DC[#A+?gDdubV+#L?8#]p$B/p)6E.VW8Ofo(<ZrK\fFcXg$_#KHl3(+s=a4;W^U37kPr[]gtZUE:Tl[,N/2;QuR-2TnQngH)(c>
%K``m2J14KCjbr,;r_mm)(W_tCnT"HGG=$#=UWAMgKpojQ"&j7Mik.nj!/ce.8J3Qm,Q13CFgqNBWC\3B3=g%M'siN*q%^9MVAOin
%T_/l,RhBCjN+bK3f/`R75.\o@JPDQ&EJ[0+:ap"^.0Zl"`(I1dHo:Dg]FBfFL>.#jCQDW1i^b>=er\PH1=JR]`IbG5g_?Lq8&imd
%"K<Z4W@4Wp(!]`sqd';qQ70_q[p`75q%2u+iKtdj1jUl%JKedU/a([hCKkMl#Z8?<l8I'@!rm)U(&@hOq)2W>PY=t;c&_IXe1EA3
%FcX&%*o45Re%l@!9@/lI@_;r+K,dT'U,-*&ag[s2"1j.(-?J:aM/mM2SD+sQ!98FA.WrfK.=`OC\Kt1+[LNWWHe/*cdgSH=(UPu?
%bVYU>Hg!,%Q#K9hABVH)%0L'pD.g-$#\2)WRj';`P3JXTT\#FE`q]^`E"c\)9ZV2S55EJ0'F`>KT[dP%_fYdanSS^N4g0Jn-dgc^
%Z-+M;7EOKM%sbRAIHX.pga+N&\^O&C4Q<E^BZ9U!/#SSsQu")Q7TY]\p/`b]k1@G;;EUn.L[i#sE;dsMpXG!8r8=OncN*ugXPZVH
%,d4O.H?]F;@`/-R-8S#a6\V@G]n2lqic!Ym%=VUn5Dd?CVfgX,e/F\ODYsaq3t==-k+D"8B2ijDU&b_'Fo3fCT7=L]pWTt]=r2)E
%Zl7c_DZ-="k9%ljV/[O^LS`:]i7*@)V7e)B1A7W]RR$+DoikO#-rl`eA%Ff%EHC!8<SKH0LWP_CI?q$2>,="$+WR#%$-F9%bmWNT
%a5(JXaO8T^IU]H[5H$Aq>M]"<E7/FLU.On_r)Q4uh<M4&1G_R$H-cP1F*9Wh9=7srZ;kXG<Qg$k+)jF_BLpl/_tpc=.u8PH5N28:
%?Sa-QRA;`S`p$^T&H+1m@iQ347C?HQ-=f(jk8Q?Sr+NQYHrXoj1"Pt127(Na$SE@"RtPZUBsIXhW&:"M!CS4[)"=o^C1]6'>,bhC
%$$7EWRulm="DHD><`BiYX.993-BW:rrQd\R=`EXtkhKm;.TJaj%:T'$n6H>"'TTqp3oqkXK"cup&4?O[X8Me6q`k+2\7>t.2^+-%
%,u=)C;3k`]<b7iqfC2I:OV7JqU>V/@#a$YH//3oZ<=pEg79*>n2,js-"kB@4CEfX<+m`%qULBUffp\fRF]"KI)-q,cf1k)L*=-@B
%]kE4VAB9L?B_[-5__rLY5FN-QJt&s4R]4a:&Gsd<9\8p\U*X!+-!Mjj/@J6q[NI2L9Jg,a*HR@Qk=NGA.l7?PO^42QE]"X[l72"=
%dNt_B&MM1K_#&52FP)LWNapOLd:G9u>q0-;,JtffU;OE]Mfa5\6N!$aPUWtj5[1R/$e:P[@(Ipn7B8s9J1)\;`:L[:kBX5nGd_71
%VIt.bVg5;?Gd8]jP71<q#C`tr.5X"a$;j0sVjTV'?Po-lX7;U81dde(_r_,DdV2_hbm?^CR$.a`FF_+AE7qI;i4!GM^j4%R(^Hj6
%"DPBC"0NoHp^N=K#4bYYBn1)oG-FX%QU4dK:ZId:Qbb>=/rO),<@UP-=RG\&j&_?qT3\+8m#pRqq8L5DE4GBZ7$SZ=,A8L;9RbAt
%FeD#8QHl!9ZOqTAJr!3/^c/bDDR*(*(Gn]<A0'MToR$jGd%FVXZ0=!qlIk5MSMhE_Zr@>r]3d6C=jd`8au!',?Y)s=9\(UTfEBH<
%,fbfD-cCiJ0Ld+<0ldV25TPZc[cV6UJ:WJ'.O.2T#ndXJ"ZqA@h<2ShTL!4_-T*FV#T#iq_ri/9JA16?J-H)_:e:csJ-saQYX#]p
%#V]Wd!Y#NG"4S9+$P_F+78S;\/5UeLZqUXD0R16KLSbAGi/'Tj3eeHWG5Mf801?[d!WO8Q^X2QDkVDCS)$'[K;8RfhFSXn7d"j<]
%lk$FdkYf7bfgXNt.*+*fLb;$0,S<7Xr+XUb.#<g(U`gXu$jfCH5ZSYV`;o.:+@XY$OJo,T+C,N?k^^#lOLbJ@f0B]Xcj!&X2#nFd
%!!5k)mLt68(gs50VM<HL8*.hK'tWlk^I4FPMaa6jr9)H286L&u6A\ie!<GWA/so7.qst?@3?jV7FMWi9Pira<,(QpoJ6_0-2g,Lp
%*<Kl,B8[lN6/!HS#,h_3f*JSmZ5%t."E#Za^n>fM\.`1\iemd#dA8.l#Ut>"r.6!O`$Ij=(gb#Nn1#b;0=os&+s$XR&$E$XFHQCk
%6">J;\mWl@5j6lX._ShiM3dX^2'rRA!oT68CBG^MeiaRD!e(c\M2@#Ji*0-H%1Spq6L]o8g!*jI]OgtI!1q=en5O_MPFr85$D7_h
%#+:!6+eVFo'j`dY.5%;.6R=`Z,-WGV.+fh>Sa_DEO./B>Y[Hr(%JoFQJTWQm7&G+*>KhP%dKhY7>d@ROZN(bKYIN*!EWaJDK,M0!
%Ws1-GC18Ud'5QPkoEo."'YnK,X%#2C#i]h"8?SdsH60J"a#l8j')3!-<CMKI3^k;ZgI5nAh9ad[$=!W4M[Wr?@opam`<!^((f(Mn
%2W\_.j!8lqed1?OQrjk3&r?=D&n"6.&Yg3&98)qFe:d9?a*+68oFOnXNV$52D$X0:9skV[N&"'=Y^;Jnh6I,pGWIWNCk3?I1:*7V
%X$KN>+g6ZDgh1i?CAnUb:*!qiC9Q=`R$pdI()n3B?j2DBjX+&>%RFWMbj9Ea3kF8c%jDuGp/(7toTJ+<oSYggOaA]YO\l"p?i7+2
%7nH[q3WY+,)l?T!6qIT@eH%9B$63XHn-oX@*ABZ!N)HK[d0;E#_73Km_NnqjZXkN%aBUl'Ne>R<O$1k+Dcac\nXh(b[(O$3?.n/_
%!C5V#@Bb(QLPrkP.KOSlk6.,4`"3M!rB1#bZsk1I(ske\^LVeIs2=C>I=;q,jme7%PU>bdbN>/109]b"op];sLnjN6i>717d%_Rh
%hIMF$2S(0X)\QGR@S8.cFG[&%@^b5Qkb$a^q;Qot$86?1U\Egjp0Pml9-%tciIt%i!;qPL<Q#_L7W1S(cZC[nEP0='0(^:k!Uq[f
%i!9`0BIF:q9iG(0RYpkM>?dd+`S^;Tn?(FE!Y!Y7@Be>GqLfG"MqOUgbU2n*/Tu\kSY#p2bZu=!llu//"]si['FUI*Siia.r.-;)
%&E/iG!mm&_YE3[`5!G><R#_iQY`FiG!as@\)=^7QMh-P?cW=!EeM++;"4j`aRRB_)K5`S>WF;5`UI9p?Jr.8sR*&7AV_Z*G_t_o_
%aB>@<R3g9`]H!is//BO1KWIug%AREjN@B#1LWIKN/J2P[S4+e0,et7hOt5b03A;6WAn6u>Vif.L8+%::eJrVXcqOU[E#1*Jcbp+R
%*Q!*?G_;bR_g."-7:\(qI>IK>X:&DP!#WL09(i-L+MpYcoZS?ul)*HFBlp-Y&K*uD;8e@l(ilm#d\VjRpujJ8FI@4gFKo4JMdkLQ
%Zn$3J'71q[AB^O%H3_L(3]h&n12$[)+NAkd_jEqKcq!,9&;,f.iM.m,$D.Z/0^1<fK-9Tj4YV]@3%brM\fA.Z6H>=53?Y>kXPGO[
%1ijM0R01n)TS&&'kX,td-'3uf#`)?q&B^Z1G)T1H9RoD`/nl$H)mHOk=PC"'A&cA1eaUZsOXS+u0c%o<,@*R:0N7cR/':2_gl3<8
%&W/\,@.E$3#&#8\p-rMH\)=P@%Q"Jf<8%gYaD^To4NK41iJC<C!dG=]INB$qX=2jK,Y@c@Ie^+u2=OM1S%>,]bDn7>0f6fC1/jO%
%](DREne=%kIj+pEQi>Dm$Y*:6K5q<^HN;_E(5?3:V4`&7Leg3T1um(_QqRjN9QAc89LOTV.Ja8`ZP5"'ima:=08EnSC6E5R%$!o<
%Xb1Z_(68t6')=h(b#)J7ied)TC13Jj3!XrF*l;0p*^Z54-AX?D<PoN5b1rorg%^CB:'a1ilLiS":_><I]TFVJ*E:f)5Thu73&Fg9
%DbSoqY(<IDSeZP1`aYndcnEm#e1@(.->JgiF"_?T[s@b'M`P(j@6'Bb_W7kV6dfW8M*qmF;ebhl-T?`D+d-1B:Zf^^I(V/,%lP"G
%og:+SMI"1H=G/$VCZ'C$l@fJPkDEXNHGnFLW$FJM_\5?f*S6d>94IfA5?*Pg:cn54dJF'q9cuR9GD>OAmEqjpEf?-\(gWiO`?se:
%QQ9?p=_SN'd%'_NF-T(%$[9<_HVc1rO9_6=A1^1?<&$H\PEdl#!f]:c@HeV1Bp</&kG/WmdbD//=_!^%g1oNR)'o\n4<?uQ@8%a2
%q'pb&4*69A^/l>d`3E5L$g;9E3)h(/[9UEPPl/caKe0qq`.!K26mfUQ^GP@P1PZmuK\U=!>\aq$d$hLt%6p!Gb'XR'eWqY_PupD]
%PTpfY>M+ci<98"R:Q>]'&#NS<fqN=/>"<!I`H=!WQQr.lFXV5MV6(@.f]pW7'3nVlWi@69n\Bk_2.9#XHqjf$a^Bk"XeJ&bemt%@
%<>bX=Ku:bm`M_O5R<Hb2g)W+d2r(+?DkHa5AU_WcVql.B?3NsV;;8/!m_$A[fknI(cM#]bW+VOeQtq)1SG'p9"4uKVYVFcY5S"rn
%NQ"?p[rYh<P4,&(O.L>8]TpPW$+GP$1DmoaY9g18i,Bt[Zs=Ed)k)La%1ERl6qG9BOp6R!RkPkbYseD\c)Y4"*t*89Y[2E^+O#c\
%'\\Yc6kL`eq3O@^)QW+'J+W>r*W7h)%JE3N^'m*"+AK(M'iqak>,G[BZTPbb'cl`L>ssXac,bFF6Ln%Y@4=/[*X"GH\0eMu5V47I
%[:4CkPs#Uq5h,Zer9FZ=J$pl1)ALO*nKANa<r#;t"U@keq_iG$C_rpT5CPn:5HQ4-?mX3IPlr:3T/IW&^eRS()<:k)e/CERL1f'k
%]a!iaVq)ib!d&HWMU&@:ao^k^8u,LP9kV"Z"8jL(ZLF5eF@;J$oc>2^Uu*`6VpJ\cg#.q5B*=$Do87j,=aH'R%nA>L#]'o.*/"!H
%5>">Gb'W:r5jpC!_R#dUd@]Y7fq3be9+g9fjQKQ3\;?Xo.lgdR]]@X1E`AIt'QI/IkLm!,%#;n[=lH=h3uTWF9T;e[M#:4A@Q`ip
%`pC0HRA[T*pJTu^/L3+@OeJ6-"qJ$%TBqA:ZDd:=PSi,Ga;^pQm_"_%HL8&sTBYHM/QWhV]IJ?dX%9*:8r;jLgMkr2>d?_R2B=Z\
%LY`]F##D@J4LNJC+;;liBYR,3?#%^9?TOi\qS[!#*O`5N2o?\`U+&+H+da7D.4-hFg+bRIb1_ScA@OCO9OY1D,sk]irWQ6[!%"/:
%iD8dq@(/JeF"95=9!i>(Zp,KQFpdt2`-234@rtdNkcN78WueAT3[Mqm?4;!UB?\4d]:ML?#i/C'S\daZBDKI!*-_9W/_['8_t@/k
%\+;r;7g`(sL3b74g!MpUg;$K'8Ktclr-HDeeiNS3?]UrU_?Tr2Aq08<UCtq#Y?JrLjXRZeN4H>F/H9ciX2E3T;Q&!DSp*7^HUV%h
%MKZ%#lE+"!Wn&Z%TM@@TiR'8kG'"CIFai6r*T6'8E.)FhG]X@beh>L;^6NG=?L')>?=%c/e3anDC+t:Ein@(io=\>l>\0R_f:*O1
%=\/?9!u_-_2@2T'ORQb+,hT_AG--$i3g7RI;QXK&"Y3<*Qj.u-0_&//j(Z(Im%WqnbWoF5p0'@PAdoD8h:?k\(=^ODGj_e:A(_K;
%4uIr3PL9flh-(SU%kCD5S9j5*;sfg)+aAU72V#\ul-,m6WS19<9Q47V'6[\s#C\2ug''(QJtG4!Va[+<T!E\:k+LKYIENn@AEAbX
%1Ml(!W/6Q?al$\LBI)_'Rf-0Ib]0E4.L/'%6cKuZ\pBZrY!205=03"^a>=q.oEZ>Wkl_l`B$`#M)QaFT`)W^O0D)O82LQ,uK=UoW
%=cfsFIKGSCi'Q)?6b+'[-P,<NM1g-\jjZDWqeq..(Te>FLU@qXC-)sg"qm+)F2'T"bE+QLdo\4)L?>aG*m<ZM>TV)MZ.u.D,,pJ8
%b@Ml1:1CbVGlaYMCdcKr4Qck)K%f`pWRCS@X#K8)1#?>356\S*Yje::]#,)-*^cJ,*cnqlnUb]0'$_k'OHZb0AM7Ghe8;[qV7JHf
%C:!:dB95n8$R/V`4"@:A=dgg=>ar$erQM$<j5QdRF@KBM:L_s5D>euuRnG8=&FHKk7ur`&/N7F(f#IHbiSdjQIJHa`P2bQqVF=b%
%)3bZC_t7^cfDZ1k3niE@7B%7HQV6""Pc?pTa=[R#+O"`*e8cN$G,J<c,-Chk;km.4:13UaAtpD@6t"e\:'6N!9b]CfB\&qeqCp%H
%a28J<B-QAc)9DU1e:!:n7^_++bEh*jqgHpQk,,`1(YlQCH87.P1[k'3R,OG.4b:RnFn/gu=[[cKbJNqVj?ZZ`=D<M\c0HnbIm$5I
%cQ\-QFJ``5Am5a;()iEOY9St38Nsrt5P&Z"XkKIe0j:5=Z.,dsY&8hd(1$f5095W@"Ab3FSHMK\.FA$dFVu;LkL/,,NZa6/O5E!V
%r01!+b%DhWdNY7Qd5''(lY4U;qDI;)9mcWYD)?!&.gZ-@@>?B5gr:OcDF5mapo#l1Pbjk',@SRU`gVg+.Otl9ZYkF6BUG:9Z;Rfi
%ZL%P9@p$;!BJm!_>Mh4f;DT/E//F0r!dJ;P+N^^;f-5Y@0*e\K"g@Sf3"MMCK4D6J=c;e1Yq/<(VdT*,`rBX,R<`#_i%WHjX_70M
%kJ]ekn-9Y<&Cm:7THM.7lhgbe;j#;.ZQVnEb'FDD]#W_.4)<..T,K`9TN8D6FClY)DO/SC$p/.j<N0:8C<&Ul-teJ,qjU9;5!-[E
%g>qo!2js5Oj&OjY>,`Ls"SL&hWB$;<c:nVVbHTMT(Qj_+KU:'[<_C%G:GBK,ir4TGB,MS"J#Q_,-P'f4@bt!C/q/\$IhYGt2SNa#
%XI6PX$mFBl>=SlAk/N%so'tRdiK5FmAo/>%%jP@ZCUIt+G%stJ-AJZ%aV5;8WDSu2&$%W@;G+@cV&pSr!OM'U=r@d2eXRCH=pB!s
%=WY)jC/'\H%'Fe!MrWW\Be[252/]]:4B7jd*Nak/\ae16.[=bHqCP?*'N^h@<V8gE$VBH#pSL%3bX%,b7-/-F<NF]';MNM_PY8FT
%IO!%V!tnV378sJ`+Xsa:n/"L2Gd4+2:GoF+eZ1WsP\of3c!UPnbdMEO-W+J"5V"M)8X(bobZjof5D_-gq:SGR1@qrg#U`KT&2?,c
%Qj#^2ZG>@ER,oc;q,rr]LaIai3@AH:r]@1+m%6]q0>^kV/4@_,igHE-aj6^*aHEm^B2PK)^fcmqn36G:m38&ha[3qY-$/5I/4q8.
%RX+4$KX3(0LmT+lDFVpGbel'X4J&OoA8i3T`\_6eh[e&VF:9gh`;Dc<@t"RN>A#\8)(a;/$glb+O.P6Kp5@C*o=06\8X@WEPC=;7
%iRms)Ao_.g's?d]Y%;!,Nb^YXjg[2b\5mE38a`bCmb050>(B56UKW[mPG)1JXQ@`2NbUSS/IJL(GD+7jnRh_^Jm/Epr22FQF#09?
%N/ZPN19_l[UYLfSc02D.:Ja-SQ%#5T_M8+K;:%(g87YU\b&f$d;0Q2CjkhYSJP!!%VD7_2#5Q/@VFJ]05.j>,,+^f>HAa%>S$FG5
%)Z1?Spt:>pn@AobKEXEg?*.1[Me[\8f@ZtMYSiZd?7+VWl;!8Er1Pcbo[&qJ'-I*,T!5bOkfYqml9G'^QW\Bh(@-kcca/$CpT0-"
%fuTPMA,LWK@C@m5UXdT"nP?fE2#EmoDqm/gD=C71\f&66IW"X_W$]dbSsUISCG&I,6Z27:fR?Ll**?oi;/6@SZ<7(u'TG;7*/;k/
%U-Y5b3=J!0Q(gR4(\!uZeM4D*5?DX\DgK(RFE4+XC?Ok/k[\[ArmQed4DmP\W3l@JrUNb\c,BVM,!6\thu?DJR.(%bj@m;fS+$C>
%qnF+&E<fS]2_uXj^?;!Sq>MG8(3IlH+i!4cht(^/HDWXYo:<_e,iA4<pO$UKh.GO=/(KQ9DO,2QR<e\U9Zc'T^lP-hCO@4":p#%h
%eU\(nAUFi"#/Y[*9J+i=.]hZh?RLr84i:6=?$.*/LplVPFKr$geDf0jlVb37!ARPSTr"f&>aK&>3QO!eH%t\C_NtH%ITs7nD-jZ&
%TY:a#<3TN-=/qUHc#;-%/a.#ZK$%]#<N6ScPKHg:H0QqVS`QiW"Ap$ViB2TJF_=9$1[Kj\r`?etG(tEd?V2kXc"ZF5Sq3E)#(L4.
%e0O<S3DJO6.GWQC_j]lD'T^3tHecL$;XG8GA^kT%AQZWLMfkm<]Zimj[/:;?qim*KA0?g]licR=r['EQ3Bl3W5>CWJ-R(6^OsaT,
%`(Q\Hq(F""Gaa=4??d6?nh5:J,u;27M3g?pOsaT,`62C2?>:_U'(^3g+\s4L-M+hrEm+WW\]u<lP^8bn7+.fXU387)A,4"hAe>=b
%iF*C&BUJIJ9k8NG_lQ(=,)[FQrF$@tp<=E,cfNIO\lc"V%SP?GC$BnJ'_@)RjGW'j(RA32*:kO4c,Sb1*IqdO?(<SMSt!,BIfe)K
%E,hDgrUpO32LkR$rq*%$WN!RXG'm;i1qkW]=7>2\.E\.^phtR1Ir9Xc$kGVH5L)G]j2pdZOd-@4<(`FQV.3YA(l"P0)ZH.IZ_)O8
%C0Y#NK+;'P/#[!3jP+(q1i<5BB`'O'!4S*Y@Klq@-CNc$%5L.7aWn0<LsRD9>T0f>=$a9Y6W(g:Xa$"tKq.V^8u@ep]\^#O=dQK(
%`+8D7VW^W`,9i%E4%5c"c=8EB,Gaon7\7YfmlZ>rk:pT&!B(`:O-,-N4HD5'O`$c2R$X'rcXY0KN9>JF4HD3EGmoYY3i,N*?1Rc,
%&`U-T<iOk'eQt)4=jCZdG%2C'F[$V(b.m^.cZFtFKFCEf,3C4SXuDA&eP:Bl_D;o_A%e(@/^q$O;RNDkS63l%A=iBj47HIjf5=D<
%B*gYHl;*>H/5K9GGAdrk#JXi5=L.Lf_YukbBP7F=cEeW(k7J(>^A4PQaPp)SAfMdD>)f"&Q9s-!77mL6T_u>dq/_1;'2_ofU]97^
%K76n]kG6inn(*$@o9g<:']@5^Pe(N=4incVnf'0(Tb=2b\6'!M16F@?#JRL*1?6EgZB-d;LV;[nqJ=f^b3(4ER;XKa?rCX->;gES
%#tRma`h&MR[^`hmljP8@IWl\lO6(fl,4]D"O66"H/s#.,Kq(8oRjA^0.[nQ=AED4o,"-J[GW[O<kN44bbO?@-3=Y.,:mQlX1Q2lj
%31#DAGrRaPiLI>YiER^Mjs6I$QPL^:b=9G:LNKGR7cgpUb(?^?4LYUdgnK5'7)i#7carNsfQ/>oKJrXI-1^5/k0M(QUut?$!"A$$
%aI$\o\u:1lb.a-bj1JDB?Z-:QW6m/]X.:=ORF6fVcAu.p/2aUi/R?Tqjhilm;]4he2`(#%n`J8WZ7=FQX?)P/mq1^gS8ER;U:VQ!
%s)5$<GsZgl$0bU1[fpcOZ[ZWMXCFM-9'4._^L(RK"Ef]R48\lQ,r\CsDhDcOQhgO5Nm"7m^3$CK$rb,FeSWgjS^Plg(egb:H<X($
%\dV*7g>1=KW>oF`>.T%"2/1WB"%gVMR*u#72r./sB2QofM4#Jq&Y9H.B6Yn%:kQM<Ar%+CVsHTm<J#h9CqIl+^N1TP9m_7fah>56
%7WjoBdqe@Vc%mJ60<D.Zl3W.O4+Sp3hdgKoAQW0RfbXU%2X8+H"NF/VVeC7DU>.-=IA66F3T`4^f1s_Hh]"f?^<r[G;dN.)02Hc;
%+qeEg0Wp2uM'p8nQ):B\=_Plco[d$Kq$\>;orpJ+)Pl&P_m%2VUhET%]p:4pq:=oE5dS3XeuG:Y;KZZK233Z)WE&=jh#s.[0-agD
%B+`L&I<!K:Yfut'QphLk^,T_e_lPMOf`??[f>S%@i-]Ccf>a4a)s8r.S:B5MX?&MZ#NY&<*kuh5F/]`Zp^Ee6qH!-kO%Yn]jaWtr
%9=2d$R@T&89D`!;53EG'\g]ph)4kUt(Dnb2,/4>qMb:uf95h-b@T[UkE.6pcXW;*2*c^IZN^)8g+26GNAS\U]'8trm/a.u1nn2LW
%[LoWSnF1&h+W9U(n<AmhQXuTm3=#@I->(s!-h(me;Uso;ZNN)Q8CYaj4io]K@5j*h0U]5k4<u2oam_%%\M5-SbBJ'k%X#Lir\?!M
%EtPeWC28_&O'.ZcVf\M!\oX")P_BN[E$G("f(<IPp6<tCn(,ZPEsX(LUgsWr&;<PSZ^k@GVQFIYie*XTe\`OEio!=Y:KjT@q]a3B
%.EnI1:Zg3O]TY8DB0kZ(n\M1#I?%s3qT)SWI/\6Kc*#Uf#j8W#QliU24\%&QdgRT$&u6h#<t`i:oh+jf85uHpdFjFIr=F:Ka4RKb
%E[SAuert=Wr8U6;enls]cYdlcnPRhR:mC/9`qMOmL"`hKf.#&=!iF98#d!)k&D_h(nC4RAibrj@G-=Ng]"k?@S0)tck7Oo(2RqF[
%Vc:C%]NLQJS5Qt&:(>`g>R.#Can/*jTZ&Fboj@plUsV10b)KFJW6egNOg?BS''[Z%5Q;:KBCP<sP^O?I@:+9Z;%tL0_S%2,#Hnm/
%*d'dL/R(tl'e'QMN>a$(3\7[""3GRu6+o%.'r+?n*mtbD)(8&"4RQYQ`(*bb2X6QF[53bnFQ6`(&1He8@N9P&oBcP2Q!O;#M;L<`
%V-ACK8!p4\Q`X/^$K6LXWA'`lC1sKA5ptu]@2)[4=.mp%1gSZ,8F3g,M*3mp8gr*R81$TgdqI6=W-2#8(=WjEPsnc[KcpcV'`SK^
%?(;;7)1J(3!8J>8;p2F-a6jqZVhs6q@R2hF;oM/,,Sq^n2[-0'C5OG$aIORM0]^f+jN`lL8+,Vfh3+e-1'+k[(M$5FYnV:YeO1^=
%mMrfn6+;tDG7NFhFAEdc,u$9/\eVcK)(PF8"]^cY*4L"E*erE]NnZR3kI<YuDAN`NLFn]P@pLulI%tA\Kl9X^Z".sF7AqIX?a6UX
%]IDY@piE[b_:l8:Yg1'G#O=st=tt-L5QitFTd>A(dkFc*92ld;)rF1)5WQK>6QDG'9so#KcI)KSBPiSd>3BRiU\2"g+UqAt^f)&.
%Jn:=T,"Ml/e`8h?OotG4i0JEAc@J%^mRc5N&c?4&&g*:5M^H,G:,T\l6J'uOPq;FH76UCKF-sZn9ZoFik:iIEoE6lH'9^[MG#:f!
%'P<UMAoj?a@<Te-$qW<5$i?/VXe<k7+\2c*1Y)DB7h4ARd!^:AW\hH9%WMG<&9q'V9B;1df1ZA3G,91"#[XRZ'LEP$d_macDAGjp
%-J6+BXa=3Q6^8e$L?2AFO%u^G=pFqg_PoIeeQ,3LI;ZXODO&nqi!Y]#4?<gA;!Y./qB)b<:pmO3d4DPkK+F6Oe;,16:?mS4R@$OM
%0VoE(i+F@a0%\bReSn^ToQ33k;&$pR8uZsh8(>#@eOb1"r4H&P+i%g0E#&ZV7MpRbjeZjso.c*?a46Yk/On`n-?h;'9%]?+KG:Eh
%IH+=b!r@:lZ!L"L3e%"IljlasT[O2a)2IAgb^90a&TlCf[-1q\+'47%DuPNn9AfO9O2LN22D(P-iF>4Lm7Ai7KFR5_DonQR(Vt<(
%-Zm"]^R%"C.m[B2$p)JY)U`A:a7?>nQH+3NhPt(.I)j[;3gRd0XPBgcAUMP\XZA@ca+mEkrK3+9p2l-Sd,>ZM`6MN#Z*DH\I&r#I
%ZCAm!DU'1Ym-=Ts+19Kp3c"p_IBQN9h>g'Y;?om,l0M8LJ;Ao/VB-]Z"c9/"%(JIu)(eZFH:lAqe]f`cA_=n"QHhr`$tng@q0p#*
%p8uhZDiT5Y%TLFeA"P:gc).'2F7*12Dq)fl0*pjn)Wg:XP)2nAe[:efn@Vr.^kBaX?PComSN.0@08Q&*KI3c"8u;<.VMooZd*c&T
%<`JTdMO?"?Mkm8R#a9nX`jb<=J9>KliK;E+\(tcRbQ.S><YaG(QdF4%2&,C2];GQHG&oeFCI\<jq(.g\[kGJAJ:>fFP.,5Wo&@Hp
%-&Mk''Vg'%:pR9VlK)"m)iUfB"Fa",AJHc>)Gf>dC8E`QCM_H&nsV@#?UjRFrUMU"Kc)%K4X3s:^R'rBn7+qdMXn#>krE[(^sCX@
%/ij6>lK.f=MUH&3)pO=76!25MV!?mh_//l\Yggq94DoaGW<1Ar0:7^ke!%=Hi>IhQ3gZeiR_R_j.b3sHE"oYu[4Y787NL0oOsEFE
%)=X3.9u4#a=pFYm,oj@FG0gg6JR>eK64Li;K^1[P_MrG'\84%6c-^[70TT*Z&C*"!%[.0pVFC@cp9#_.#OO&#W7:5<Xm5p7Fdo%S
%2c7LmPCmbN#u_\i8Co[ej$LR_V,lcl;/0*a14JJh+Mk]7hTLb%*IP)=Zdck\"pZoa'qnq3?]_\Eb>o1RKI3b*3P;YfSAEjh'6W)f
%Z5$js**8D'@O.4PI1(^li1H$+XAh9Xo4kD]q%4"*GM96&H_pRM[r`JnLQ,oA-%0I16sE((;PhgB9/i^@Fmm9&bsnV??E$s71"?QK
%=D:eD]M&e/gDYGAMi>^5($oh9&ZO+WXg`sqW<oHLY2489V1`/H6b+(0,NcH\$5\he[:lf;DaCo9S3J[W9(`)3ICr@a.G(RokT#5l
%Im?u"0TGdn-=ECPC-<-^Zl_H6Fu'hRj'0lF@V3+*_`=NV,6]:5bAIWo5hHIY"gn@20PDpV:n^^.6^dDm)Sgs"T\6HTA*0qLgiZh\
%VVMSOlk%%l75LrrV8K[AVp03XHWo]b^@!l$V&BDA44S^LD4"8Kg@\?dPP7j,,/p7NH]O=/NBQmugPAPF`tIZs=<'Z8:("cYDP%O,
%AH>bX'YYsfJL\:1BeJ#EUQhW%'q4DCZ[)23BsNrRj<VCElHs38WF"P.58)pXX$+rP]>[qc#kbUJZK;l4O#&SDeK2P`rlPIN`K*sK
%QK/m`Q^q]hrkpp/bq^tiS0k,ATL2aDMB1>>J9A8M\k'/i#YnE:GA;g=l\e_&#SD)r^K@&Y9=R#-l8C.Oi"jl.fk8^6N9ulV)WR7u
%O-:<JbuUNa""RWM##9ZVR[lpX''c.J,HJ6cdCWhHWQ]sT;0+-qjmNZX9u1?)?1le7A*B9!3A@gG]rWTJ`F1VqU?=Z2(gjUh;6:")
%.[JfOe]pmg3MnF0eESoC6.O/d<h\<Ij*;A]1e(1UX%!AC:8\._<,P\CN><H(3.>;\$UC?J*"]6="09gqOQp\54E4brAZaH5>\1&4
%D8c@@QT*M"LdPRP)f8,FO]bRKSg3NPW&f1!.S?\]g-Dd\\mW_f\]GQ4d)e2^6E9^:`jg>s`6j]eFii5s0=BLYm2g$ET7RF&ds.*J
%eW,b96ffRoA>l(d$[l^eRo8R`h)"X2[1aB9^2e8V)63Gj>b>sflCC8<eneVKl6D:tfe/pb"dmXX,OKXTO:^7$3n-m,\p[TYBbjm#
%+@GJkTW4?Hn-CLa3(itlK3#Ll,4kV#o\$7Og-$3&%:VKN$Q]%dHc4k(RmIrZP])#0`5/rqUN7/1!s:Oo$PA#P&L1d3^9EZ*=HdDQ
%@S'9?cBl?Z!hcLuk<B*Q"^sr;Le!+Ml`&[]YXLO2=i6Q`+DoU+SA\TqV\k8l\Gi>&2/j^+-Yi#5d(7H*KKuAQq+."_mB&ib9cWga
%[c44hM:H@lb!/@0-rhbKgETi.PrdH!S>I23s6]$SkD2``[pp5;<WnbAk0<BH/Y.HXg>2@V2J"S&eIp:+5[.uUVh?50BK3'uQ_d)4
%4qq;=O/n>@<0IlH9@:BWWrYQV<N-V<P)5-KeTtWW)!!XW;"g_k#,5h63m+XZ)NA?SPYXS&g7pVm2(IEuJS\-"0fI:\]3?qL":(r,
%Wn4#)g5'KRTbsFcTr6);$HE>/1cU7=]$pcYr31QrH>rXf7JJ2?M^`X_8G`>Vi))0hXOcD_9:2cu7#;r8'G?7iM:7];M35Ud^,W4J
%8cMs7<U!5_M*o_uK6uR"HFk%2d19S)com+pjDpJJ@(l8V[0^8:IFRhJoi_>OX`f5)O':DF.V98b;+<&fa_-V)?#\M]EZ@U0TOFkn
%lWUn&3cckgP5DY>&1"D/(J;(FXGb4,!ohp+U"W9:4o1Pk`PP%optE^#Kb936SBSc3Ug\>\\2@^j@jf/BQ*XJWqQ#Zf$ofZ[`9bOL
%7d4F-fEQ.UC(rKC"2fp?"dPb;NqY6WJO*n*iqd3h8`OP9WS5ONX[X2Z,Jj=UWXhD/UaX7YO8TD(dQM9c:WXcl%&?I++SHaIQKhAf
%q8e3N1YQ*^8iI%&P2oAG?1J!])@8Dd-He4ZOX<7%2j7-6pF[6RJW<TJKXC0.mU,6jjLFI$K%-jtDhD5qnU7M0bD!4shBX+)@Shj+
%XPE$j7lgO]r6N)JLjdo#NPQZ]6N3mKQ#Y.qVh$<"0__ML(>Mu;`QLFT21AODj0'e"8ub`Xp^`^dd0lp1.Fh$$</h!O>Kf4!LEZ>Z
%qO!,8'IVp=18+r7N@3^24HY!%*iE#dA8!Og0JV#7IIMdQW<5E'`lkI&@Tin4_&0'[PBeH`b1JM-/=WsgpK:)OR.&V0"oKq(,X2$s
%,nE(!o_c&o7_M[5C,Kl1YOT<ONkIZ\f#+#7/.[Wq_o=d?dZ:ok/oH<pkD^lA0bB2Z[Kj1Qjho/_X7O$P\ir_3gP3p3j,&^$UA/[c
%n\GR@1S*/q*Kh#VIK4-01=4?r2bo&Spn-3%mN"F5JZVe4%hBH/j]:ESeCcAN#bnGcaX$$pG6A*sHmUq+1K**CI,[Y(7Q6R:To3,D
%/g1``4D`NIOXE4.XX>>lKjcc$hCW>caKdJ2ol@/rBW@JU9IS<HXccNed'#tB[nm:h5ZTHVIoo;`3@[dO"SrNaGiCM8?$toBD;Xa_
%oQR;OeHg(`'26WASDqK.G`\o]iR13&8I7H$h"uE="PGpos%1GkMg$J6hs],]AT@/SD#-%[=,%h<)qr+rr`J2*p)J9Koh)2`aTs9s
%f=b%ukA/%.id>L,Ths'.S`&S/HZNLH<GS:kbM$()4oks3a/:0&,0rN;Q;=X`n-,2`d('Jd^1/O@5k.5&D;k@l:`%i^D^_\b>sN,,
%:qKQ$W+SGrNAoP.>[Y5.P]9!6eY\AcGFQ!5Fo8#^'q0[E!\@7Ng)Q''dpS_Qikoi;Fk0;Y.+4Oa"%OB]5mN'<"$7t;6C#jWQ%W=t
%[JPO<ThEWWfF_<tgYME8:3a89d4q'!1H%!1%of\>ZYj$d'<8KpDZ(KG#Z;N-30:F3cfJ38RF1`%2Gd/T9A02UM)%c68#@t<G-Y0i
%R3<(+*X.o-\>u7Trg^5`S5Rmu`b_8:Sd8`Nmc_P3it&MW)W7Dk]pXi-"L*lNIji_*.D1cnmW%t@@C/o#*+?_s&OB;"T^'=Fha:8V
%M3#Z8VL^t8j[XoQ;39;fKdELJO\gf"HB;qK%5JS8f^d,.gB`nWSNIA,?WVmK[orSa=B2`YP@<<uK=#uGP1mkrEfd;&6Vk`C3Jb@m
%gk'<MS!266em<hjJZ_EG`,;Qr5#Y:;4>-t!Tacp6gh<r&?$sNqj\/lncPku`!C:*t8-jE"?6r]DGe0umlLga3:3Mar_adHZN,%`i
%GB_Zg4G[f(oJEEkouY&KpT%MrIm;R:]if]Zgcnnb[TbgP<u[M!44!gdCWd7DC8oRoVn[O]eF.9k^Y3tGY<LXlqs\!C]@AJPISnr\
%QR#SE.uJ34Mg)]YhV6ob<-Ypd[FT/4\"Cj)@$p?+]fW@#f!CBXq=Ne*p6HU:]@FY<Qb>`E_.DM+H^2&oT],]>)ofL\Nq_Y1UV9r>
%ZYpb/D0u#eF1(jH^YAEEp"l\>V=rg]L@Hn7BBKAD]4Y4^`p8u[5M.?$iUu\;PP$gtDJrhX+1F2_Kpu(\D5lhSmo1oI(ugn^)/R+#
%pipO5[I)\;N=4pLj'EVlU_H<_htP:AhUh.s-P&sT7kj29qs!ZM"5_l6lKqVqml9XqQ[AGrqV=3%`1'Z$$c?(RQ<28KZM&=l]i*07
%\*PF&ri5R!mITVOqr!b.#2P&q?U)/L[95,KY45e?[<Ss#`J0\s7jXp1^%ZfIqWV/%W@^8YYhiR^d'`V.msdb-<jjrZ>q%Id^A7Wc
%[TtON\68cWJ+JeBoAT/<@6A:3.!DZ(/$3,r85Y^bmofNFE6`\>(oN6nfr2KC8g%YYs6o(B[D8aZLGt0H[sLd&mdAZ^e)HgmiFB7-
%h=pd%a+i@D[(>qAnpWqi^\a/iI9^+\Orip"n"Nq@l_jU&3jS%UF1n<OEs6ttfb:3CGPAd@V60XoS^hp9*(IsfT;WR+!lKiWJ*j9.
%a6I/aMne"-/O!h?h6l6TeslS<h?=@;,Ha4Z>[3K+-^T>SN_]W2g8o[InVO%Zbo$:=E3sR$W9$."VXQ=3K!bIM&_7:g.b!fFhANR;
%(:bfmr_EJk[SOOhX5:gjk?j.DdXun,IfAW/Fh%)+Q$qROLYg!ip$;>'NuOE>N2+*M3F`JGVcV^ic_T+CNr$aZn@^KQB5[C#rb1o_
%B'I`f0-3a$_oJAYj/CC^#;hLVhE87Xp)ZEl]p6`]`gr4CbQL`G3mGObeL.On?PuFrFgJHgH.)N35'b`Dp(Q&qg]Suk@D$=1$+i5&
%$T`7sa\Kg!Q)..Lo@=RNoKR.BU^(+r[sS^.jPegme$)%/at(`lUi8\00_K^3ea='BOI@GqT'bptB?qjOS#t6'k%B2>id&?U[nbf%
%/,)5EZ'hCJU3D["^gFh5>]Ht>U[-q)?GV]q($sjqK>?WZ=@#C3#4&k2&&d:0EA+MQD.BpMlGtm?aeugm3.+nVSa--VS`9M"\MZo/
%eogK;Kjj>3rQ6U?c""q<p>0*dRP.Z8eD#7a>_)>YAPq;]p\WL=F6KeIei%qPHRH!\hYE,V^5>Ja]#kh<dF/Lo?U&d0fMdm'^0[R3
%]gn]a&"PAEb)K?#^M_[O=)[Lm+4"#`%[tAE`XCJ7^M^]nO"RRV5dQOG*IW)!MF6QaGOaUj%eFOB0h<k0Ie,BaF;X!4`tQGL^ARj;
%ir*NY>eN2+?S.Ptl$E*kUQbF0o1NqKMpO%^(N>bO6K=KDj]jGtX8^\1[%)[CG=N0:8[cFgP(7FA4RX&Ps8I<_Y<4sl;5'=<`[+;4
%3:<hTIU:jcD-m9lQg\[Le?-EnO$>jMq-D2C]Y4!f/O5TIY5o1-mQ8k/m[8LY4]17O<#ID"8oD(Ajc0.2A4].:oQKQBJQk'lkG>fM
%Zd/GbnbM`M&Um_"n[VW(ft1m8s0gkAS&\?+g.mr*QO^F=@?OV`]]JbH9/g\_"l?@`LTD)+*fe#s@_FXIW;#?YhL4or'jeGmLP[@6
%[?;QX0K3<V+,T5P/Y66L4?acD-_)4M!gB9c(o>_.:2@g/AnAV6U5OcBk.P#W-J^cKhA58aoZ*nUs!6"i=m'0#C;"op^Y[^:DUS='
%T=.*VDS8^tJ[+k'K,7rLTBqrU3)!LZKB51o0R=uV%jTub$2Fa'jn7Lq%U#(V#cedAacqP0#D_`>`%Yr3LkTMMn%p^Qh:/'q)^Lmr
%l7kUahVHjXdM;(@5JQCd%5WfIN*Kg]aH6VU=Eu#r8O3tgEur=plQmMhnH#CKdaLci.jOifj4($[*ujmt@qI[)aO6eom)(GYI:1&;
%PMqgac-Qr`W_-cLiNg9,PHoP:dLb$f0]E_6(.g`.`9d$B]p1@9=?+-UBk5[PqMK_5^*Af&&4Yu<%r%[*TmcM.H/7A,&=c!*E$6U\
%&'M,nl?Tr'J)5[eiSSo_^h$4Kc8Wto"'E;Creu'7I<tY<V-En?[TtFkJ%a1Z[Y0^8FUj1^4%Wdiop!<6N7QDh%o(Td>[McnI)<eW
%Pn3DZQ\ri%]A'M2/6hOBpZS1Br:sDA8Wn-1fLL)Q@/K^tlPuJMg@gMj*bL[(MiAN^m;-S:Zesu[qrk5KpCO:;DALE2-]]6q9jUVK
%QBH<<klhTU:Lf`L*2mLU/*7<8c9@U#M<HSV=[;nB!O,Sq)]-_8lg*Jg$I.-@O7nVufJkU-TYQoGhYg.;Os+ih#O3[hQOK!LkRL(>
%\rO_6^cE2RJ%CXb(pd7V4lp^/[<0[LVDlg@no/)>`Eb'#i'HmV(i__;i&u;V#;F$;\ask=rBoc0d`2j.b2T`JaV_gnA>hiKs&abW
%n92P`V3l<@GTcUf#jhCdj)o5-`'/G=*7Q%RPj)jDP@60NA*IK/Ii-kTN`4C[hc"=k_o1M"s&=UQDs)Eq!'>P<L$=XR]Na^g2#fVG
%XOU&<7CqBi+Yh3l!tI4Np2Oqr'q/KYQ-)Tm%cm"YG:Xf\SidF3?e=S1jFI0rqQ>2<iQ_YOq!9P2JWBsW\:?!c>jnj_TQ5:N7Y\4"
%EPj0e>5nCoHm@'bEMIPQ'2_`T;N\?Spfk]JKr>g*s7Gj??,'M1U3XmSer@fDC[KuRpSLgEHfht'gcgs(hVPp';sh;)Z<t=*IZ5Lr
%GiSFS_V*_S0,iHuo0[N$=fC_p%t[j.d%PaYN;fl5L1):NoXA&,X&nT+rok(7@8hQZq&'9"=1kcmh*gE2:$8LNFraF`He#ioP/I/m
%[^GpY4h>X-IP"N9(9J>'[Te5EHg3h#=]5@4:*BU@X41Rg3qE6UPri&<X0TE]ri*V[qJu9.`ms?o'im]f$`SISX8>d8:Y39mXbWOZ
%VY09"S`4-[26u:BDqW?:f'W@A,Z;p"S0]\*SoV1U-Y@sB%+/PE_QC8I3i*qLhh+j)r9EutR3<N2kkF0Z=Nj,g<hpc1H&\h?8EQHZ
%L]T)F%m0LV[o.q%o'b`p.UM5V=pn>Lq(E$:T89*9oIa@<ef/fS(KeP)A_Tu[ei&-+pB/^@Vh^>'>2`#(:64`%Mnh#_bSRJ,O2\G$
%9CH<cQZomQ3hM_5-1!,05/:S)h@_N[g;Pr5Z?ZB4>rD$&&:VBl&>(W7H^Eq])5mAVj7IZCWZ#)60dqK33'RM+AJ;?3@\m15'gL@9
%ZLnj'nC2"J!?Y[Z]=mmueU;B1VY]/s?G@rA0-;6Ag.*Nk52+90c:>d_Q7B#4"2bnA^E7a5n+Rlt#BE44!3<Sh#>O)<\UX)#5J):B
%X`jdsF)'jN2=K5hatgLi0aa"hEOg0#RUQ0&H#`<JC;?bt/?;;.ip&o0,.ZR(]UEKYVsW+13h9sJ4V75H*PJfB@o2B&-\_6C]a&c"
%h=j!8]T6aJV7c6qQ]$c]l@YH#i9RMu^A%?c_a25;l=m:QbiZscq[]H:]maY--uU1!<7q[DX^"f]D<&UsB!o/"GUEMcC6F"Hq&afu
%3Y*<?]e9uMo]af[2QSM-=3S@'U;,B$?b!;3oI("&qe4f2%kdP,,EVQkf7_o"]+PLeiDY+J4mejMO@'$Wosq7*m=0Pqjjj(3fKnYO
%r,h[nGB*PkiE#uiVh';t#Bp(9DI\bPO_dkg%N=H+[=@^;Z4AjNcaPj(B$r9oF5'mTDQR,K7-JLBpfMh#?!*^@(#K1cq`QL<^9erO
%J1pEVXkgKJG_f$dX%_SCd@VN?l,0m"lm>]nn_^o585$%"]6Id(ee._ABAUVN2D3Dd2>DQkhXt1Oj/)3^?QMADpU@MF>E>rS_,]iW
%?aa=6m$@Q$YEP=`i:>^=[Pps6bAFT=3ho[:J74?+b!V=.kgJEi<a(pkQgSF#Vm_)]qUjGGMX/O=GFNLqBdnS$`AXUg?\4;c\\J+>
%ihW(-r3?7&lP5F0le<@3^0E$JGPH<Ts5hj<^3(+Bm8mN3XU+(of#*^X*n26:"eRu6ljhMj8"LcD]r.LVD/\gs05doI>C$Gkq=^k1
%F7<;t=.5J*_/a_tNZ=ulBc003>ll,9jH4Y+dXl^?]XUP#ibnYRkFEq!cL^GSh+o'[U<tG!cs$n/dE<9[*.$YW(Jg:JN5G>o4U)#;
%\'4O9n%JNp'kQe/b1h3S'S,(Lkq$m[If6Diot0HAmoE1<!<%F]n\tsF5%,S]?&`@4BU_P<\@c9cXj'd`Q?L!p#EkiI2#cQ^Hg>\C
%DUKq#mg.cM*[MXP[b'C#O'ekT>?cUV&g9U\0FZL+WIFF"PC\YA?iFBF=OuakoQjqW!5BT-`ppbREd2qE2scIa+i=<ST:<ap=9bZq
%]\M.H<FBZ,\UPujaelG;b@[+B7!X-a"6Ou/[mg+Lrt8;sZWJcnD/%l#e)o8dnlc,94e6<9cJ._)D*Nb-a6MR.hE=Lc#aV0F:<hG*
%8!+#5&Ckc5_Ka^%kW%9u^Y!9iZmKi/qbL9]VcIS^mYUNKR[.'uc\puGeq9cJcb%][%D,XJE)5LHDYAn[;.HfiXW;ekKFZLS2k"o)
%]qJm&(X%<m+!K(Ce+/FZdF2D4jQk9i4US)G05g48LZn_q*kOrF]RkRImp^hNNl-fp1cA-fWs9/9JVTlK8(Dt!&,,er*XqEP"q;$Z
%7&-AlDq4cNUk@OYg[T4b6sKZU^*m0WBn9E8gjWnT5`*jE<;jN.EoelB0J=JImqur]?T5(JT@G"I!18(LgN[dB[*>.b#<1)_rT.\X
%Y?gDC9m\\K\:4T[+0?fDIf/knge0ut-flH[SR'u4DdFbk#_LrX02#*W$#GEe(Ytb7$cJ$[hP3JsBTJQ<#I>CW-0lD<nRLJ6^'&"3
%m[dCtX0GE^0l[8iKRM4@;]2*iXaU(kD&[#,q66G/L30e)mf%?@S*PdCcrJSBPRQ-@HJkaRQ&>S;e]6:=n\fk@?G3Q?Kd#)UgKQ=r
%:Yt^+>CT*=cFqKL:\.6RMqa^C?\(^^]Nc35[BF-ArHHkt$stjYURH@pK&k@LmIn\l^V&aU'[Zik:,BT+0LL[`"Wa"b4u<;+rqPfs
%B3s7C?$d*_O32nG'gYoS=qP.j80'<BHtSss^>$M\m,@[#-h4PB<GY`VQnR1t1Qb%h&+?_$D&4^1nL+%0GH$&(##TNO'8]C`jl!tq
%ijs#,!TG1"`H!7JDA>)[Q1E&:MbiMAs7=;!'qKfPlom]4q>d\MgUkb=pY\^7?2=ESJ1_c`Ju@qKI<;C+O(G-`7@ZRCr7lQeJ/R65
%YELGdg2A=jGQ&pKEkZpHr,h,_%"dLnS0h"G.@*.V=$^MZ%HH!:e`/=i9)L`8SD(PrZLc@(H%fZ#)>h<[+C'?ie_fr@mEs^M"OuRE
%^0L*!7Vq=m%P*UUG[ISL6[VuKf)<4,lfHSC']M<$EZ`cO=5X\V-.)ISqqf@H"fJ94GlT?S2^m_B43oi-^Dkt=rqsoaC#@A[[9_An
%j.ofqSF4rQ>PdPh31V[uH]orKo#"a_q71"h#L=K`i^'+bkg4rWc[`8hU22HPeq9Ot4PA,[k=+8iIjYcmj*Z4Fq#NHTin>@?fprL*
%Q$@cbhTNY5J7;=Sl&L%n>LYtT,W#E=ePBtIp5.CMR#%&9=hDK]pL/A]bBFsq@=\j1\mj?jM]rYkDsp8_oK$%.>3gLtrpn1%A`L.D
%ns549(6%pqnH='%^lSj?o[CYja];R[7ZAg_\%CMYh%06^=&6N9B8C85XfOS[G.E\[f*HKYk0q!_[_P!iFWCIYV3ZDrm`p]7EONU]
%B`GtO%3bP8g/]0NAq#-;#1Ik.%]"UBK$I`+/kMN&*e%6?S(6NtWWd:No**@EfnFQWjn8X:r\ODp=Sd!-7o.f5*>ZR('D4JMUKOTe
%O/^ePn;4Hhf+%G$hq/Qj@i>"1BB!.Akd*_Eb7!?KF-?`0dfdS*s.Z/piSHSD\R2=`NDHt%;l+h`3X'3+3eP-uimk1ZC^@!EN+DGe
%>/8sZGd_8[[;kh=Mf6>i9^HBdrJ_!(<+X5c/gpK:7TmZE2qVFN72<S9:tSG=AVp%<eP!WSG8Gc.Z'Y6;3atn]Hf>6M9LMoQZ:U!J
%ZKrhb?e$+'`oR_W`+j[MT$D.a@Ue*rID4Ykh*jfAG3Qc/A?I@q\uF`A3K!UNNpoLO/Q5X-N<2%L"5_tf50Dj94t8=pYU9:F<)\Bt
%'h&lp'dTGU$;/=Be:OX`3YYa$eP^P+d#EX/cf)kV;3PS-d%l8(af;!_:h#6X;#^%s9stD+AuL;2atOo;(2?Yo.0\PU'LB!s:pE[p
%9.\=#'LOOPWhD["@R4!f9i,4;;,f+5b`MIKXFeZ<S>)fe?\Ta@$lNY(_sjB,I2Ekr;%X6eTk]=U'f=CHTHTOjP(B0,Q<pe+c%JZU
%"^*WTlqJ+$,1MN#67GT3J0MO3b-E4iZ<E>t4p!WBn8[QiU(j8sK`1T8X[_#)=C%4i]-UCb&uTpoa"@Go*&UV)e`<b#.fP$3?!(DF
%hOK=3KsYB;l?"9D&PX,G#5,r35=Alhn6/M50keD1<(Wgf$6?!+"peHlTUc,5/!bb_TkR+b[_S\4<A+>TBUP:nSS5#+AHm+.PfG<l
%L87\'V1KsMW"),+am,gt-S@5Tjas?I3d#$`ci^Y0Y!<gXEKI:R1&]HUll>9Jb!o!ulE!f;Gr5okT]#RPJ3ICu@OX>g0kH84Pg'8C
%$l598;j!cBbgk!lTbYq*A;L`K$Zo<7?Dps=oDm@m9,<th0W'PVb+KA.lF0ejO^8J$OsL]5Uk/aYG>XX!\g=>K\/$J2gt]e6e9N`$
%:f6-O/3sIsQ#p0'&jUl<_j!TDrkttE-fCYsRQ?^bV1Q5Z.s5-^WG`A:9BN5mBI7+$.Ng<GR"gp$UST@E1Fc@V6$-+Z'!3:GQ38K\
%(m0Lu@'$q1*2Gn'mU@=q3[iD'>-N[(AMUTi'#QEULnGEUar9Qd/1Ns:@#6$N`Dg<8X@*CcZqs^uAqEM<:^^)c2)Sd6JN=8\8X+bH
%,Yb.Z@A+hFVFdFIHc\Sl5YS&sJttYSTEGi8'VJ7jh%B@OGXe%@SokNYWmJI02$5#l=>=^Kh$EI8`%kF;)Bs^,KP1mN#o8H]$5b+j
%<!!+HZk'q'=-F%u298l/<Q!Jj+%9!n8S%T:'`ubqp1o28-lRC@1?saOHH"DFi"RZa3\r4fVe@]G!E::mL[#;K4b0`(ZjgCY#f#8!
%b(GYLG"Z<o%l+o*$pp\!dUOCGUg$=e9`,4>X@k7pnfWZAi#[K[etDb1BAMbf_(C+0jekPXF>cs_al3WG\TB`+TNHRlOlH+Y$kR0Z
%GVZN*D1_tL,i:qqK,@.mOkm`\dUFE?cY5hbI"h"JZ<_Cu"V=M;OEQi2.J+&*(OBRr]!RL7C'F0\2_#@lUGlePpl=F7bP9a:FE99H
%TcmPe9jKL]VJ-rF#^?Jr"@+HFg0liH\kWri`g@Bq1+lN4ZB2<#$s6.XO*as8!lAb9#=($"?t.W"=U!q;E*#mFi]2O<_%`SQ75>7:
%!UD].-'4,B6T*6m]hO`aPJfSW\58;qE1K]T/lY,#YYrF</$Q><8eb&'F:RS5B72o>7Fl_lq14P7OrurapNA=1QMj]TQ;/bsBK8VH
%=F<bE@abA+9GL>KcTs\k3KrOt.#1*NaMT9d-^S0#i(>7c%;2X)MI7VXLk*G-_ZFJ%@/t9)qQ%ClnE/DUO0ubH16Nq5J=XWl:0slN
%N6#S/V$^5d%%Z:[HPHScQmq#:T7n`rHZ[UQ>1XH(=32;OJBuMm*7+p.>p9Z\'-(k0!_!u/MUcfKeWM3opfeO*kJBRD#_9)"6`-dn
%,:-SX_Z"Zc_B5=pj3u?uo$^PRJ+^-"Rk=>$-T<ed_'QDEoXH.q:/MmN!fJlCejTZI0boig/>gY92,)r@$.S2`gkFjEWp)Ru?!IGW
%W`he]U/3%2f90\LE!8KmLqAG@'Oj8m/=ZmF@@"k68R5CP,Xr#9-,1!Q"%Q?l?p]UJY])t]d6#sY'#9Kp.);hqRo`Pn;ZIE7Y':i\
%lOk%5gc#@A5Vu:XblHZ,:dSbNp2]Md!U%DL_l"[gO<57q;M*Q.?\Z\N$)Io%#KRKMD^@tkfItE9l%IJ)`5/'rbqNE>Y(7pQ4;tf2
%;M^[6MTLG+N"UEC1643k$nuMIA8oTu`F*[T<!^[="`"+$Y="fh-/djPRRs<EQAK_ubl7+I'B;fK[O)+J9nU9RL+A-pdL`Y8(b?R/
%+UT'kK/9VV8efMC=?>b"/;2D&:"<Bb@3M^6!,]:YpCF$O2l[8U1n]k>nd%+C0.+1obuphSOp,cS4%O$U3iIV,@koqp;1NbZ`@ZLS
%Mp1`n7$<2n5M]ZmEa@6uG0UdJOG?LRf27Em3Y=[;$JL8/aVRue+r6jC@\LeN3usM]A`i_R>:NPt71/up9%8Dk$Bf!U5>%8mc\@-V
%&!;-(/5Ld(,VEd6S1l)uXe#aT(p"DO"Yfl[W.YO2)BU9pW5Ja@FWH)WR5G-EAY(anC's)60J7ooW&JrsGn=*-_<_c5YQR9/Je;-@
%'^AEC;8k8L.5LS\BA0Nr07Q<Ok_0J-,o5B5R`l$)Ppc06D^A86b'oafkq/`h9aA`SMJk#u5tmd`9K!V$USfd`(.q])PF-/Qmuj'V
%A6_gET1ib#$%Rl#Z4nY'&>lTX0cAP]OcjBt#n2L1>nW>uJr49=0c;IGQm(`:(IlS5+b\=[3hTnb$C#P<$t1ue$\sgTgli"Xf6'cs
%b6_"r@;&Z,eMJ\0I/CUMSD#d2Kg2DblX@o.Kr-+MQO)Uf+@;AZ7koIT0Em@B(:RROP#PGXKhdnT<^e9$du`N$W4sdUYXDan5SbQT
%q%C.oCdp<uJuMY>T,L>+I#F.qb.'C,6bl*HIUKboX$=fI![`^0,t0^p*Ru9>#4q]rP%%$a!N<eF)BqH^_H[bi!A#%Rb[(Y"UN]Wn
%6^K)RlY_T7=`?`j=Wf)mHkQT!THTREE(L82CH>&kP@[Q78t_+]J.gYrFX2U(&IV=W8RWd(?r8f1PYC?a@V16M`%<T?e1`1%Z%aB%
%M8TK%KAloE!hDUaYWs_<7$9E.`R)060ED\lK7skIUAk9,X(a$43U!h&oFq!mq.IbSig=fm7FFVg'G(q;.a3E`D)/o=@)rNu57EuD
%@$gt4)ssK,.O)31)5riQf$4CHVOY8lj";S?,V19'2'`Pe,d\DBH"Kl$.OoNjag_R`:p*a'd#jMG[t'!g1W<WkWacskhSI;j9MCV$
%G,Z8FO'mf6j&mia3dh/1;Z?>Wa$72FS)+7c>ucJB"i)+:Ng)UXKZ/pE;DBkX"4jL9@'-G_W@>&Ad%[H=BNA*(Xb^`nCJ;O!6r-ZO
%3$:,<$=RIAFA7S&;FNDdLiC33UB56J:+NI^9g.d@O$Y06^0Qar(i='j`c3=tP]:=b+^G8"'G<N`*^jkl<i9Ec6dS8hMkm](?0!9n
%Y9aGV0])uh"`5A2YRF[/K)$IO3AXbCI_UhVL4pg(h,jro%HqD$F3stlTL&`+ML3S.03PZCL^?"4SL_5"@d^k3:t5u*Po./%Tp/rj
%"?5/[@7)S&<8@7J"e;1(jD?#i6O@Y;5suBQO?aM5)`^d?KLopE:0hRY6j$mGUf=6(7GM<qTck1TF;G9u+=JBgWC-jN^E(8R]jJ=T
%`n+B2::3L\U2Upg9I1$SW?E>j]e<F.@S.96KUc!JFA#WVd7R(YU-\i@dRQF@+H`O)CmR"kD-0-E`OB16C8_E*[Z,Wk9#:VP>[OF+
%`cNp*3:$tf-Wn$?`/%7s$'WUaXqaYolD]i]Ep*oX!g8+^8/>"@$#"Tg?9luoEW_ceOrm>0oqWBW0t.!BNlt#d0`W56>th5$>UZn;
%Hj.!k+fYT%Bm`,sU,=JF?,Q"cAXgSP\Gq<O?//FbP0gV8:e%>e)b+,T\7^ki&rd`oOKO9NMlK40O1OVO0nn\&dt<ndX;HK)5e^rK
%>lt*?k^hnoO>V\K*Tj)HZO=X&PlTU7G]mL%nUhoQM6"JhU`5-K;-,53AJ1!dZ5&LF257t$A0HJj#iT/j8:2=ZLjMRI[[<,o'e`Q"
%arrAORCA,#kcc\'JWKmX,gT,f+Y^hk^^Z4&)1:\*]8B5o,Gkf^@TYr@N@%FI@Y/PXeM':6<1)`NT1ks*3@ER-&U]YS1]7#pWDgMD
%+C#-(=I,oFZ+Y:t7"SqVSeTZ'''K-[_7@Jd?0J+8_R_)"rJu*VFHV0+Fkh`!+Oib#69u\4mR&#R%;;$&UUOq$-4YUXT`M.k:"L[o
%Tth((*Ws)rB^_1(26<!i=PRZSqb<@[U2iSiEL^CBD"\glc0mG*h-u/PW).(@O=.VjMZLbI#%/+/@$8SRm'3Jn\e=Ab(V5a'Kpi02
%QEDC4kR^6fi2fDu&<&G,fS@M<%%/V*mW:buVW+"0:"STJJnUj=WhE`L$,b+DdD.3RXNJ#,Vm/,[Tf"h`lemC5kYL2qVr3-F?5$-C
%,+^hua*8WNNNLZ,$5:rkJm1:R"*R9M:MYataeBBgU8>,YN9c4YN])W(rJfDP/iN4?#/mq_VK$_.A4CO-JXu-0UD]H/D2O613T@g1
%&Gff)k4c]dN[GK?<i.U,#F1;Z8tluZa+@:GDU:h+1gIp3\LK5O]$-6W'0[Tme[SbYnA>GCq*EA6;45Za.n6EcN7H::2,0c2):&\"
%M5H-B":sJ1"q)`5>OI*GH=JN;3,GkM#9a9/:I:k-?MZ2`iYet5:gF&%D?q"GGG)gWDW+cmR$a*<;K07i!_auRdr?TE@RM&!'93%<
%hV7BfOt>:SYEG@Z8-3dFqJWrU`/6h(/3(NOC3@o4p<4ki)^'A5dr.JISKm:b&akqKiK[DZ&gTd"$;"/PF#?rpq)NK6(sD6M:O-70
%B\AbCkXta?o8e=6s09A9M%X8eQF,5s:Z$79Jg6$QpG5/^F8bTc&"H2pXR4$A4q!4t&Ofq(ZDMYmXj)=rb.NtoR^eSW!eB?9":5Ul
%Z9sGumH=A:--,$GN1YdhCTLI8IQ?9l/01Y.q0@aK#G0f;FP5p':Udq3JU^@HA<L?&6t-GlA`4;8BjOenGTQ=_'Yqrc0-+/%fldUc
%&JA+j8m)jhG(aA_!=O1[E6aUUhNZE'dQgSO>`P5V9PZ8"h".ob`UR79ir?\;q(nUr9=&MGS`@@g+l4C+29*F:Rt)1O,gb-CqEFY3
%X2#\fR:1U=V1+`+)j/>HofHNJ3n,BVCP6t]A0a2=-!>S^nAs,gs(dXTk[hA4FX)J2m3E=7$#gTZ@j`[pf6;+\*@.Oc4TsJ<&`u+\
%[01M3hrkWA*qgB8";uIfc2;Q'5]&c%:JX%YhRm=j:?S\;LRdf(iJ64rM;7mr-fHG&rYkO`"T7(_+.RrU`()05c\R3IlA9WT>V<(`
%&Da`fa9bZbK*IF-ON=>f4Tnqj"6EV1_L3G<>9ENcV[LVcdQ.]$rAhpp"fGQV-*^G'39u?`J-R.!Fh[/5lDH^LrPIHPK$6P8%$-.3
%L%W!j=k7XhnoCOPAmTD=$+n;JhU;5U%Y5s:O+@)kWXXaVi]c[HPsHEdHguZR1BG(K]jAk401^US%jA+$D[Y1^rpjqXlL2D/VW1"Q
%:8j>dCcTddq.f7%i>Bl_49V,QAZl(r3+'W5p/E[4FI$/on==NZX7R]6DuNMK%t+1,me!PU_M^GOpa,rrcps*5`-Ou['%Ur!+G&pm
%$s/U'f[%b;*tE^\qH@Ob\pifao"LBiThf(d"R!S=rX3D$F4fMOO*n\9OcsOo7#GE$G*V:iFMm]bMgYD3[KougAS>;X/F\>#,9LMq
%m95L&/C\Ph[mk[U<-`P8)`N$k]^%?@EING0@%1d!3c(nXZ:V0fU9j*3YSKt!\pYk8eQKi@\S=G]#q+`F=DJ)TnU=JfIfVd6MLKTY
%K/K[5_fC#;3Ts\)aFQ2;=GBsu!_[MWq-BEX;o./?F*:-tp"60A[d#o^[0SjMRX>ThI.k+sG<_Gehm!Ikc]8P0F-lol(B!l]BgEF9
%C\?5t(Fj7'[cYp:-FGZfFTZtXAS4^%lIpiuS0)[#V7pT,5j0>XgU_jn-KO`a+V/JF,#nq/^W^j@-++@k>f+AT+=W#3OoR-!iWql4
%lMc66s"AH7rT%?V5,&N=3HTf&ETdB]F_Uku?4cAC9?HYEgQ$k@7A?B>hJ[12'3W'g]`)DdBI]k2M;*-k/`%OrnFQShSo$FU>K%DK
%8:Pa"j6+ECG&j;+N%B[Xb.72o6"@'o\nkqsg<%`dK\DZ9m2d&Gl=aD)*tk^C0r^Tgp5m*KN-(<6G19p&&\!-FZu=]bT$B2Y5es9(
%1*SCXB`3_/EZ(dja1>EG+J..ai'_':/T&,VS1mK;4+1I"2NeR(4-M"bd#`6l8*dCDgWt3]q(%<5!UTYa=,<`aAe^rEbbGBk!"uC<
%,_BtXa_W!c[7;u.O^j4A)ScMJ%4C.R?k`k&)Q?\-d-sCK28o[lh3s"8U?HG<L(,Jaq+(J0_2"bB%.KQ>i_i;4;q^rVqNrp#1E,`r
%8HRJH(>V=^Q9U?p\e%nhP[j[i7[MZ<oQkCdC'"PN=ZXl?k"Iu6`CqOh?g;`-X!XH8&@c,$M?sa-G&i_3A5>OdnXsVg-cVmm&^suL
%:3WITXtS[MWAu6C2UjB2]%uU.$.1i<()BYjKEV1<)HpJ_YER<PeKAKj!h`f3W"3>%`hgA_'*b]ECKN)?F6Y,=if`X,niGJ/';W%G
%(A,=9\((!uCc6IDdk\SC5^,hOf?[AJ$VA7o<)(W/]-WT)T_,+gF_FB<DJbJj+q&p3:h6c5P"*t8X3Vd"?/bGi>QFhL#':mhbgugc
%8k("t*>5LG(G>m)'$2=LLXWh2qM6G@+gH7]Ebe8Fe4A6LQjL!$I80b4fbH:<Ft$[W("3GpW/]"VhOuS_I?7^Fj-4IgB)ZmfWJhr:
%3Ig#\\Qjf3?8':-XQpVnG&%80I<5Y+h-*+[ViT`#qKDe>q!HL86cE(RajQeq`n`i(gXkmt(A6Q7hRooqoZFIY.mF]*IbA*T?'uI(
%8dhiOmqF8!MH.<ZSRi>]0?_rb?-)*_aCJ%&eW43E4>!$8CC0lHSPju60s7]Lf1_d%ospAM'3B#!5PF1$:HVc;B^>]qP4H9Ef)DU?
%j;jD24-dTB>`YVVG/0;e;Vs)AB[u(F]G7KsD^OM3+F)MT0e^_#EFU#\<%9GWU$aPR(haYefr@%Hf(<r#E@Q7oO7"hLkAb"&O-([B
%]fu0mb?s<+ZHA#lbO;.]"BpirLX\@"]U!fkOim;Re'WK7rp-Jeo%2B/lq5(ne0/<6'OKb`(]IA>Y@DY*qr(Fa,bUHJiooQV'>(Gn
%><<oC6T.i>hP4aZVB'@8$tgZoAo="t$MY8W)3%nKo#Nb15Hd6c/!s6lPG#?sI?9(0jmW5FZf_qFna]s3;,@n5,p4"t,aO1los+G-
%H*&AjpcqWu7OlSd,]Z;tAcaQir9iE@V^"S^VVT/o$nXcV40>i#m8`24DiLpC(1&&[INCeSj[`NI4S7^t:HWo1>]=Q_g"lZ.`6W@%
%T)J%(3$c_:C2Z'Q<90fjF+?1TIV8hu.L#2p/!da=!g4Qo"YM4O->V:O)(275oa8@mKa:;5PlUE:g]Qu0PBdT[rt,r4lbDDUN)1e0
%'5Ocd%29E-\lkJaUD(BTlLP`6^UT1Tc<;mC)r8&`O&_ZKjBMqXLr].OGVrm\KhXrV!*09[XfV7;3*K.>A_FZ<b\e%Qj`iXq0,IW@
%J%85Yr'nf+c\-MA!tMlSS<tsPh7\Thcc"9t8hCG+quJ3jN,rBr)mL/,QI]$c05K=RQMJe_C-n&f>iK=)F8?R%'F]m""&UVJ=dE-+
%W(,&e,HZ=d&IQ(cAQo8mZLtHGf/9"7,U9jA2?S[7UnrW7D?C&n_2hb#76!)RQN<8'Le`2!'!c@"9I*^n02m,Y(G763Ig[,P:i*e3
%.Xhb<*H'KdF4nj-cOq_@NC84H''6Qa/2+Q)-$k%RgMs^4CaiCM3S^2/[\aTS/RC`^jh*dG(AGC6YW,;eH#)QADTBUA8mMk5<L!dK
%`pP;_KEGREn,3.h*2rZ]^r-q<:o.&?@WrX*DU;W8i.CiZ`!c3P/Y/Y.s7r;dko[Y<j+%$uruNXQ/W9(3c$3Nl3t!h&\l%90Fie'4
%V9?EB;?$dq$TK2fp):0:&BMT\JDDnOU0?@bgo'h&K+CBW,2Od$`/c,D#,rm@BqUAQCM5=!l"<3;rQOCjV(-Yb[A?&*Gs<U(HVR#e
%h!'V:gZrY9UUsg&llY!N%"3*81\@h5c\6T1H7jSah_Xo0S^4r5[eKUK&+9ESo[3Uj1r.F>b%F+.\YtS'$o$cWmR0X,Vgl$(%AhdJ
%_uC_GW@P71**C6C8;]&Q1L*dJ1c+6Z/_CF]&>@=j1cs]c/$UZ-^X9h<f!Yctb(m^/U+b;Oi\@a7<@roYXU7HiLVC<J)7N%Wegteq
%4CPN34AZfh&j<N;KHjZTa:W3Q4lO"=4HY#Z:k63GMQ3$b*!V:O=]ZeEbcmFoiKZ<eTDdkQ)c#-'1.ntFg@`WtC$1s/C#Wc1G+.Ba
%LmGs5$uhXI%A%8p5c;s`O5#49AJT/'J/Gd8-#4c+0pGeFPgYDjC-BD:0"-_5Z9h7!Y<i?s*GcdGq6)`C^t1YCTL/L7'8Sd!;Hh#T
%ctc]1d+T]RSE!d(6sSE4bMHH1N5#\&nYJa.>nSKt52l\hq`61KV0[X9fUUP<>N]'%OI#g#Z$_$C6(`Yjo=YZ?WfP6qmVFS3n[gT5
%dXlnn=SD]DJCPmg>;6&1(0ll5SaYomr?'eiA[uJp;L<*:DdKWRYeGJ2/7@M`d_3R+(,<8LqQ@XVRZ):0Y\f,$A3jXL's_SnCL7'J
%,^nrKl-A?=Ck14Q:LGoVf%Tp&+f9FPfEGBo\V_ZB)R5<HYUAuVg87e'7tdYHDP=?K99>?U00lqX$Ic748ZO4mi`IL^L<^,X3$^mY
%7I[.H2LYss(<*].)*Lu0]3-.j,oiQ<R/';Rh@LZoL)mR;?R-<[QJ4^YK#")``sM@3?PM=En`-.bBq&6*oN%.d!?+3r:5TRAL4it2
%M\TS)Mt*XI+,&X`j&[n[IFu`4]gYn1cY&)@IlD'!i\F9QrS=S.,^SI.og/od'_6!IX5,.Pp7BCtE6DL.8rt9"-B$>5CrA(7j(S`-
%WQ0./1n-C4hb[4n?Nm`h,,]IMl9Gsu1SV]ZXa?MSgeA_qqk[ubb+8Yk/3V1d&i<*0V5f"s4VD+$9(O];HgH)FXl#Ctj;$d/QXj,p
%DeIS:0%k:7*IFeJ>Dr7gcsueDdLB@Q7ZN!TgTh5O<8V.&K)(hh@7W/O!*ICKMPFu*iSZh4;=6!S:rQt8oQ<f+*:"P4>+9dVHhMif
%!]g_3K)ML1iY@YZC#EX0*UF1]#%e$^NG9a7Jp#(^f-fO1+p_8MKrTZ9h,]-.Ot=fN=,/q27O9XSf1HY:aLqGb_`<!#F%N&-.(Ic8
%/Fj$jb=PnS,l80qd'd=JbfEDhq7R1Bc,LJB&@4\HjpJ[jDnd(!:14Xg('cDR.QIj_-!6dHD_6K(iIE4OWY6oK98`q*:Fqg!3+8.g
%D!#d&C\u`^`m@1a&b_T7_J3/#pON516_Egq."NUsnd<J+]U,7?_GXgXYL5Fs_WmDPo3rCD*C\JH=4ueQB;"_7bUZ9$Ypd3oZBhI"
%#h9Cr-S.QkQ7Ug![V&6Lh@bU#8.79<%]%_NrE-CQeP;K$^18C0VCsGrp$a,fN_Jii)>7l6EEh!Nmj:#ZTPGCS[UaNp_2T$&6qAf)
%AEejrI3R99Wm[LpdW9Hm\e>>4k3s>%iH:r51+&ip7O\5AKJOdj^lr_Y+:h%DYYn_J1Je]FgP1^U(Fq1V2a0O)8kjVl3Q?+QC]Zn'
%O>A<nEK%5ci*[Y[6-YU4*+PHumu[lLa&sX]LQb,E+/&.^b6HA@GIKV)ie]<h$l6_&&$k0E63TWM<HU>)5_=-H33Du@A^jG.M61P.
%;O+pRI$sW_Y@/V%DGl*;Q+bd2a.Aeo<l97*6)CG(27tSrj3tt8XrI/ree5$?`MXY,:Lb;(WO7/UbUI?CgM)CZUq:"&Zp3oI9fG>o
%(aF<#X@h$+ak=rp(k`S1aN7,<og"XO5ng_RQH6W]G-.>O+TtOq#hnTF`$5o2O$k*=*r+k_pi74+W"?8Ep.om)KLdf4:CfQ5@Eu+X
%cW?Ze:,VJ$l3I;2HH<ACG4fTq>$``s"E@ls\J3ZS6eL^j9Dg'^>2pSnO;O'X#OIO`eJ8jnkU'sZU;LQX]X6O.IX-O:3((4OETg/]
%&E>3M41$5]pqT7hmsQT+UNZ<(6.>Pn&E79rn&Fq/P^[WRXe?7XTtgKj_i'>+5.$8$92_K(j^O"9j%"WGecAZ?Sl-X+m@CILnd#JQ
%4EFMK\UT\\oW2]!c6uRPfK\\,WsoOr3Ij8A,_"ae=h@REW=R?u,^-_^1V#'n!MU$rLj0!P"SR--BP/TAhFmo_6GJd6D_FK88)1P<
%ct]h<JPaF,lAEP#L*XZDTMj-qAH^Ma;RtTP0\3.NnNaf/^NkGmeUg@#S7j._k>u&K#u)])og!=$\-d8",8.+gJ<hej/m/9V$G]_C
%BNYFgc`(5qI:4[.>hiYn*3s:e:C_JH$tYp+0/9M<Jhf$Rg0<)%b45Jmh1shqKXtJ#^]#WE^%OH_0\TN`WH)'\HHgB=;2hbYcq]=;
%I1,0XI+hI0,+.,9,Bhj&1CC5:E'@b3RTMHpk?eFYd]Nd</[\.A$SMP!>SLXpqJjjU4cZXJ_.hD]*;0?rWG%\()gkQan;_TF<*FEG
%cs*U8QNDk\c[p&Yg=t_fBn?<fb=^%%DMZ_H2TPY3Qf[^=C)(rb5^BbG[T!f,2IoQ&&-BHN0-R1c.W!YN&`r^6D5#-XaM3pD_D@bP
%;N#R)lh3ElFD%pbYd%c1i;jLjmiXi<8"MW/0ISO(Z0-[pg(!6qe;K)VOTL]'7-q#=80r:OP08[Uq6HjMqj%b`U<$8RG:R!BTTicq
%0b]!mMG5qJ>UD\Eibc-_JWiJt"m61m85IHaCK=oib/_[oAE.U?NBm`'14"],S+/A7pVB_cUbV:t&n4$kjl"dK#PRgm/I/85G[g!c
%Nm/_*"MH7#'?cYI8iAd%-t-s*H6j_34Tgc\;B(,SbOe8>5Q+#Mr7g?r$uBTpCNPkAG:j2%*Pu8(-/FFLO"1'(AB@j.E5K\XI>J2@
%67l]VQ-7S@b*j@t!F+*h5g1RU3_gC<mbo!sZ;.MDn6;)Th.L.*VhE-W`[O3*.0/rAFLW]Tr4E?ICgL@IUX.Eb<bFudn\q)rWhXiB
%LIs$D#7]<T[Cbt0,;9j#'N8F)&dt9P&ctLWL[e\8]\T9\Q`d><++b%.2`^,H>h:]ldTB0..03YFK)U<KKBNGnIj[O\##MD0M$I-g
%a0=>-MDn'VdprR3NpEB7n=?^n2X-m$Or\%3kX1DZ^A"n#i`/=><-3s4s/2pb'2?C5%W\Y7L%&t+B]$]$)4MM)G-h12V,fELb_kuE
%@=a`!:AYn`;PLm\A%ko`%P&S'Pd;hD)_bSB^[T=#Q&J?S+<qTQ.>cCqd^EC[LPWZ*,#\]7)qrHo^`d^F8lc]UR)1V'[p1ZH1?Dh8
%B8eUJPOn4F8JrZECpru;P6#,+Rm\X-bm\E5R"_JjK:6\!F>[Q80<0eq.Q&#nF%s0fDhg$5Zg]i*BL3"3=M?i#UD^im/ceK'=8MTF
%*+t&_GFWRl=X4j>=RH'>NdG(qrV@gi\b5+B09DHg\25_oagKM:!<cnqq:aFai]=.RV@>[.47tti4F]C&3%f`,n9[X@d4>O@KZHRp
%72JJPZ:;!P2F1(]T+Es?(>6,$T)!d.1KdXq3m/6^p%*'ZCDk96,P(q>s-pc5!`Y$@/\E`p>ZhWhdU<?T]1)&oPed0WE+5/fPYI[#
%<ZV@uLdLPgrtR]C1'FIO^p8`7&cfdBf)gdI&E?(#@4r\1p=,1#`2Ac+If`SGZd*cXI`/u3)+@eqUs:a@'XSRF=)KpZ-Zsqea]i:.
%-Nld!bKsJ)/4\]oCdo#g,F%i[&:"<i,bY;281G*?<QCZd'#',Hm>)*E=&ra+3r_`m'Eh*iG<pLWUE,sNcJQ:&4LRd\<MMgtOf>9)
%<nQWd`_eo;Zm,mF'/Z&';VJbqLes=?;,'.S,cNi_76#*6$?bfg,+uB38_=N7!`dApRqkni9c=7,:c!!efA5)7pWN#l+/==PH,3;3
%<);Auj0G3KC[A5sR$VXu?GG_Ec("i7"VU8U`CiaDA2qMqCY6qu9^%LT/f+aK(L5>[i2>])9\]G;Yr-lom&u0cr-\NsJ`?#W'B!=)
%Wq"OKDPd2eq4K]<2AcAPP:.8PQW'8K7B[<N`Ebt'cfH'J=Mjj1?,A:@0`[PsRkq":lQIK-/+'dP#2K)J_eZN#35Ck-qUIq6U<BGH
%\-B/G^fh5fA=mHmf6nCQNcW%(!aQ4ae<?!k#+-2.V;:oNbfrf\*fYX\$4b.6W_Tbg]jr5g,9&jDNf>$Pc(tf8`s#YdWfF*7c=ko1
%daG-r#(t]0<TE%W8s`@&(pOe_OX!FQJ)O^#faQ(+*V5an&9SkK!b"`NTNVQiHOBEl8h76_2(rOZ"-_1UYU[(9*FF<j]moid@W,I$
%0r^=(JJ.5b0NN)\:-;8@gCnj@p'L5MZ^>*CNXQOQ=D1D]nQ;B/5k*6qn4tVfZ%,?U)@&NS).$-KFrHWW>/KQ,rTk2imsH=>VKrAT
%ndUs(rueZ$Bo9LgL?))Khng*HGe'%"2!kXL`DN2RWT6C/gc"CKZIffX:g+TH5@bU3&PMN:1s+p\C6;E6O_\#q#\9E?ZDY.J%Q]TO
%/`5P=+b\A-4Rb3D:94H(g/5E<n4mZ5U0,X8RD^7oF0$bZWY_#hc;->U`S:)>=**tCT^aoJ8A4Bue[VE+=QYuN+4htKDSc$#(ae;f
%$<'];ZA^#^2^n+XaUG!"3e"GB];Y(q"jF8`pDY>UK.hY'ngZfUiar'No[)b_+,WPDYeh=dG^^pWbc7/,*?iu70%[RV66.gVRuLuh
%/.%>A$\O#[Kd>"u#2hc)22&P);K6IY.8;N!dR1U97D"mmO2.9#<%Cr_>9G?jNfp.#RZP6G%u`MDQ$hLN0IX2hkiaSE@m(Y]ccU)8
%R-PoPJ[RA\QZ_2OUIVS.8[dUl01&2U3#utpQI=(A\"Yc:(Y:)dXBb"QZd3r.-5CXC<A45kag8QQZW"O@0qC+Fj?:Rs6W\&?<&N-m
%L=;*9nI8T+a&la`o90F:/T<J4h6M,-i=U+:_Ymq4%pG#";cfLXXK'64JOII,&T'+i,gD-':FYB^6Lk*u+^3%T/Tk3W&>F1HS9CYF
%Z_cO3Q/mIgFGJqag*/k%+jDrLG0WJJAPMVkS;J(7m3F].?eg8)AZ(6/]%,@-rf4G.p)&QiI8aBe%T"^?KK$Q$iYNqRq/7elI%2Ql
%3uef-R0.dqeLd^0rU+2>S'nX$U9L=!nDO"OZWn#ias8D?F2.]l2OkK-J)nGlpHMbV9U[5-WlY'-Fr:>7LfL4&Qa4*lGR.1C8`nT_
%W5)AHTONcrX5OV'\O!CFce#*KZd_@tjUdrRFbHeIm#J7hpYk$Y754%PfLZ]HA\HOfZL^jPmWA-^^)p/+[:h=.%#]jj-ik4)b"9!g
%=>Q28XjcTmDBGfnb"T7D.R/0?ZM0hl>N8kbOPV>njV.fkf*Vt#+YJ4,po2ZG>PY^.Kp7FTpW.EJmshK-CU-'GWpr;5-4tS+9hrq\
%bA,(&qds>(D*Dbe<*L5THD5b[,\;R[GirJV4eV6V[VXptEr5;\Nk\s!!\2aYA=Gr+DA"&`SAJ^#MabX=QTRiKR0r/'^'r53M:diJ
%FL(UEdGm%u&UkN+od"p-cD87>`=[[S)6!\,kq^e<NHE,fNY;g%\2KFp.N<+'EY<2r3M:XoP=Rd9bm[0E79.:Y.'@/s+,,7l^k9P#
%:GUp"*Wm-a!rWLjGN,[gT8)N%8JIm1E`1f3eH,fLc43Uo;pR^bQ?/(\8T*sk)Dk]UJ<9Qn8[e^e`ns.XH>iU[6@-ej(_21qkT6Yo
%"9ej%=G"4#0p@X[YRdm<gWPY"s#PV>l.X/BNAo8`laZ*,r4%g>o63=&Va="FQiND>YU-K*B"7'9)G+,Om(6!`l*52";hUaFb*=`=
%X0GG6.N-YR].>pb!upNfV`s#:</%2_DFM?7X5Zo*/ABp^qKLI-0Cr8tgK*F=9%e;qokMsECasS=)7A_08o9n-74sRa3!n,V$4P\@
%9-O*uP'Y19anQ/jI_5cn]`U/N'Gl;!%hGU7pY[rXN/B>XO0BZXIN^S-<u89NUq7YDmM/(\Mq7[TGJa3C1891U[r7b)%EpKG4)b\<
%c/godoC_dN`;#41iZkSTXg6u>LZ2s/#jGSb8LdeUnSdj@lD$XWn.Z=*=$[9j,3jrj9CL8C$;&D*[+pVf@:3"JQEH>/DPh^K3dfLI
%5Xe7[2RWg\39V#Y5ROt_h5-0`$KZ8b:jf*WP0M\O"uMLliBflj^A<D9OS#DPfj6=c@s:CADZSDG.'=_g(M_gVBcsGf@GQirG"mp-
%#:spIbup:]X\i%O+=4rFU`n0Xl$Y$,G^#&k*>Z4dF0VNo'[G+S6-3@W.KSU?W(25lLbl(D.`*enaVGD_'&V3$9lro_ee?+EJP`X*
%m_<Cp9-L,tdQnDH3_+0tVs)2L>0Ybq";1fZ&0aO,\W^Co<>em1Q](Qd&oq,OBUD#h"qTQ%:q!s1!0_aQQqmRo\>u<Vpoh"E2`h?)
%#ga)1C@$oll*dNlMtc<\dhVfkf'_"5@f<Gs:dFS]eZg!f%ka/%*7T&EZ)HPt/aBO#/aBgG7K(bPdn=`qSmd-Re;Yo7?jW>,JTo^o
%6:cW8,F8)sSWK/Cl]W;Ik;,lk1O_M"\"uD+gU`uVn#FKTXUb4h6P=$8;la47Xl.n\FU]W*m&>!meYDI!deIK-+)L;[4r&.nVn6f_
%J0uNL@X@=%q0FKC?>;"A0;mdP]WQq$?Z4clkHSa#CZh:[5$-J:gSGHM!:8gtauh]07FnHQQSic2RQ]j!Q@<-7fMiAMg/6co*>-sn
%G?$N1:.Un/U_*-ccHX7JFenO"eii%rV\`9I\3AgM/2f\"QZm?U?XYB*IMW^/JBVA=h=GmBn[;gEZU&Q.gSt;753BIiJT;A9oA,Hr
%rDF=$HL%.ET*<XM/Uf^8e>"OTaW5UYk[a@)N7KUoiN-[@TrWOSI_+k@a4Bpua#7c"I0<+\YQ0anM2&d^H[t,\n^]\ciN_CBM@X`n
%^d"$lk^4Ae/kk$DW.^A=c07.=Vq\E.EH:C;((I:2B'<+t2q?D7(iZ5<7Se+`X_DNaL&/`Qm:$PUY,T'q5jW"ei^l\9gtC-Fh+khp
%bdZD&gi\*gU<]ggCN+5ET.V#rJ"3rsD)Pjiaf?L]S9iP;/ZoL(8ii?VLORb_%r4ug8"`Q#Od9R6+;<7A?n+'Z.>^hZdhU;gHCLGg
%`4"pWNAD_]0:5'6/5Sk?159gKIYJ&)_'Ef$2,W[L(;S$*CO_m6l`@X]TPG7K36Bk_>N5<R\F30kqCS"q6ITs@m-1r1hj]AfU:T9#
%n4DP\1^MW9f(N?\oD22V4R)pB'ffO&hph1/WN8QCVMPg0l>q'V?%EAooR#tu']iGINZodg#8+?p+(<UpN`EVYOYjbj'7f`c@Zt&f
%qMtaAK-X6$mFJk:751+<4^pOUgY,.q@B;o'f$H%+r1g.#;<&*3m+lkaM6J8@=XCoUq^!lLj/Q.o]`5U%57Id#VdElXbUZ@gUsXBj
%o6_^Lr\Z>M-m:.;CV<pYT7mA<Fk05;97*ZVoqWJuopYk]A3-:t)6:?M-0*kRYnl";8PS9l$_*Z3mak,1mFG28qWLh,]=$/!)o4H=
%kZWm\3GWeUqH28"Dsns98NHola9HKIL++K&K[f@<3Sf'"Ul6SUJTH*DcD+_4C<lg#)j4R*H?#>P[UNA#g(&j"GHog:XjFCn$>j5E
%Esu,7oN^-4iTZpuc\?6li6iWR(`VVlV6C++;f@ePnfXHbLCKN4/@n<bhR]CfQ3FXhk1'Bh=I[l_GH!'#"DPd*9-M'^gXJ:q0D4t9
%X'<T=Njf)T"n:R.:JrtcG8!1K<NY!;]AFm0?%+.^DA^\[]dWl*HTuW^$DM@;qYV?..T1Ql.g\4:,Bp<Yq!gXp<iG\8F,/3$Ca:or
%VPd0(TF5B257(234#iJV>PENdEr65%j%!ls!"XfqUJ^ooX=)]^A9$!j,A:Qn]d\:X2DFpiOXN%08U&pn+ZM%Y)a[GhMV1iCi6/!9
%V332tp7Uh*+@F0j_K@%p_O$P'ca-n:2BQ$U9T^s@-^q!Fl'MTi,p^#299c+"0Ue^./>5[gOGF.@/[)i9dW(T"Fhu/?PH^g*N?5]n
%'gXnYVX*YULNH$!0O_h9X]JH<ZXZ"H3A\]:Mfb&tJ1uhMDB]Epq]`)(SA-S_FU-s4PdEngX9`F1*$URX80eh1b32+1k!PlC'dRXT
%e%eB;SY;4[\@kKXOE_XEI1\\`R@VS)2Zlf$gt$rtff<W*cqVFkd]Z3M.+UaFFL.fqW0idAAI/S*D[Asc$k]]<84BI<6]n74D:`?6
%%Oo7sQC9(!N9T0.PSbf5%cLU-*nY.O"kEHUCORq!DuL@O&U'O+i4aMc-Z%paj84Yn&fourMU1"mGOt(/)0oXnMR+35oGU&((_YPU
%V=0KOa;VEtb<ETPWm";U]&HW<7^TmtJs.#p0rILAeNg@2(7uDT]-8@3I3$0k?VRtVp-n:M9n1dI>,"`<ZW^25PIFWb-q1$ZTs`(O
%5'd%YB&8;^H8))!,pu]3q"\aB<6b+ebDl<eWM/Gd$:]h>J4h.tcu/q#p:^56$:jo:KrX6C@H.P4+Cg6i$0g-^1]iI#L<\tSX"4n"
%?=4pW-a^%dnTliW@ljSiU#i+Ic#O4"Qm_$*@X<^MibN\!l0QobU(8n&d&p?_l:I?E9D/-VfGkUc271?dbe8W2ml@u8E+#a"1tk]a
%1)_2t#2YqIr6,;Tf'8#1_`El'=#aK)m$G[,Jbu+tCI#OG=$;5Q61;\7##%=2[Kr?\0k@ifK>R8RmLeU$bcCBBq>LiafME3Q"@c0N
%=5LS*FuCQdr_?/h]0tKALbJNg!\WR.YJrar"<LjcDqap0EI+HsO\C5NKnNu]4[ncbACl`fnb&H7#R24HG`,nY5D(rla&W$-UFM?Q
%9OO]06lZY4">W^ZMW]scO=hdp[9&n[@Tk`;6,A?hn<%)p?YVnQ.@i4NTTh&5=khQcph:.j`4'bsFBQqLet]%geIG!_e]/a0r/!p*
%",'E"d-K<@V@?oFAhUt\Mub"M$IkEtXMbi-fDUi-h%J,38V5*5o0=ff(,TAQ"`:Qc.DsYrL!"TKX%:FJH.gMTMg6Pk'XuE=)aQmW
%^1KUL'mRVAUVLE9-k9n?'<6V\%7l0OmPBS,6X<HV;;3I86i-rKgP(.\:[[(_+nQXhC\C(sNkHiS?+1o+CNA/-*VQ%3Y<H`dWVVlV
%7Eos=keE!4f5p^=l9R1&Q5j`!Si&4jetg9M)TW%)7ABcb8;,KT=#&dp%8Tk1Cn&Hs:XJ-T]'h,@Q0Kmfpjj\4q%89J&eQJD:ML=q
%h&Bo-d38mo,s(iUA.e+M,1KbHTS6ci3X!<cQ7d*qO<>7U#,+e+8YC]$;Pp'&UBH9u$e7EqRO1K(H2l&t@I+F&it%#Y&\4H?UII5U
%)[Z<]&e<OGFnOFj2Z?@SDuO(qg`0Jj>$#rorNn.s_4N]7Jq6m68>l=lN29M@kbpf;,MBcFfKJo[j3-]5k8i,YfqZ<I'E+S$^5o=9
%=--%0.+IsVU\3$G(D5j][@LkNU>UqLn#$<@8S!S@Dq5Ype\pBP/B9P=%FQA5?YHp8e6:7:4[';"iq_;oQbP2[`CjGsqiU&*hu?qq
%8i5]dQW5a<LK3VgVHlaMPIhU7QlGu0YoWSplm7>(AGBZK8OF$ngNtmn)&JfY%Tqj)M)<5ClHo'i8X+e%+YhBp\Z+=0_HuTX\20OU
%3"3#FlpP=W+K:ZJ+Z']XC^s@GfuFkAT'-rE[4>ho,UtFapK4W-I`'\hr15eF@(VMm&BGe_h>uBaP:a$!9;m%G]pnm)[F39aJP,3_
%Xs(-Z&[J9G#d#_+^R<HI2`7ik(TL:CMKPNgrVooP5?AU!Dr^*f`YF'g["WAiERFg!8FuS-Ld*bGfI;DQo4&Ep`R.S:i1qVko!G;4
%Y)tP)6!$g$o/4Bo]m6-\@0oM@+]6L;0:S!ZLr@]M)Q3@lBgd1i81R9C.&5fX,`5_#RW]$KQ/aa5FRJ9JPls(#8;)(QYg7Cg$aUSA
%e^6[A$MhA9aG$FZSa[plFlns'VKIB:-g[EO^FRB;BL`&IFXhDsV8:#I_das5,fg+B41V4eTRNh3(#kKM?A[&-'N?#G[>l8.>^&%G
%J\l4+^^c,X[1D2MG@dXLPh7-F`CZ4b8@D'f;`6Hj$cU11$$F^sf%[51C;3?WYo3^MYd`'kH[73@)AE2p(C@P+Fam%MjC=](":4*u
%9*-Qj^,\Y-!F@/eRD$X#$I+\J^QbeHpWXFIP)SfJQ/ZO&$.5(F`C_dTM*%]$odlec#rqiU%$ZhdemTuR=dXhJTC7u#-c+Ea^7;qf
%`D48/gQsLs[ce:iP?-.J#RP`HR,ZnRm$54R<L_oss1B$=Lc-bW[Mrea++P9Ke,`/#J#,-@Nn&>Wn#tTM>M1Q,\.+;3f1:R96m?0*
%GE3pD#V0HMk<4P8;,@9"kbN"-o#J`^M$54lp(&F6;MdAQ@-bh:+o?#J(u>i?8lugG(#KcPN]@0FC3&NR*(WJr22Z3K:4gT`n6o.e
%OEMoh2R1"+O^i(t!GYPI#mR";qq)<m:mD%"I7VrFEg3de@m"GM`i^Df6kbaNe'/_0'j"roS0UOOaY`E2bb7^;h[)roR$/-\&=I2p
%P<4mu;@a7LXkTDHGgpB2!Y=lpG&X.l2t1C9TooKZLu',L-MUo!Zq@b3!X71$abg3pG@!Y2QCfg:mO0>kHDN7T1Zo$&pApM+,)[Y'
%Nc8oC"i=j=!KW=Z]k^&TL<XF^W/imnZZ^8/dY_qM4ZDD?Om#or:ZV3cP&)X##"hG0ZpR2c#d\ek:9RMjl%Q22qY^\o$)?c@4gHQM
%k2tS*$5!.0Ppa_Jf-j=?U9RRJZJ__N/k*fh=ke;G+#1&`?*[Us\Krf3I)6@5C!X9.P%pblEUP-XIr[t"I.6b+%gK&t/imGUgonSM
%=#jD0?BkgPlP\+IUf8d0=cF%DRCkW$,sbSILGQSgmA[i"c/Zll8Oe)Er@RG/&'L9_&dpO_,G;GkR@JrYm%@kG98&@m`-*oQe4RB,
%,"9u"<YA5UJ4/H/g.C5fA";,"CeAOinq_)od3$,e#ZmpH*Q#t@Z0eg!%q/HY=c-:W&5,11M.@W1TSi,]&']B5(9!Xq!3N6F',Cah
%0B?V8%G)YIOlRpR8e5GC[-94ePVj):H';bXQDhGur`AP33=I0d@e)m]*h$35f-R+Y>a"5B<72NA1?^G!\'=?38s>?mejC)?=cDW2
%BFIQY.]>B;oXD']&<O[CN'sX]WV#QDXFuh`+I)%58IagFc0m7A%_XOak85Pc'2/k3BeE-cQ,in2k6:'JqAI08UXG%O&Am.Q%.3e(
%0^1@KN6kQhMN>VJ`&LL2eW?J^`P_G\,D]R$4jK5MN3N4Vm?=5"BFiJ)^g4+)P)tL)2q[b6\m?":@6U]UmtVS$+LIZm?#3oqZa&.:
%:XL1aA\'2?G`k[rLsj]ACad((SKi"a>s(NW\a/R^]Pjah6=5%\j8=WdkBc2&-4;sNdMHNDkH_+0+*d/Dh2`k=[c91Y3:TRrrL&X4
%J$Sg=6r4:J68>Y%>6sV]W$t#1bXhgD,SbJ3,cV!R,R*D#53>g.,2@='nhI&#'Jon"Ce:9b&CtZ+gITI9[`6TT/jl@t\$(WEKi"07
%<eT-\3Dn'p5\^DC*62t(C-UJh[@KRmPLdR2U!Wp`&Bi:8Q]bsJn_jQn<'f;q6ffk8/kPWGJp^V."qDA=.DbX6BJ^3?]_+(X.IjAI
%oUf%&@l)DG.<.9IOH&'mJe6-4c,%3R,E`Ub6X"S4?aaC,9>^<l;S!+5OQF`kDDf\$`iKEb(mIH"/oCtnR-XWQo#E`[g)q@:$5`<V
%8O.Ar&gtf!,>g0ji;nUkW08LVT-7'=>"L-,1RRPlcDbmtTGCmgK8;q:+=)A1rt^$j(oY#%KE>_mUD[>&i_TLq&WlH-#"f0LIftl)
%/DSLCdt45/!fadji8OI8C47$;DjYskMurXG,bkk^@T?4W>WsaJ;p6I'9Wj$nc4t:fU'okj#t.+Y:d%.]QaB4lr>c80AEld=9WX%@
%6p-)i`<o.Z%Lh`r4jK=W9E97Ha$aTR$..Q[[IOPacg[)'jXpP)>I[LR!)cN&MIJ8;UN9:Bbs;q6="#>'1Ms./<=SPUH4mA0mb`gS
%eu5eQ9p_gn?Vth<'`]L<#K56ZpZA3oJIi*#Ns8e$<RSR^OsP[["+_pF#hQ5'97@kS=bX,sW`CFKedljcbJkN/82Ac>Bq0l+<9`^1
%@5?^ScZB:PD8mFaUAiOZ"aT5qBSX8&`Bo966h&Z=,D+9@L?(t-%d&H#Ob?oe4G4(,.s_4gM2W47?kVC^$i4-fa!l&db$fn`4?Td.
%>!Ojk*WZbGq2=Q66kMMu3SBk[K^cnqVNTaXN&X\>XTE2l>VAYmaPi%9bt`ro_BE0KBIG(c-D$h;$,Ehu$6hf-*TL%PYltYHESH#m
%>>QSNi,?25Yi#2HpW'r0*'Pq>jb=kg5.0<j9WuaZ_g.Q6>Ws]`3tA,,@ms;g"g.!m`.dOTfr%$ks&<*\J/qXtQ-K86cP^>V+f`!0
%etq9*;n)&2W*g;@q=Kj2h$[7LE_Ei>%7;0KPZ-(*=]i_^\1B]p/%aLJo2iV0ri&k`82RqIELA)0^$6Lp_Ecc8[j%UN"3HXk2]O8:
%+PnO?;)Y$c'.bW%e#&?O,GpZUeN:p#M&b$_#=@)(O$l;4=\),7o@"%'YftS!N-/e7,SPFIMcF/`dpeF!X+dOrU4C?`1coSQ0=@`^
%PbR.T&*s3`9&G\?>ra\8;'^ETZ>0u->VJa$;bb,4/[WoVA=L<JHjJtA^8jj1S"\(><[AdF$-.og_QQFZ,&&6(/&'I5:mTHW:2oL?
%)I2YH?#$kgN1^`gFF"F4V<3:0B&a4EkQ*/43`-MbDSZ`WeM'sHB4!PTNfM9bU(KNe1QDk^U/EXK<I5G!,RD@4K<V1#a,!30fEg6e
%b*>ffSN(WE"GN@:mJ6@oO;h!Z38(u?Q%RG$+[$+[*hb=qdYqIeYE`Rh]=`$&)ZXfgjFQb7bP1tur;lqD5Q'/[pp#pLfc+cX.)a3#
%N,B#41h'_Z%`;4$($lr"7P=G'*$rj0GAO+8G+L)Uq/]>[^AFnJ4ToArC)&c.<9O'qR,$*NB7O2'8Oig2"eoG_ak^lqjZo]on<OVX
%B<Zd6+p3ZqB(6?4"4T3H4C8pB^$I!i6%q]M:*a:9K8Hh*IWd]HRb;WL5..//fUCO$f;]5g'%K"`,@:)rP%:>8GTt'c4bQ^*i_9Q_
%Yc$N;3D5TaCr\dI<B1`365Ms<-obg,+":f`iJ==d9!RbKaU4"BWa<?\PSOO)/;He38*4\$5J*Y2bt_niOGQG9lQdb+]'g5BV=b2b
%_pM9L(_Tn;1$[/&YG#Dd#Dse]k.1]WG"!c8bY=jc)A1K%:?sAp(f!+:WR>mYKJ\$FU(Z9\VH=\5@;r6pglS=RXr!8=;3%`P\b5V>
%7:+fpPTQ_]3KciVbH@Ws8'+ns9bJ'@,oe`m%8*4uO:$0X9;gAY->dX-Y#kB]R@,pVPl1sD%ClI.-+;$?097K*aEP\^#R?:'%cTO"
%(/Wt)"Z0B?XL@92/@I-5a-B32e(R%:N?,2m=4fBq=<8,.#L7H0R#aE,q%Jgdpf&h^W@qR^mgieR4tZ$,Eh*J$"W\P>/M'9OeI"V>
%:'r-N9lSh*+;rB%VsJ2h'LGV=&OdF`lt[4pm-AssF.S&<c))Y*^TiKdP62gaU4K:e,$>"#9>[?m"JF2S*UuKVR_!p#JT2;8#R>-g
%gn'M2/FrGpHIdSU/Tarf4'^%$"]V[KI8E/-eca:Ve=4fG/s.8#XesCr9?R01g8EFo$K17NLdM?qnpGJr1Tq%e6`(]YZ0rgUl&Occ
%(QU]Rq>LUX&`N*M]i9shS$`alFT$E5ZO>pKiW#oO>*6'IPY,dZImdotg`ub&9o)=Mq2SG9nM#V+W`#-Q*bE-d!-Ag0^l1hLOZF*n
%Z!&Pb?R1?4aaggoU3A7:_G.taPAoF.kqte0mJgJI^RA@%i\g!-7=Xj9eHWn00-]!qMTjN[Y6#WV>ttsd3l__-.1.qfLTnmlJ6N,t
%+?0d!E7Pl9#HEWT-5<,+'_*?7O:M%d"In>Fgd^(H1D_`3,s`+Q7kf^&C*IALSO-TgV%+-Gh2HpSF<OSW&V1F*,jK5k+_dgVNc?5$
%8UUIZ'[k(35<_U.CW1`5&r=&cI.!\a2EomkpP>TT8?uZOT0B`ug<s^b<`IoW`HJhUb])AKRD=+[18sb7cQ(H.Wi%IX_)0s-(.hfH
%j"rtFS&lfaq,PIrUu7ME9,EaVf=[Rqi(0W%pCd\>8`e7<r/247c&8c)'JVV]Kg-nN_A)/>.eB<l5LtO+[C'L1X`HHC\8>i>*ie\j
%]o'n*5O<B*M1>8lXV;]O2rlMhYmHHdRt\.B?*jnmc]V8X8CC1?i8\-9Ef'a8.9q46kd&Zg<subPab\YjFeE=hXci@RMikcXQ3dkt
%jb43mXu<3_OQ7u=nliEYnfBa57TsiA$EritL!+iL/Ydpf'$[e=kZJ3+X!JMg=h6%/R9qL+M\a9aP2Q-\l-OF_PI.]Ve%e>\^2N^V
%V-7R?8APt;?Ss@HU.JnD`MA^14'k9FbR!1u<qmrnoh[:%ATO']Y&V^;84BJiK7qT1+XpEfm)^6.8<W+i>N$?4+<*QR-S(n]e_c]3
%?AW3X_37NU#pbME+P."d_h'D`Td&bhF<Z+=d(^(=etPsFX9c*LfL1bB>Y7U"_-[J73u,\>mt>/7dJ[i"k:+qs<4'?-IlcNp-gG<+
%Lgp27FhgOk@RPo"X;kg!`JrJgY7qs22aJ!WS?AqjOVU7a3YBXg$I<T`Nd.#2WQ:S!W`>#[a71s0d#paZ^D4ULI\SqHc2CPg*(,*4
%5:XfKn#&Z-RR[0pEVgfY6)U(5-Xun0=7*!kd]_>O+7%S-K/Z6nC&&Us6m's=&8ie-P`ZZ9`K;S2VmhUBK2A!8+\Lk@C"mK\_Q(.U
%TF(">QU$J30d=*UmF9&D:gp#A[88TkTbK4//^0S+$0A5<CrrcrP*6&:6R*0T5]s=^,WZ>nY]a"0nNt[QSr\FM@60cAcGF*Rpu;:+
%D8g=?HAuG;5(6JDD/u'%`@jj""b6O1alfq+nX(Mo\G"B4<9&LKcogSDW>#XFR%!WebjJ%?haEhuA0MF8d>iF,1c#p0qu(s"s*$-s
%rA5!HJ?g@001@a23nVpoL4CXP];?7/8HD",45MgLl4$Rc.=A2t6EA;Lr_e7Y!TR=oO=kI+kYR?Rc(Th?/#`[?\"^9arh7HUbi?'3
%YNER2mbmDNE'e/3)^t]..F[BQd%I@:%8&GYP`V?*omdE!M4RspS!==;*@[t+@GL*F-issR&DU^M%:'jL,(-sSMQu4/esq0%LB&uW
%LB-f80u$t".C)Uqb9rd+iFrZFY'ts[M1/6k6-(E_T$',:B'6Ir/_\hTl9O;>3I[#34*aBe4c=Jo*Fo+YK@7.j!'FgM'60>TgJ!g/
%HR3_kLt-rQ[tY/%6C"Qk#@:&_H]ZJ-OWbhr%155j0S9'lrQ2ku'=/C7!9/3nr9A#RCl^:k`W=?lHH.'(`0q!6lNU>Mk,a"0EH@fG
%DX2MLl-HM>^k0FH^LDTJ85jX.92'GD*lh^1"7P5Cn+97eK%peo"r]Qe43g_2!fD"UEr!%U1U?'JdWo>(7JHf77m>i+8-Z#&PYrlW
%I`FDH]>*3-MbAG52'TbM4g#1]>*4=/fDF,EpNpjZo$.cK92EhR/+_=CC:aC9Mt912dm*l]QZZUVRGUYnLe;R'7OP'Je)u>3*F`YB
%KW"tKF:gLPh@e1+Xl1JG5<up]l:n#(5_+68\#RB_0[H+p&VhMaOU/51h,YL^]3=97l.ne_L8eXA$%R\857QHa?kK`4OIh";-8ouJ
%b"e=(V_5Sn:$eeu.q0>C6*?A7%I?"PX'339j%q[_[$l:P0B5PAhZ?M]2X?K_[/hHBMr`gC-pi>=)k<h^=P[Y7K!Da+lJ6!6d%Jgm
%86&O`C(Sanc[>>:I/RqF0)s[a\C--h=YhQ@IhO"A"$:qq<'i+Z:QNqSFfK6!QM21[N@'g$!Hd=AV8DZ4oCHnXq>A\pmsEIpHn^nb
%d-G2/5u;t6.7TI:?`-t:Ffu99Ji<`ElH#nNhV\iO8,Uo(2+e30"h(E`M)%&JTG'_TO.1'`3T<+Z2kV_]pLFMQW)TIDV]V0rMh(9t
%aZNk(0:e&+kO-n5cntijjnYoG=/X5YS6tL)p6#7d)P4Q\m$Qq"ji>k61;LWunUo_H9ZtU1/2pupQ<c4gMSSF%9&q2-/PSgDMr#HN
%:9_GUPeIn-^8U:B1pe5OI^A#Z&P+"+pH_oE.\i/rjWY<+O2WY44%3r?XI=$/?.&.0ppLFRn+?qccJeW528;log;.R0WHPiFkfLqW
%WrRWDL=\P%PGtF_(DjF?.s7'OI!MN;n%&&]Dr4^>9f1D4qjuC:hp-$EbFbL<Lq6>IN^kN_-2c+:/;#jmK&>\dVuPl,G/7@0ZM)e2
%XdllF[n@SKB(e:Bq2Rn/oqD6A]8%YRVFiHo/ituQktW=Dl.b=Fh;*>Oi]bDo4$P>CTkWPh:<W6Rn`*@dJ)/jf1LD%<2l>M2qRK1"
%,9NBZ#!OpWN-o:g51fl4@0:26]se,66ieF90?K1E<FB?V="*g+gr!'5gD,UI^=<T_NBSDW!^h2T&j\6N]KtXN3.F)?dbG9bLnt/$
%VbhqC_Bm^&MNFOLVn!20eE/"B#B>E.3K>:sk!l(=/?nU-2[K4IaU%d)O+\jt=O=/2'_S6<3I+89Wi8/g2C"[I4A7N!BDQs6Hf.=i
%@3%bJRV\T!DcV[(eB=m^N]NKTSPG@.GqV(tPeA\A<N%7E4+gjID<!pPF(:966'OICFm@AN@EUCmqhPc6><Ke?g8?#bcS!cBf[+1m
%W'BINPC>7]@m:kDX"sQug&-.$A_N/QJOoh\,OHIjR+la.X9A;^WGrO_'5V=`2umTeO#]WI<EtpKim)Ge*tj97'0t$MR=X&^rNF4)
%osn$$SC<h&XDC0JnfE,FoA._=hV\I@TrPIaU<iOg6XZMuMBIc]qsq5kkd',>0M8BKai%:/3!lT[Sd..:@V4Lkr.WMe6?RL2b7ms0
%\"ftP.$c*U(m8I/'G#"GOPMk)&]"/_l>G+(#?-b:AtDs7k<_QM<nRO/"2"ta=Ce)maD\jh/>fPX7A:+T(B=7^,EmKHi4?#GiP'W-
%]Knk9qBTI>`K3E*rKIL,d4PGC"@)(m-mMZih\PT.e@9+,0gPs9'GfOFn^]f<-Qu)_-VNr>h:[^7cS7X]QNO[h$J=k<]D]qIK+9Ad
%L9?@#g$1VdAOf^-a#D^b03bWlM01BoL/M5Yo`-kTX7b[52$"0k'RHZu.&=El*!uu0O!D+GClqM!4RF!#d6IMlO*n\9O`U_(*iZ0n
%nG?XL>Pl7rLNWe4Jd;#Q6gr_D6n<0A$cLXY@nH.C)iT5bG;/[*rP<E$Ckj_8SiuY\nEHj4W4LFEioj`m;i0on.>]edpJgnj.XZD>
%5YZH?I4(FQ>2UZ*&;%83?/,n.mUfO4Nquf#:b#<<M\V0*3=;h:;Et775s*$M)A;WL;[/fA$(*Hd8<HV+HNIc/8=?SL2e&,dKgat>
%V;BM73hrmOa=Sf9pr/-HeEKr_D$n!^8.*cE?U%emq@rapH$9pkSckImO=6J?1ZKaVKs]QDOctDp>_PP_;&,M;8AoEc?j+CB%O'`W
%>IB?YlU&rHofJf\(W)WQ]CV3)6K#MY86acE/K)G('!#Og[jVh4*uJ-\eR*JumgD^,qELPf_WkaqX:_k);`bW>pZS/[FF^:j`TMeE
%ZN2LP0tIqXd6g<4[q]1:"sn*HZl]C@:abln<,kDq+k@c>66#c9c+j2G'ER@7.7.Va"[k+^C"Y"lRiSgL'kMm5kgTYndI*F<CNG,-
%oiGZ%k@diKpCn^[@aM+me^_a=:*P?Re'la*]>G8%`BX=FkBigm!7/iN>B"h94@FXQH$40=h,Hn#+&YWNplJ+R2Le7H1%[3.`5oP)
%PL%iB<7?U15GO`.rZ>*8:*_rrTY(=I;,OTA*`,`Uq2h&&LH_H24S0dsV8N5od#f@R_75a>Ob$Jula@a(p<Bar5[ISu`MM<(Bgudt
%WS44&#WcK4=[YXCQiH?OG%/oGGr:gL&<^YbY4M#ec^$7885XrNbBlL^R?`l`6]u;4SZ^@C:egPKpS5)N"\+o(BPO[n.`gJlD\Z),
%/MMkS5rh!5nUi=(8sjP2[skYZf2@U@bVR+<+;4=@7J*QLbo:Y2./8kt'X!l_g,-QDIl*lA`&a94aC=h6.Q_2#Z[9aXpJJ,K9Ku2H
%3pCR&2Y%GY5&N5OR21gWl2eCZDu]M,C]>O:/EFlIdN`V9]i\3(>]q&FJ^<CP`tu!i60:NR*B8RW!<[MNWBSW9+jh=JCr(_LOs1lE
%r?K8DrdJNe%YWm*:SU\c@8UV4ksmqpqa`gP&`mXb?0GblVZa0qD<[%*g3VZ5$+j>uptfcEPpqO<,!>7Y6P>m2Hgc(0H#"M2]%ZLh
%mkhg$V4QjSSX/a/M'7096Au^B?$:Pij&T6rnQ,Sak"NE$Ir6ldeitu1G![:>%po%I)7_tjN?Ss>%K(hS4FM8NaL"fZ\eo,Sc!DWG
%92ueeL3IXH;&hk`(cCs18g&mW5"osmpA)#!7mn(/Hrlrq6_Y@F-.7Am@6$lTGTA7dCM6k9D1X*eTIXlVc/XY\7tI,WZn8VpC'0Kn
%FM\,>c5TR[Kp1MQ,%Dg?NYYI=K.)k@S)@jc(Y_]UhjZ[P_$`?1T;2=n@eD%_p+-;c+qe6IinF`/;1,tq\;CPjo>t"es,4SC&<:E\
%Z4.a=H(+W*WHVc(-UDPs2(CUl,a+S_nig\X4RONH6rnO/4l-Ot!W',X,$j]=0+3XsGf0mL.()Ag&9"3I;B@rS[,=q]igU0&jU$^.
%\n53N_I)_F,Vk+Z6KCun<AeX6%)4u3==t.Y-GAZLQ7.lkd0Y*d((hT"&n]4.8AXSATaia0&/p4"dZ'rkJC&s`+HriD&\38LWR(<&
%Ppj4iB@i[0ZfU?dR&+2k,_@;uV/LpkL=D>#?KJ,9oi@b$fDpHC^Kb*BWd]$.86)WmZ8BI]"ZI&[#q4P;QNZ]^V<%F$;Ok?2-NY$K
%h:QpX8_G3>:MtpF&dl#]?'C+]n5%R,(f$@-<L:7m=m_jBc+G&BMe4I<*jVflGSKYi\.l\IG(,?MZ#U8pg6q@*+I`q9gqK90-gq(d
%J]BDM-W=8s0<W'U,0.C9'/bl$g7i!]W@\e[OlYlg=4dSY5fILogd!cNFm1:Zgn;K0+<f9j^8s:K=_Q1SDBQk7V_hp/LF:BDm"(8D
%+Xh13^-Q-X)B<XW'nc^R=s<UCLl\Pa@$UP^8l0UHe\PK9"n],*"tcC0Ta\lh+2J44o*XSRmdMK`iiMYX%jB(ja;_B[ZQ1dK7D6bk
%f$Y<\nH]223Xiot+^1`ur.@]*PJ@6@_P."X%-qHP>Z5?/ZRnK_D_<af"2A+0Qa\&&Oe-[]f90.RO.B+#Gn`4-<Tn)r_G;AW,=A_o
%g15"4d9g/T(3I(]/p8$qX-.rjc9K)_4*;BchAEir(%k*sIdF9F$506*d6l6.^A#042,E9AgCU:\:KM)AZTU>B>8#\$G3&U+Pj!++
%2s"nRXZn'+J7=Q3OC.!p5D8oqq9TORDPWQff;2$Sm@>LU7L6KY/_m\"aq&(oEF4aap/V]Fcr+r':7NYD(!2oEF3/D`7b(^)rRo0\
%+(gg#K]rU(:V^^9dZj1Ph6g(m`d3LF40!E^,uriu;"j)tbo&rs84ctn>l-<!0;o42ic(nH6O*tMTR[M%lk`$rU_k?s,ta5$>]F__
%N_L:eBMD=Z0UQngW-nRiH1Q+b+Eha-?m3%0mu!l_ZSrF(;Z'#ATc:Ws+h0U*G4n.`\JZYqe12)iLi)qLJHEChb:X0YK%m<>hEsGl
%%8#AL^s_d.9"6Mdg*kse_(L''O/`$\PB9n'q<!E+0@!X@'>@kFS"H/0V@+*^fB-)@f$)Q$gc5*D@dsM>Rg06maAaT;6*)9][KT:>
%mJ`!`0\'<&/$L#pS>td&l)b^'>P>1>$'Kll(rR#d=cF]\'V/X)a!iWM"Z,.$O3Ih,@$BE+,T(*phQOBVbKhGrqr!&B5UjKn%WJQ6
%f>.N&Kt/]GYnWH$$oIUbM9c4B>nd+_l4HAhRKc)D,5)["HV0:mW_n]n<(lcb8/*%do^PqjG3)NYPgdlT0\NaCTU"GlWjRtW7+i9e
%(1Jj<7B"3i07J<mq%.:J6fQR:14u$0.Oj)A`cTO\Vuk]o$8u>.Pjp)>0Lre0.GpZ#4/rG'DNY<f?fX5`LplUO;oJ3AmnPIbAS$KO
%*h7?Af']itA6^W$S_=,3X_s#YE%DpP'0Zn27l?g4^mCY(MPq`hn`_Dbht][fAu4.)bK$%.9@i!*KhHf'*?r1,-*GGZ>Dn"*fDASn
%2gfR-qM.2=,!@_H?B_j1n>\Z[DDrg"KIX:*=="DcONak]?ikLkIF2/o'K\31)#\gr,f(k&UicmR)3qK5)i_p<CQZ5sI>Btc6k'!D
%Ne\DedE6<&"`dVc@637_i'@mHI4>%r')D>sOm`$#&lh84J57#KIi#0\,KXh3FL[Ke7>2gs2HXG\g]5tLF79h&Pg+.pVs3)mUl$Tg
%cnFm23n8Qbb#k[*7=;i#M%F.u4Qp")%ts*omTdJT3B5ZSOa:K=',bD0X0lPO%Z[p_Q8<9gH]/:Ue3Q)]QV2!^6Oh>`roNF?hdcD!
%lUS.H-@E(D+3A$LD_sa3K#(l_coZB!;-1g2<E2:@qPelkOO6($MqCI-^JAuq,Qn>ciQ%'\9r?l[J*L3`oQ*juimZ5$^AF<r+LkQW
%p\k7'rpOoPrGMJtYn_2@[!mRLp,@1NK+]Dsm#Ygid23gZ@MS;Seu$Hd;M$,\S^:e;JMG70IT8tCPtEPnH2@kX>:6d.KF'=tTXX.(
%.!,$?rc-bTDF*ja'j38V4,u>((u7nlb*uX)X]F?!#;$m0$Zb+#s4lDYYoW7c^H9puc%oO+"ZYWMnkMZ2G91)ABgTZ%\bb,NRPu]Q
%BmH;=8m]W9R#Xo%>Wd>GUprAY&Wl`!fI;),CTaf\bs5qgFFWDPc.u-QcKd>XS_uF\CP\SO#I(h]"fiLK0dqhX]=KsTe"ip6pT>.4
%/eVkNb=@aJ2,^*S6qmj_%Vh\:`/,$7]4o!3Xl/c*l(4kO4Hj'oU7RCF5*>eNh+Nc)X.!=1dFN[F)P@affqLXcbrPYAopJT$es<dW
%HJ*cDh[luT!noPp\6$h`?t5:9UO!pFm"-#[S_tcZ/+Bakjoa*j_,F>BEVPsjW!Q7\:$&8>l,HgF)j<cS[B)^=BX7QWA"W4=Co=(d
%R[h72^p/5..-BEc3Hj(f]!lbBL!b*c$S6Ac`[3rscSj^mHT&aPm_5g-/pqUon1"rd#H$Xd%<6.n&$t_KJ$=EP3VLY2s$-PZ^]13]
%I/E+,p0ZDue%\,QJc>UtqT"*\qLAF\HLCgR/\_.PQiHOs%qFZ"rdXqC^O>^g*D:"8T)\JUs3!Y+ofrApq:G:LricA$044bLYNOO6
%/`ass3`m`5We".lY#j!_38FJ-oDn*(Fl,seY\LiD??Im#!0sr9]^N%/Q&Klo>niFTJ;GF%6g9BOdBO]T\C@b!GT`TgN2EE)6(tRY
%L_C>hQA)8VTGT"HKLF@O*-&b>P!hm4$"pXCA4\218l'Z]"ec!^=O=8bM[f^uKQD$%XeIuF;S$qqW*iOA?a);a[l&G#QF-c,]Rg'7
%9rQof)H_3g4,DZB*pA&WY[GheKmr]043,03oD+m5j*U!KIP(nR=E2gb"P=C_3PmaOP]%*<HidY6+9]e`_,Q)&3]-R`#%B'Pb:Zu%
%FCQlq\D*Z>'k_)N0\&>Wgul;A417[;(Wrr0?+dKC$YocD#j)pR.K<d%I<8[UALGAi]m7_%_[S"<j_o$DS&[QBY^U^;IC6;C7tLYF
%l$N*1Ko$0.=#d<hI@7YmWuZK*-l0)A3h2!gi/aII5Go=7Rlg7SO>Jb\aj<PZ(02;`;/(*Vkr^bgTm=4g9:HhrKdq])!VO8HKcUlo
%pZZPO_C+9?8t8-t4\dC?FJg]/JFj`KU=6<rVVf<Y"F%/?bL'!f<<:C]"?EX+(6OE/16da_faqbQgu':1[k]eX4%-0_qj'a76o<LK
%re5A1P5#p<Y00eMNML"-ULm?Fa(9"nq:3'';F/Tp<A*_*Xj;E&Jb%9pN7*B([ADOd2jiODb^1$1&,SS=ik`o_bP)dtDb?%$jS&TD
%P]MjinnGn5<pmNooCm.J=6k5#mr/.,mI<Q/E-"AFLMlt#p\Z+eFOSrsC[\&W^:b0ao?\%P('"P0mAZE1hWlQ*RocW:h%s.`[*n26
%+8+.<V=F\c/+0CcX\RX>Gi0`io-X$DSN#g'lDH^LrPDbu\"!!Y:Ah)Z=<eoY$\gi')iT/`541qO%HYf%:Xom%roWYl])GC/%H\%i
%6J'oGVMVY)K'(]f*!V]To/go`I4a[l(E!sj"&Ka"G4HE^\mr.HX'cjb]3$EmcVH_#,:PmR3X]%SPPI*KWb!pt'V@5s6[QZo$a"mG
%OM%<5Ph(5%PBW.`9-'`%WRrfO!k"Q1O9CL%S&^5%;\KJN.%qSWq/6a[.IqNc1bI12qro:1L=l*qgRJH;YSY?8<-Xr>>&>k5";>H/
%JT8a0k-,(W9Yj:=PEJ.HAHH*%-5gb_J7fmkF=PJ5SX9C<H"7PQCSml'm>)m2"u/oZobT6][P4YG/3YCF/t$'rqZ&/B]4K^R3Re[m
%D/H?ANa,@SNGtSH!ds`RV_Kf!<DMMcqLI<7j]<\h7-8+Mo4i(c9B(EN:M$PK=B&'\o%`E?T1dO.ab@-6>_)W7f0T1'Gf^KAb9&9q
%+.o7q&&1j[!W\"M[MbQVR?fj[*&j@a;-bd&#jCn'n=qLaaKQ$dk2"1VMpMZ@E_LP7,,m%WfHYF;Fon<nOW7Q(mr1U8$QXU4_);Q=
%<;tUd30N"Neoro[,=,Fu;>HnPqb#Mr",#4[M(*Ju^.XVo>bTM\2(K@q#*FL[+jDcUe`<%35R,I2&>U5W05uOnV_Eh2IC`)\Q?98K
%iP7+UhNYZkNYjjVd5K=Ei^OK4U['e`MEcn,4EM'E(U.2D"X4b2r+*R?.fHia#sjeI\OYT(SgYbZH:'MnlSS(1$7E[j8?TP6E#GuT
%RUmKRHErlX4n>T'!rR%>8!cpi+l:eBJ*?L;&&k(O=U*`mM"ABFotIsi&3mTZ)#<+H@-Cn._ZA>hrBZhC`XY:^f,inZO6mQ$n_cTN
%;#-;:KpfMbYC%]%qlf59\-eduX6>f]f[\2.\O6Lq%D`N^A;"^Sgss9BpbKl&c][W5K/X;L@<#2IKCDcD*i-`O83I[hM9aJ;"0XB/
%]T.YtCY1I_%n8AA.68ua!$I(L8,+mIVtL\h2qX$&I6p<N#UFNCT))/'''W*j!rM(Z_h"(qPP#gE3r-bX%k<-cos/q&*<PE`/d)Le
%&dh38b*L`Clk^:n6Xm?!_A>PhkKkW4$uOtDOB#jMe6!cKcoc51LU:Pe_QI3c`EHr$NXj0-ru@*3OK"0KM(3SF$IKd\,&:Aod<-YX
%D=VuqCPi`HlrE`:WQh56R9)UGe47"i:CLZUFV*kJGF:p^:[5&MUc3Hu[)>59qpBK+0@jB1_dnV*K5202f.<]U@c.6gN)1++]`XXm
%U38iQ"5g<SQUbiS^LK0S:B>/1jjO?59VZHd+.OK[W?;1>Zn5Y.Ir%V@a+S84lrH8Jbg+%I24"6/77iE8jgP6a4NLVGGjP%XO!V94
%Lnfg(B)SK?l#/$t`"/jo%t-u'q8dnN2>P>iUiPJ!\jnp:#l),cH@O1P<"pQ!;c5LW*`5l8l45<n%t-uKH0@W<.\?Km](44''\<:(
%#00Lkk19g]BmK]iOF#dm?'-J,#ronI?NV7bMSSdo/KbUC&sW]44Tk<8%N55t?(3"?,=#k=>JkGfCHJU+ATV$rTUkl'.O%d@+oV+\
%L)QeWY0a*VhJ)hB\F'Sfitm[BfE^452qJ$!2Sr(Cg4C)bZ1t7+:]h=!ji!!*2Z?mpqOsdRmU\@W\Mn^Jk]E_q<RX-KXS,8+;rqrF
%#;CrH-+"E'&571LSJC.:'Rp^1l=(!'%`mL4G4X^c75J#>2G)(KLlS2$:.?cg*JnC4Ha(YAobj<O[dCucorlu>p30L(J&h@17lbb#
%r5o/,.S,sbT7DQ0Q.I.K,QHMna!d42YcVPI<?RFoa$,N28ug5_VuO+V,=QqneURFhchBU;(M_<OFO*.;roXVsI3P$L)5;jM.D[6r
%&Uc5@`UiIp7PpP^,D[se7,[je+a^/G6h'67h`'7KSh<'Gg?CL;Phb#iie(iSN%aAK*..JQX:W$i48OY+(EK],]$6#fFXsM6lc3@)
%5P+J`=+,N!N7@_%'JSs;8[q!M"3B$_-?rdP_0g<':b5AP"gQ1MnXg.a'>[bgV[Er/lkRN[$sSrA36"=Y*-ubhfc_;LleKPpWV(ML
%OJoXY$UcY$aU*-RrTYMll\NUgV%Qb<k1Yb^6IUQLg6Pm*+bP?HMYG>Z%Hb=#R&CS0@!*s\[+PYHMbV;/=;^62k0/_RZo*?^gu?b2
%9#=LV3">FK.)9-:W@H?Ij@7]n[lWEkEBQ@]JJ@\nRmI+$:`/W=$/I>JILkc;(LL`V:sQ:_`:P\%*fpb3DuKTXm$n+?qL$QMnBq%a
%LEIZ2ih_a$;A2ZNfd*)hR\g4f&8l'<&cS%FI-,Hn#N;8j;XEZuR%sE>\iNbjHoUb5]0IqXfROutjD*rXo)4g"Dl(QIXcRHXH2uEF
%65[C)?KQ0LZV6]1AP*uZJ%`VL[-O]NoAprgGM`/k4*Nllj,<g6<-UU1U[:mn`rL^"$e(YA@7F+9!%4["F2CeFK7`?SbKJfWG,n-&
%7bIA#aRN-':"G@JU))7^##rbN-q@2IFbJ#Z-Ha@Q)EH;ETI2+Y'hR[kPQc-/mrmiHG/_#2/-U4'FZX)20Tk%)OLu1^Y-X;Eljf?t
%F\8T%0l9sT7K&W5kF@74-NYe_:.6)J58C7oK!S?6\7e8-k%_DZ5W1(8;0&a5j76V7*e6gC]]SnIjo1CQPm9nKdnSc949OY)BtSs%
%/_>K]E/Ud\Y_GE8n_L^`f-=QR`#:Cn#U3^.ZH?LCIrXhUE;a/ASpf'lD*B<A3=6afSsNkM7%^b$8Q:$9@edQsa\LP#`FK<%Vs>R*
%igQZM2.n:noHG#%QWNinLX(liEN1BC[1f?re*]hAZpGO.('mtO+jeSNr0Up*6&d'[E3I[u9=K4grBQtN&h$eRUhr0fSlISU>;NtM
%.W7PeFfMX@g4qdJFd%=lV5f:5UDfS9Y_#T/K0oSNMVoVXGoBhe)B;K#KJ(s@J.b>5&#im%l:8F@Xi5H@p8Lrsk\/?T[9M^`+*m5E
%h2`S(D-Cdem$0<nJoH1Qm$I9&>5k0F-^cCr]MU.X1R9]oE>0;P_\>j]^!E/Pn+6WOoL[;0^Y']0Q3T&=XE,8o)M4@a!e\9YS@B^n
%@:>9u@RhXT5buSh&W(p,=LeS!*,qu[Cf"8+WMoGf(jgG5hMWU(9cGY4C6lZ*HI`Iq5u7R@#U4A'!QW?6A@WE:_iQq,.s5XB:&Ut%
%86``OS@n9q&!Iu)U*L<`JT*Lj-Dr+Nf^j>b0d7:bEQuoWHBB6#g5:`A\ggO?j'R,rX7HQ8A<DPe2W7=&W8fAecVuI"#>rnmH1S*u
%%<fI%F)OV;Dg`bN&:/odAS0E<8=68aBnS)5)nm3gm;1eu:il!Z/V<PXc)PH.;@e^ZN(";S7)p!pOS.7"bG8JfFiQut;U*NCGCOVr
%Ok9i8Krdj$^64kN6Icqr?R=H$1a%u[5FJ^WOQ)'3JdV'hO?*H][tl@$i`OVCC40CkPLO..*!Je5U.GtG?]K];/jZG1Oj1>6"H^>g
%@P4jc]Pe2lAf@)TJOgc>c=TP-"BC.DTq*%aDA=ts<L,%<*%c$1\+%T"h#6lTr=*>s3;=NZ_W)_9(^-o^;]0B3K1Z5*j'uiA,9Kf'
%Ibd(b#8c5n*ffSOUcpo]%k/'E5,:M-n,Xh%*p"P&iWRJj,!l-o.P[1I+_;9R5HdgEn0*JuaH&hjar`n:43om?jV.??Lf.R`4%+/o
%\;r+,SuV,AoKt"KJP`$K,`Z'TbrnKB5TSLdF]jP6_-S<JT6#B$llScqW#GtYkd'8ii"'nZWo7Q3W!+c:eX7?%Q5V/FbY/*Gi0o>d
%<O08<Z+D9T^X\l9q.1r(#Vrf-q(_q@i`-iinD@W5.n1`sSU`^Ccomi)PI1`)hdQbga934n,1Z(U+%ZbRO^YSrM4&tpV3qEgp]$Ra
%e,;9'a\sltDT&'nq0rejmUEuee\c%:JO`<oW[`2E2kKe-0Xi?a"kRdBC=LF)#H*;G;bd1Sj#H6+E(q%1YE8*%]eHSof<t8,h*':/
%f^XD5:`jrOo-YU7eUeil/k(3cSOL%[C+8f\C2e+ZSgD+YIh:MFK7)VuHY?]0f.Q&G+5B?pI;C9.,Q-J+EpW[`h/qrbr1JT7mZ2cd
%jk_A/hk's9]?O7&Q2`TK\[D]7*Zfco'(7_sR*9jjddClg5Y&E"E2q=`X[[W#Q=/uU0)e6kMhG^lDWum@'Yot2W^K07\[th23`_Yk
%U8FmAP4Y<CaHdCq&C>C]>`Q%i#fH]Y7S5n#Pt0c':m8^-!\=[I)6g7M5(P&*ML'kJ&O(d/#H4Jg>p"p5Nl1KjMLZcnC^\FpJ6P;m
%WU`gCCS=M-]^pT0Br`/4[Ce4G"McoM2<Uo?BL/AJ7.o^4"+rS)L9+XF*2_$Hc`=bTiVWQr.)b+u#CV&@9A'@O.K&AiLTc<Y;"nMQ
%dKr2kNQO`o+7YS0:S!OE9luXKBoDt`Q,'M*-9NlL3dDfS%t6!)"/ouK\=p;oP#JoP4SS[Nk7WC3crc1OSZqZJV7fuAb;T?>AaeX^
%2*Zq^L6BJIr160fp_1BP%?TSDBl8*3FC9!NFi&i.i`ehF7*caL@u?<J]n>UP`,]N._:%_Tm&_dh$o]RCl/'I@9f5gD$tRPZ3j_<4
%bab]O$Pi/U&mrloXBpdj)Kc3$d+Zu*!(M&mkQFSQbc8s"66o$O/LWn)/oH;J"[/"U"HR"2CG$i(3nj@WTZ>.:-.*%.E\Le4T<5<S
%@0NIDH`<WKK%t,Ur.*Yd:rGSk[lL^N#pr.(%D*b8((cB&1Y(n;iE$E=pMQFLI1VB4!nH`l;h\+knrrl_l43i'DJ#T8P'@Phf6T<*
%\4`pd_(8"5Et*u]7kp\M`F`L&_7]1?S$-Rp;\*2,fK8?Ec'aQ1;oA.*@fE/13;l)f"U`B$,D#UKJX`[.>O`RGGM=em&5(,M!ii"1
%A&'AK+A-8.4Pe6AZIeMa1ZAW]Ko$:%#WF\Tm:P<e",P-a+6nGnSQ*jES2pLGYr/f/R7eaTG^!,9T1IbUnOgpuKZF1W[8(b+JKg-5
%D@hj@Z=*W?oBA&$o2B1;I&FV*3t^a=2(1_q9X+,_H+C>GXsMu'?;KO5XB!7QIF<-b7(\e49Mju2^'qS+aNU:7^kE*W8]i4<)Ot2,
%>_96a[JEuM-M`5,LZTRPqpH'g>J;/K8Dh\!<;TDp9-&KB@6F2?kPH@F="#Pah9F>n-X"BYWoVW#M8.m#`nqin`c&>p0rMfBTHK#$
%cQ9IKA,2p9$VWdJ@1)\,Jhn=nA]WQ:COal`pT+$V+iAII$"-O7a/R3gOTImd31?n#jV,=Q:CI^W\LhDm-!jR3B/URr82<14o\n_(
%][D1G\#/NXO#@!+SO@(LotSc_J7T)YE8k/I*tSIL3d\"=.1@5N:r$_MC4Xs^-<O6p(e[GmgCLAa%24,(*R[I[DYi\HBbh&3qj/=^
%_`AlLrBKr4k>+2W%aU*9[M(2ekpLD"+.f<1ZMF#1m@,d<e+ssFjI:jk[c.UF(rE,QEFmg.FtD*mo]<7.6K9!uGheHr5rkJKr)1u:
%c)tZ5q#cS*BRA\JZM<lV[l5>Fc(^S6IDQK4U<crD:9r@;6#bIEi>2AI3/IECO"BrHIhhiFc+4Q2C6R6_Y@]N)EmrgqTH.Pfk.=J4
%(C<)V!6lo%n&o*PCdHGraj)M<$GE!JVR%0J)N;GkAn_4*_CuY(M7r]cWd-rUFqODT!0P-$/][oJ.<KG"<bG2_OX7N"U`t\"1)(>]
%]<3+Z4P_$BZ"G%H&8iGG.nY+tp=0'9`:DiJM*Vi4i[?2Xoc`pYTa'U\0JCHrl=\fCZMOQo.@B5*PcXqX:P8^%ZnW5/]28\.7'd&>
%EhpOSGk:Si-j^(#2?:SBClmYt"HO6If?K%!T>qLfg?G4mP0^fPK;T"#QBSk;:9@!ja^`YF^Ak`;SG;5+1Ue,?#(Gom/WXJR,Cdq"
%H*r.:4h-"!DXH>bh@Rg5Z%'_1L*ToaAG\c0Nhi46#])_mDPNh78n.PF3JV4<3_0e1YHm1UU'(cA_A#6#V6ft8]%Rq?Se`3l="io"
%WI*"^dE5",G7RBiQ-O`g2.tf21S`L>>T6O0@oB?9"X2GI[2TS6GaQbr17*+/H:i3&Tb\p57gtJKf%QF)bYjI=gH1-@rICID&BFHN
%o>]ud]+:%r%&-Xbi3B`+6Vi11`08^u@,QhMZR#Iu/asD`9c:pC7\T?&Yp%%:"Y7X7p*X3!*3_H?C#Z#?o`(^/(IZ&r=T_U0r?adX
%EMidtXABq(;h0I,h3t/LJ73/\C<#'HfjUslmm::"II4lc)-n7WeL'U&em&ub;lH)P1JtI_?;1lEFM-s+;TUd8crBM>#G164UdPV-
%3psFRK7koj7_4[l^WFI1E$F2s/K:.)geA,A_NGG'o#jW#jX%"&6pXt=!eg]1?V7>[Fa%eQ:Bs'k)-2^oeI:,8kMV+IO(\e>Q]u9I
%6u`7%+ZM8Sc:>mEi!CYa!8g7+^9Aa%(`JB%.$@?L%V:C^Xd('IpK0%$2jVhV*W<X:+1<[f3J7?[IAT;(n4#bub0S-Ld1l`T(UiSB
%[PK`CH%OSA,_Yp9Fn:Bo8I[](g@,d!(*#,AACmRiBe."$FsV!mJnXHB^ltBTnRMg-?lm7Ig%P<%lGm/KO*gBNUO2LtefN>WQ\4dR
%%nriG@e*IZ*k($A8Xl=1m;bpfl6G`_jdIN5<\Kdr!Y2!SOsVXrSCklF<bI0L5,L/(eVT$@#+-nI%i7/<>4,R0^"o-^n"4o4ea#`R
%op8SfMPQ)Lj<1tOoNnMc?-6V.(,?F(Z4fH$/\,h0.0P9;&<Nhes):>=@:sO<M+I$_+PBV(:,bX0`GYP!Z$3KQXTp*A6]Z]q`1tp*
%>0CJDbNL_<NsXLO%P3B*+fNP?:jE.GWEArHBHp5fMZ:8@?e-2#8*b;<F2:_+c9s9!dCj!#'m@id4%oaoj'8=",P85lD8C:#h&nXT
%*ekE"NX.![#4[tS`igudqT[LRo/l!of$8MgChI]?S0/i-2%WO<99guaGrGE/I(_C;Y<T.Cc;?d6*>sq2+Qc+hiE0.7+3QQ:fY!\<
%*<j9+*5+DF^0M(m1P1JWg*TR1_<L'YIlN=@,`HPflLSS4\i]'M<[Z#Z`)'AUS;%rPD[#53.F%Gt%g`>606Xqnr/6S>?2_dPX&?4W
%=eqG3hig]bMoC@k<%/G$rJ!$*)a\.Zi=_u.-EWcK%#33*RlB@sOJgYD4W`k,>mWQ41=.KNG3?N)BIaI_/[Lka3^@)8]8F0o<V.mX
%;ed/o"*?gt]jD@07E3/6#d]%M^JgJQA,pQkTHsZU>aie.f$/HL@YS:0;oCV?rnOq2XM0R+OR.3ER8\e6$No4H>?qqc3a>J7^Ts(:
%4fL0e3KdhtUsPOFfK7>C^0E4Zh)k-8<^.Wk3JlbO<!^UUrFVb%hP_q2P?)fR1arS7U-,!$;AgWcU=ujcD(D2g=dh!;jbXFo1L%^H
%_X-9h+p'XeEEZ10+lSP-I&9;cEVnms&e0;4&*;7NHQGX`nr=!PZIMco#We+O-'a#Q9GWm`E@M=@>bX2/AeEt8L61%G6K)u2RJL-j
%[]dKJ;MU]':\Qo)eLcdm$+Fq,9^6q2bUh':O'0./SN-ct"l9f8%Df@emu+3sdki8If&ee8:g"OK*lCc(h?<:?M]>`d'_mY2\KnU;
%$np^@M%Q+D^I?d3$T1RSNf"+':V<[Z/-eP;edLlLNqMs`CCu!`;#,am-J&XngOfn%mFHmdl;(N/RTa%7;^2l*2QQD/"!@,,81J5?
%<ePDjL7)Y^Pj>:omAn!1`KeM:lB\,^W3?gGV%3<Ui,BP]bfuVATti<!Y-.!.ZIY]'S[*<HQ$.4l8b3:8Ej\X!DU$mZd#4b"+E)9t
%*5>>gh"RR;M(5b2b9T]k7f/\Y8do%uh>9lON-J\a0WXO(%L=?%VG19l2bgh;ph?-W0Lr(q[;:uC;PDM@%t;7m_*HUqNa0.b$P2lN
%djLbq,</Kos%"ns+"iZtYS$f)R+Lde*Mm``M@m%CAB)(i[dNa_*9SK4nD2Ho7$8V5XFU\I3&3%aD56Hb:(s+,;@r4EbduRgpO&&H
%T.YnoB8b=O)Jc5[1D2R_TH_rTKI(@>FRV\>=XliNj@J).-4=on[)bd;KqZ(>2-a)3cQ[oI?sc%AZ>@HUghV\^=2,D[oM-Sad!8km
%9"hi<EbamL(P.C'6J'W6o33XoWa>pdgK`LVO0$]C+\?96`X!9\&N-.?N"e>+aDT0Qn;F+G8!#"7m!q"Z`;lQ!NJNP68mheea#8th
%I/]#R=P#MI_d;hA.E>oN]C5E4"oUOo.o*UT(%gn@(%cZb"mLhYG$J093cU8&8Ho5FPQ(JWqM?irii>cMX^Bt6Pt8r%I$LAk3e*E?
%cs'e'P\D,i=3p<?mY@*[SUb#31)Ys@^up$u^"o-a+!,C3Dd]ED]lqfWU#aI(o,@oSD%g<P!LfE*W$VX'Aa^p$EH<lc:!\3rF<#6u
%2:?4QRPn>i&X^9Nr04cR8T#aO:>&.FfQ/*YnFQShQF3FdTWqss5FFk$?dk_AS^7;U**Rj(4M$!FY:o5H>>jCjD\f?*+=j&dG;%VU
%Ju2)O-]fV@Wi/dEn\A\MWd1X:6M4Y##/44an2QRh_GpUe+O>"-/"TfM-dXf*_E).W-QSQ(iFrFDXa6)O.SrERi$"<;^?Z&]k#+`L
%F/>eFJdbk4:OXhYR9.SUi'LD76d[I%dm%J(E@k^DW-IH5hrEnd#2_.@8XSVJ)ulfbD/pXDXfaPMKR>VXg\d;Q/9\90B";P.'+.eO
%SqDik,fCJo5r!fJXM1,Qoh#Jr9gAhZZ8(SrdY-]bgK%+_pknOl`9V>"D>Zu+:d?WjdFoStq.=%>=b]qZ>!O@u5E8-VAk?14A2J(=
%[0Oti$1b2;E>TDc>fFV!$#q`q_d+%W!"H[Wa*J3pX*+l)NfdDF#'J>X!.h'u,`$m[#^9C!:-p4)7"aYaF_DqGV`f8l&?:$mU&+&e
%7bFd<F]EI45^`q2]Cce`7(NpT;jVI=f,6eX6jfY_O\*GiaSX#9di&9=Sm"<_]D:kRP!$]T73MLZRkqCO."fkoHh1Fk0hRnN+,Fc6
%U90kn$\B<<QUI*-&O^*g[AjZ_,jOM7?jUDh71b=@HBa'?We_6`0=i-%I\;RUP#!Ws(o:.h+bshOJ?3bMUU7/_SorRPd95k<q5$Wj
%m]*%W*?.>!!*#Xkj7\lVogmTYK3)1#\[QaS7WoqS\Vc%oHbN[Nb&3nTPE82_82k]oP-Uu^*5`j6TlP+P^WnQQ`+A(=jbYtekTq]q
%j"9Db/1f(bn,oJ\OL\G'5F>$(:l1&tm-^1LCfk`ao%HG/nq0"s\&+ek,Rf41*Z,@m_DL:).XG4#dB26s3u),jFK+WX9e&G-4,Z3Q
%R/nm.\5,inZ.&R=?;MN,(+TDlf!Z"<I>]u06Q<,7'0e9L4)PESf%''6@F5QSomgY_%1Bl6VuW:O4B[_Lj[1Ir@qT;ZMC"OqYE61<
%<P,r`H=u0-]-q$.d_9t!fE`(HAb4G=iLUX=/d4Pm%uQ&g8I0E%`4^iM/*bP'j0TK-Q"B=VkVlkue'XDE#h>OPTh^YnM+nEPfS&7c
%Vk$QIY1lp%"%e.'#Dk2X\f7'@c2(q2X0dI)^fM_PT\,+h'\*0h[?1#GIcRR&8)*'l$FqWH1&M,q+I_A*=sA!n2]qPZQ%0)-At;_k
%Or[\XAZRh+^+l1862:t//ine\ZT7*$Z+q!g32/1Y^R\Df>EFCOooGA/$q+cBK`dGcpa8sfpQLP*Vig\oDCLuY<j'oI;00b5WM\TI
%CU2/D6hfUtq09.CnOGV8T'7AQhYEXpl]f\T#_8L6;J?9;Lk'kK,XmE*GktW/:.%sH&N<^"![NYFWeF0Q6r^'T>#b/NNCb"bW<BFA
%CPBRG;$,E.Rd==Ge/#W68c%e/Ut+L;&IR2rX2oKXgN7U(D*833U:'VU9XdQ'83?.^H4G9S3Phj?d%f3E@f?.c1B`TMX4_+gJIou5
%<=G^n+\^&&EL%Ku*D3_m8U[iU+G1f_=J?BiC,SRT3;SLc(LJMd"+Ht>U12)h9SC/a1q&M%6!nil8D41pq9V]7Ci7#C=quP^3lDK`
%Z]@YJ7BAjk"Yh?Gnu.<Ir+X;Abp1R9d)AM&ESW,a:^G:i5>'-3>dcIS^R0E<+Z9'OM?s,3SgZe&H#RicjDp21jpQBd'htGCk28+P
%iCXY)KHb?026KbcUe]oEl`d>n_:sc)"eD9.q]=j^8@E>k39H<YmN[Y6,>Mh<mo\*XHd6D#GmpE07c,c=Y&Fi'MR'V!AlD6Yj52"(
%$1i,Y9-eAc5AO/20cb_Us5r64N@Y_u'p%h6D1>nE)left=H-;c0rA^-Mt9k^Ds])3&YQA=1*;pFL<r)[J[jb8mH+@dmp(/a8WG$C
%-c#a9Qb<qI,$pZLH.4Z"5X5G"6$pt8=Hj"?!o6LX<fiu(YI)V<ZDtKN7m4OI>_(aLg*U/AiSibS%s.INh1(ni$Qu4`NGG&JG[ZN6
%kWT=BC!))D_V7A\_Gn@:H]J\Y5Y1j%EDei6/?4$MDD2"g#.$s^+JV*:fs4P]6M`daUig1L/lls3-A>Z?PHCSk7!GtG&I$Tk9d&!m
%[:9fI89UTlWc1BTP5"ln`N@8.1?G33O]1pQd'hO15tg/EU'*fM%:8nfN6nutjrhVsNh&mTngOY*Zl^*9ZIKK8g%j\J]>Ysl9t>'d
%hD/BD0GmbNd-EN)>)"[sfSC/0RS;a!`&5`XRI/GNfNWf)Q&[e+L_pFo^6*IH+KMWdlbCH7gtt7`rO1Q"Gr5Zt7I3gfWd9VTPr/(?
%[]#0-*red2TisX^^4nS<lj'ZR*^E(FRoAu>$fbFM<%D.n)K4]WEoZfK+$Xh5S^EV>&0`%7Qb2*'E#i3j,`0l=Bml2',&,"#QN"*g
%YK"[(2FP:r*)?VjpS<eIa'cm-L*D#4:ctc%f=!IFT.O5S5m'VCLNH%*&ObWZ<$[$5CkKgr'3Ob0X,;`nA@DGp3Dm`V;ds*SLJ)'Q
%LT"YW(3TG:>Fp!JHLYmF=1/?SE$)1'QJ0#b6ieXgH#**4kbFl-&Q_iHMPA&NYJ')F"];LVRn3g;Dd7AYQpS^EJLVbj<+V6W)D7H!
%em_V415Q!ga(\]:4R"GL52'3`@J+@Pj>8k=4#M&,nRh$6Z/j!H_*?K1.phYC?f.<2**S116%rsT-8O/pjHLF3;aI_P[4-d-2B<oG
%R1"h*QtI-s.E?l/h\*5WU!c(8Ti`9R)]+.aBW>Jp@dr(<b!;i0`)o!\d$=i6kjgKhKjJ.I'VffelIGsaQ7#e5O%o-ZmJ#0U4iF>-
%k\<0<&.HtmlZ^LH_FN2?b-Z:77#hs)A<_&)=<dN))au:K+B`8D[TobW.cgf%e4VhbabCEppdW#<XL<GZ'B`2nlZraQYuU*W86mF+
%CM`U%CRIfg=tG,+&AOe39DPJ`UqV8FiUg4C^+5+Yaf7B9CRuMR$6@a;!AQIa[*M:"S4O$W4(@%c[3ALDWcI3R3CN7HE>baGTfW:7
%7hc]Sc>?lYQKhAN+U:O*/,HFjmDeh'QE4>jY:g%?PTRh:QP/HrouJ8d@4>hm+L;]Z`Z[<s`=1gVZ!pRgB&H9IEF$13LN%P+aAS1:
%,mY6),=U]WNY87:A+hjNB\3!pbf]9P&c+3MK0VtPZA-O/@_rlsUI<F5hl=6P,Bba57k(7@&,XWdGcm_m<Pp`4/fNYbOb/`49H0@$
%Ui[:T^l58;VZGV_`3\O@P+S$#l/kLXcW*F%V;hY13JHn/PNOZ[H6JNe.@Wf\Q&!Is-7K](U"KI_g>[,nd\)R69>#HOOR?li5Wuci
%EMcGL%!)7rE5VjJMu.ZZWiZ12Wc/?9A'N-,C6J,FPsJ!>8rDf:"m2mT1UX=P?_d:'$4QHfbMLcq_.0Ja;Zsup<VY^U2TdWj.TBB(
%c5Gb4m1u.#-0,@ef,:nIP)1VA&,2m`=3S%`'tEG9$/Fd*^ccrE3C6B+fZ+/+<Cc=B#-^'P+J<>5S7qoK[&S0-Yk$lN_[S401ILb(
%1Dg\o"t6knqnX2--R[641\Xs$k9nSBG@b$hnj%;ad=T<WHFlR@pI=N4AD&!^o/uB$MTQS9B=\0@<Sh@g-:u?\rDXfJA5d][s(p7@
%(\Lb>p6KZS1S[%[HZNt'XT?i05"*<<UZh5"DuK1j\'i#YCj;tU_T;W?k1AE,l<cbQiRc2Se'>ZX[m@P4Nm6_ePlScuTXF`30Xk05
%`*4JfqoQkf4E,6F;3;=[\TZ>W0Tjme'Z#Uh]snIo6P9Y*#`=Alb8EC7*'dY<6B9i3"Tu[s.<[-)UE9qGb'5+'M-"u'fdP2JfXPcX
%pFi*Q@'lP^B4Z!;MiRj>#`bIV)s;BmKe7!Y&&Y&e!Ud"]1UpE\$dkZ!>ul;L$G@W+"j7"eN^Y;U)N!A<A,F'b>F;,'Ts@O%M<=YW
%>&u+Z\?6tI4=f'4fm@@g[QMb]=/lHio?WriI,=0@/ubG]jl)d>ID2R8C<lQ&Dq(;Xa[2,H,lcJeU/L5`RBl9#7q_'%3TI/R;s<\[
%7B1[2'GB,6ZEW-VK;rjPbiR@BgoB?uok)l9l2B_<nRtZQI`lLk]_]#Me**$N-)"8n=/mU\?%C7>?%Ai"$]qK]H_\=fr[o?o"k&o;
%drHneh7Oo//"p:+Ccl"FFC[%1aL%+_ZmO*S/IJ$0i[bc*"6%$TbNpV.b$&iD7S$6[c[f>:XjasLqg:]/7CoR",J$WrK95BmqnBWP
%iGG--1,HlG'mc)/9i?uA+B,<6;e'RBZ'5=fZV"CH(FfLR?!XG`H@'FFb%-#g@;D=D=X*h+0E(D*Q`@!;VDG5U9ZtWQ7)(uFh7Ia[
%VX-+Mi`W53i?6=M0r[i#bpL6K0%F6.Bgd6/YYK$YMAIB]*e$uo`.Yb?ICY%'LqR;k<h1NnFt!nh/W)7c_GDM2cle.`3a%Raa]?WF
%j3e)Z">AiTUJfI0n]!cTNV`q0cI2_0@"psf3]@ulEIL*9,Zb7/GN!%&QlZ=NRr2&fg*T?(fORV_(j=r]$oe-Fgs<%e_cTTDM)gE6
%nLd:!^9m0__CGZH8'3't%8;C*)NqAZ8O=r9`cnM]CjGN0k$^;X[KQ71O-3"$lAY>)&<RbkKL9B`eDf-TB[D]OA"F0a/>4<0"YnGa
%&Bg!0Pnb=KL-_WubL\<K9+#3YL?OCUCpL>qhi=92EC_r/PX'55#_Bj!#\c4sJMhj?aO]K!,Vb#SApcg(X\,VcW-M^$a;6+8SclVK
%7YPss$3o94Ldf6b\H.elH22YBGFPj22K7:]4NDpbZI%Lm7YTsUZqVtr6PMni3DtOn8gKP>HiV<&nchIKBk#!VJ.cPs*;:0/aSreu
%Jqi#*T7#7p$k0VaE*'jC#MI_%I.Itc"aA\<*VK#,Qi$6#>)us5*5]GqT9iFaJco7"BorHgGh8r>"d^*+ZBUGK6r:^eQgi*+k9^J1
%-_HF$CCXNNK#1\ToG".6LY82'ND"]lk-1s!Eu/\U`PU"eGu!$E=TcX*ml\eX1bhGUkAI_4H?'-j/^;DB@j1X55u?G!a,^4j74cY@
%ka!3J.q0]%Y)&\q-^tZA,tOEe4'(D58Q0pj<jiQ4r8Snrcj:kKI#2gVLkh80KKKoee)TufBJbU]W[]^`Fg<#;@RY'ia.es#6K%j!
%D@e9JNW(EAd;91q<_VqCVS8D>U\#XIZN[fWP0HcG&#Z.+=!NV2AL.n$jug31T<+daJEl#;FU2F7j,:eX[po/`\EA'cn1R=Kr[Rf-
%3Y1CN?FGqc;R7,)hEk5PZ^jF`&?AE)9eQrLW@`cDO]BO@5;q!L%KMrtfhs)Efr3+[Z+!sDED%GX@7p27M"r%1X[(G#1g2ef)S>`4
%9$HZu]F3HRrOZuT'>$62_B3*b)OA>s*]A:4AtKNE2T3[b<:<cV3lGe7c(M)3a@R.Fc'_JRc>0-^dVBRHkc!!I3Xk[SD008'ZGlB=
%;A`M%(TK7A52o7Lfbr)/d+_`aX[O+eeR))CR8E8'MC6#;9n;;N"&b+$,WC4-*RjTQjnSP;q8\e"Nm"4%[)Ki51M4_8L&[2rLOO'+
%0Fa%5J:!/*FNGT.U51p&c98[,W99.6?]]+f$m80O)/4C@$CN.c:A3'CC[d@kaGA6Jno*lHO<fB(,,PuT'irFs%,e*bHHNObOa*6R
%@g.n&ELb8`\MTT?(mYnFaTp"B?(q%<Eq;f.C%XCI?ONR$NtBbmg^*&=EY*q7MVj><HhJh)Bsj$8>EH5Z]5@m'jm5TV06%G(66Wft
%2Y=#.s(&+k:m$;k;?2!r_BUTEYs?*"3J+?)-c*;Fa,<9pH6F_Yph$s^bfjbB?6#ui_pm=:S1@MGaaNtHmt+o@+hg9r1jE<O3p1.0
%8RKKo.cou"@AS9I4C<]N5X)'pA@P&r\P5DPU=TN?%ce=,@PY^DQ\fJl?eKhT!R1;#&id_]+uSP.&p[4Enq@`;3G$q%F^0*;qXLMR
%?T=+WVK_j46B"G70ZB[Js82/!lE/7n'2PHpY`UY4<Zjel3rMHA*-Jq"8$5*SL8c@H;lQ1UopR+FLHnqK(5=2KTer>tT5066*rUqh
%=(_3`.jQNcc<s]8T$k;F'Pca:c1Hs05)KG&\PS3gg\J.HSCab>V"-t^+Eq,qNq3MW#fBr)\nM_%:TN$+k4%9r%IYrRfR'hM/L4,Z
%@l=eqiL(L+dVMak`C698j*'JGCF`)oh:h>n&erq#WG;i`a\nC>62T\fA1&#5b3d',b9R-m?frdWaF)qq,R%"^[s.#u.*C3rk:qLN
%MZW[LH-Pm,I`BVC45I+iIIjAK5Q;AqZ2rVHI-V@1\%Z8^p:K08%(&Mc2[mhpZhC`uFh-!Wi]]5FoS$\D_<`WoC<[.am&Oo6/d?J^
%=4)in9O/+RQRP#!_T+b\F[du/lN#O>;g(8qNL@of52J8]PKQ,e@E2s"`ugARq2Mj=p6)9<8em6bb;fSql0StD2%_TEH@IND/8.$L
%r:'6t&lgU1%=T="i?E9+A?Y-gJXe\LWi$G\N,Wdb;Z8+ur%Tqs;Bi.<jPL`b@o-C;&kTHF(GLj#VGoocMf]B#)baruGQEpAgWD:4
%377*WAF;PB^ZFgLrfc#2W@\a=0a0ntRXuFL*1\+Bj=%0.aEK^\J#h6f9kHG\OIP&FcN`V:;Y"Q]bG.Ad!:FoATu"[65:7uLZ5GC1
%Q,kMOBVqb\JLl*fTj*UqLm^uX-<rSeKdDsXr]hWkQ&;We4:8KC::3T06(_"FBFTkc$+seR.`kc.6m9`-?ofI]`=Pl%7;R9t"L<MK
%G'h/)!Ja:Bo;ljFdLiY'\A#NY.=QM]j6Ss5&#\"ed&m$"5OIl"]'nm;O`U&D.R;)+'WkZ2EjS"K2#&Oe<)cV&.;M[/<$:$G/Xk58
%MTE)@ODDmbiJ2-QmmYPoN(!ZQQtCqsX9[9+1X0sl#f.,>M=26Io5IKgI`78=>FBheX3@.&akW*CYc:Eu5hnRH)AQq0h::'?C#\u0
%,!63m<7_guohV/EE\(W_Qf4kL*(>LJ,*?4G#ks,dBN7g!5u+aiW4@T092k_j/nG,.P?'p"XOSuUl07&lI>sa>nZ=5;q-M=U2Gn%b
%:6[Q=S<huif1UKCc$uL*$2p9Wf-??9b:d5ZS%F^,l<#d(HGegc^]&tsIX(NiS*Kt;(-^s6FW^C*7aP5X#h!$sd4`T^':o:?qiI*i
%d==`>>ENKiV'h%X&C]+-FJ9X$C9a]iV^Y4QA[J\m@5Z9&IL2Wj,$ICr;)Hg6L`G6IB1rc/]^m0`R><8u0rU`kU7V!3-Ws<c0Vm&k
%lC_&+-mdY\-&60cH^&Q@_/PAu:9[o?;*0#^:n<#[@rY35)H5F-4q*MG92H=F%'H<>FIl75*D6+/og9nm&jdKq"1^g;[o+Z=4]>'>
%Lg%i)-+Dk6QnH0+fuf\^ZT1MI0^ZUBXdNFYQsI:Y$A;C]+eX!qDY1EDno.BT5+`=lHso'tH?O&pI:&`Wl?fq?OmX@.61.CFF;If1
%]6Po%M;2Z;S6/C1(eVkAl5b%hn,&)-G[Fu+_\tX2o_t`>IX(O$gTh%PY3ZF^7pd\ek[sKN^MWY7m]F2N9=%8&b3I@SJaYp<j\2`K
%6^efuI(GL'm`kRl8t*@:J7ju[L$elb$^"Kb2s'X.7Nu,i0-ZE3(f`+;C_uq2aI8NnA@EKCFD&f]T+//TBf;'28^nt(I^\\#;2$)I
%/lhVrkcd[7YJn7"dXbBmTg6T2Ci\TPh;"OpF+q\(g+LgJQIhgh*W7SYrUB[XC-=Or9*L76AWGNs8-tG)4*FUm^/2G\4,5Ldb:A^s
%5'e$Do<_B:\thm$VQ4ETJp.OH3Y6&&'YG3RY_qrVo-c*%#-i?>TeTE'.TRf_FcZZtfb9GQQ77o#64]!T(,%oj'_o_g81GDl7QhLP
%ebe\mBNbO".7=P1lQAG0Gm)i_eRaibd*kmm7gOY[I;U#:"]>\&#[[K8+l+0^2jZPoD;+-5nVJ2j*j8IV3ECi5-m3:>0?Zs/C7eI=
%QTe.,iN.B#>o!q]/f'?:1muJkd)glM>TOWO@f.htBfa@O>tBb?:>__u@Nj8+b]`V3a#u6AQOoJpi]bTT)@0OtaU-?N]k-l.8ff^5
%]7:G?<37`9Ok^p^&sB#C=!2L+.7YJOPVP(3LR<K,2nQr:6M/>(;mg,^.'KQS"$7*4>pS;CV_I0cSG3WRU*;P"":G6dB=1tCKXgXn
%UlK_qg(o:n%+=M/5@V>]3of:07Laj7Mefh#G*9X47`4pc?2Y8mQ/dL^2C'QgWKI%'!AiV4TICaN&Ar407U9L_OlquaXRW)rm:mtF
%>gNaqR1ss)6CO;hNUgGGKdgmJ*_(Uk=BgHso0m**NFd!T_\lKp,OO)b=??:9r*pmEm-/iV!bKkd0d07s]s\&a@-(<cAAfnEdHGJs
%@L9H.k>*'3@uCJ2o?_#Z/./&9"0p0EUljdY>Fo?9S":#2MBf[o_BI;F'n;Z?ImH5=h$A+FQU'\"7Co:7jJga;lJIBs^CL'?Mpk69
%mF[HYbC,rK!kK;gg(6T@=BdXhbo/<Cc6#?S/^ROdXEoSj6-(9!ZY*7>d6L0]kVX]o<`:RbC=.C@cluX[4Xa=K.^1mArnu*m1'+:9
%>tZ#Z!gO60TQsZ$P6ro^JRlmlhWX7@PqB]]DeafA%e86+N\k_#7]OiRR7k![l/`VgM+S(U%%:5#KJ,Vkn03Brqu":8cJWFE\1tQF
%(L#4b3CHSRAJ/HH#U:i0Rpab/`oMLS^l9@SF#2H(3DbB*%4?h&A1QKK#l+mo:rqFE!=`o[c8[&):u]jD-8Z^<_628da&T@tF10i3
%GCFXjUY%Wilg3uhpdojeKSh:W3>1?JFo7&pbo^U7:6?Jt(5(_O:n#^lc;[>;"3OAs)bht0)cPT^&DZU@OmCr%j\4bB`di,"H.ohH
%Ub.17)-Ugs3`)ZC^3$-nJ?49o(gr`A9O:dpU"#?\P_5P_P@\3-Ym?bGUneK#",mbV-K3V>e+'K@;'rqSP\!`De#mVO5c>4Dl=m?b
%k$R=H:\*R&A+hb"N@%"h:O8jJ$V:HVT,h9ZAA^dGe\99)b2S\<BdLRm9U[[M(PNnbLGLlM&"UnPQe8eRPk5T$L@FYt,uXXn<ipb-
%FfV2TH?^B;nC367\E#j;;PXD,><<:_a!XBh!M+nBk/$5kqF5\BPir6["n(T-V3&q\_AgN0*F6u2D&/Yl#rIW:c>et.*0hT#9A#Np
%\KM9`nWM14NC:isEQY>KU8u*j5H=TLRB8J+f418e>9p*1.mt>/$nAe%!EcsP`";+T9=3p3g*?Ps;Lnm=GXDIMf*`bjh'4_92f^hK
%g8eQZE[EK[G]0kBL?FXdXcn5X\S"So_&*Ua,Z2KFWe\T+.M7<;,]tMHkG;\(4Jo"&5\r[?R,Z-Q@TAQ+`hkX!'il.cA#iXL:)keP
%3u),ViFe79>Ae?`@UK3he(_Q1B@Cn0;P^8h?&PmVOnaa:KU%,iY&KsRV/T)kINkn?,O)%@)Gh680LTgQm5OG3ZGp^6GLNf\H_<.^
%.(*!lUmEs)S#t1&-d*6I'(JL:@Km.ca;jkRTPgjiql=`O>258,eUfTT-AU?MX6,g/f&C\#PGH$i_i;in>HYSj/mri840+B6E82FF
%)&6hR\8nH)B$!AsXS3cNBSGA1fPCj@N%/T^bfQn+]+;*B29org7t1F,bCWuREM@k-?I7plPmK$B1;$$P6#LF;`UUE![bIJP>&>k3
%q6IQs,Y5;=78:89;]6%L:(>u!dVG[#-Q'qo:(HRM&T\B0M%I]E0[JcCDbO_b!DCB+BJJu9$EKkhF\$!f,&EifRqK-7(b_tiLL1l]
%;8^#Aj+d,kg,+qR!bnLAk>:uO7:]hCmSh6mkh_"oDeJHR;F@+cfeBEX/u*Fg1FSs7Ro?7>c?c,Wg!5liVa:\J\Jh.uqs^8<>HNM@
%$5#M,Oea+`;)tm".bAf6l%pkj0*d1BfU?q&5-V\F>7G5d4P+AQ)&enI"TF2_Ce%#)`[1ri3/J)_\nFDm#s(V3hI)f4Zr%SXLbNiV
%a<UL1g:2/0IS5ZH=lsQ0,ec\b?p[gta<Fi!C!*uclsEdlU]L(TOIb=+9Q@l(K&O=0F0`h(j3.CIe`nP^rQ$raD)5_.\9U.0_(U<G
%k[hKZ/0Ocq)AF@_%4+Hd-I+KN`!11>l7u.&,dm-Y*i<ttTMAFt7'>RlmMQY/fVtr/Z>6mr5&0'+)A0Pg=,n"a"j1hJBF"33EM!\@
%'U3L(l(3q^>WoPRRa.8QCSI3k!Pj?>r.#%0[j3VZ@dRBJ_I-l4gRND,0eC8*j.]uBVF6[W""\^W_T*u!_*q%c>&@m*)lh?>RoKa;
%LN0:o1em'Gf=nuL*61#T2bk9lI3)X'%nl=pT.r$7kL$(F8msuCbIgO@Sc">'`^dTuZ+,sW+m;d>6Cf]S<@c.e/`UY=dohVJQmHbl
%OrYB'a=:gY4GjPkW;FpMdCP3`@X9rmI.VHcrol$7<S>T?Rj^HM"S**'[/B0L5Q(E=GQ7R1e,/l$nBJ^qp\i-^rUep<T0@`#m;K`=
%n[ni#q!Pa9ISf8&j+$Lsp$V]Q++O3l^O5nQm`5A&bPqjq9ud_#I.PC.rl<pqk5PEYFRDm~>
%AI9_PrivateDataEnd
